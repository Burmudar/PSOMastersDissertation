<tex2html_file>#./chpt7.tex#
\chapter<<5873>>Applying the \gls<<5456>>PSO<<5456>> to the \gls<<5457>>FAP<<5457>><<5873>>
\label<<5458>>chpt:psoapplicationFAP<<5458>>
\section<<5459>>Introduction<<5459>>
PSO, as discussed previously (see page \pageref<<5460>>sec:PSO<<5460>>), is an algorithm that is largely based on the flying behaviour exhibited by a flock of birds. This is why the core of the algorithm is based upon vector mathematics, with new positions and velocities being calculated after each iteration of the algorithm. Thus a D-dimensional vector represents each particle position and is then simulated by flying through the D-dimensional space using the velocity equation (see section~\ref<<5461>>sec:particleVelocity<<5461>> on page~\pageref<<5462>>eq:velocityupdate<<5462>>).
\begin<<6198>>tex2html_deferred<<6198>>\par\end<<6199>>tex2html_deferred<<6199>>
Most of the problems to which \gls<<5463>>PSO<<5463>> has been applied to date have been problems where the position of particles has a constant D-dimensional space. In formal terms, therefore, \emph<<5464>>the dimensionality of a particle position in its entirety is constant<<5464>>. Therefore, each particle has a position which is defined in a set dimension like 2D where a position is represented at \begin<<5884>>tex2html_wrap_inline<<5884>>$x$\end<<5885>>tex2html_wrap_inline<<5885>>\space and \begin<<5886>>tex2html_wrap_inline<<5886>>$y$\end<<5887>>tex2html_wrap_inline<<5887>>\space coordinate pairs.
\begin<<6200>>tex2html_deferred<<6200>>\par\end<<6201>>tex2html_deferred<<6201>>
This constant dimensionality introduces an intriguing problem if one wants to apply the \gls<<5465>>PSO<<5465>> to an inherent multidimension problem like the \gls<<5466>>FAP<<5466>>. This chapter deals with how the \gls<<5467>>PSO<<5467>> was applied to the \gls<<5468>>FAP<<5468>>.
\begin<<6202>>tex2html_deferred<<6202>>\par\end<<6203>>tex2html_deferred<<6203>>
Firstly, the particle position is represented in the frequency planning domain is defined. This definition of the particle position is important because it plays a central part in
the movement of particles through the Frequency planning domain. A description is then given of how each position is evaluated as well as the fitness function that the \gls<<5469>>PSO<<5469>> will use in the \gls<<5470>>FAP<<5470>> domain.
\begin<<6204>>tex2html_deferred<<6204>>\par\end<<6205>>tex2html_deferred<<6205>>
Arguably the most important part of the swarm is how the velocity of a particle is calculated and then moving it to a new position in the problem space. The velocity update is important, as it is the primary means by which the algorithm searches problem space.
\begin<<6206>>tex2html_deferred<<6206>>\par\end<<6207>>tex2html_deferred<<6207>>
As was discussed in section~\ref<<5471>>sec:psoonfap<<5471>>, applying the \gls<<5472>>PSO<<5472>> to the \gls<<5473>>FAP<<5473>> introduces a variety of challenges. One of the challenges is how exactly one ``flies'' a frequency plan towards another frequency plan. This is an important question that needs to be addressed as the \gls<<5474>>PSO<<5474>> algorithms have no other way of searching the problem space by any other means.
\begin<<6208>>tex2html_deferred<<6208>>\par\end<<6209>>tex2html_deferred<<6209>>
To be able to allow the \gls<<5475>>PSO<<5475>> to operate in the \gls<<5476>>FAP<<5476>> space custom velocity functions had to be developed to enable the particles of the swarm to move. These velocity functions that were developed will expanded on in section~\ref<<5477>>sec:velocityFAP<<5477>>. 
\begin<<6210>>tex2html_deferred<<6210>>\par\end<<6211>>tex2html_deferred<<6211>>
Developing custom velocity functions for the \gls<<5478>>PSO<<5478>> was simply not enough to achieve good results with the \gls<<5479>>PSO<<5479>> . Therefore more innovations needed to be made to improve the solution quality of the \gls<<5480>>PSO<<5480>> . In section~\ref<<5481>>sec:buildglobalbest<<5481>> a new mechanism is presented for selecting the global best which enabled the \gls<<5482>>PSO<<5482>> to get better fitness values and therefore direct the swarm more towards better solutions. 
\begin<<6212>>tex2html_deferred<<6212>>\par\end<<6213>>tex2html_deferred<<6213>>
Finally, the chapter will conclude with how the swarm utilises history to produce better results to enable the \gls<<5483>>PSO<<5483>> to further improve the solution quality.
\section<<5484>>Position in the Frequency Planning Domain<<5484>>
In this section a description is given of what a position is in the frequency planning domain. First a frequency plan is defined and the general structure to represent such a plan is provided. The section will conclude with the hard and soft constraints and how the constraints aid in creating a frequency plan that is suitable for a network.
\begin<<6214>>tex2html_deferred<<6214>>\par\end<<6215>>tex2html_deferred<<6215>>
A frequency plan, is almost exactly what the name implies: A plan that outlines frequency usage for a mobile telecommunication network. The benchmark problems that were used to test the developed \gls<<5485>>PSO<<5485>> all pertained to cellular phone networks and were presented in section~\ref<<5486>>sec:FAPBenchmarks<<5486>>. For cellular networks, the frequency plan outlines which frequency must be allocated to which transceiver.
\begin<<6216>>tex2html_deferred<<6216>>\par\end<<6217>>tex2html_deferred<<6217>>
With this basic definition, the problem is deceptive as one naturally assumes that there are an infinite number of frequencies that can be used or the number of frequencies available for assignment is more than the number of transceivers in the network. 
\begin<<6218>>tex2html_deferred<<6218>>\par\end<<6219>>tex2html_deferred<<6219>>
The reality is that there are only a finite number of frequencies available for cellphone transmissions, as was discussed in chapters~\ref<<5487>>chpt:celltech<<5487>> and \ref<<5488>>chpt:fap<<5488>>. Hence a regulatory body needs to assign wireless spectrum to cellphone network operators for use in their networks. A regulatory body is needed because, if a network operator uses just any frequency it wants, it is bound to interfere with someone else also utilising the same frequency.
\begin<<6220>>tex2html_deferred<<6220>>\par\end<<6221>>tex2html_deferred<<6221>>
A network is not assigned to the entire wireless spectrum for wireless communication, but rather only a subset is assigned to the network. If one observes the \gls<<5489>>FAP<<5489>> benchmark problems the \gls<<5490>>PSO<<5490>> was applied to (see section~\ref<<5491>>sec:FAPBenchmarks<<5491>>) for instance Siemens1, the allotted spectrum is from frequency 16 to 90. Which gives the network operator 74 frequencies to use in its network without considering other constraints. 
\begin<<6222>>tex2html_deferred<<6222>>\par\end<<6223>>tex2html_deferred<<6223>>
Besides the electromagnetic constraints that are also applicable here, there are regulatory constraints, for instance frequencies in the spectrum that are by no means allowed to be used. These frequencies are referred to as globally blocked frequencies and are hard constraints. An in-depth discussion of these constraints was given in section~\ref<<5492>>sec:Interference<<5492>>.
\begin<<6224>>tex2html_deferred<<6224>>\par\end<<6225>>tex2html_deferred<<6225>>
As discussed in chapters~\ref<<5493>>chpt:celltech<<5493>> and \ref<<5494>>chpt:fap<<5494>>, a cellphone network is divided into a number of cells, and each cell requires a certain number of transceivers to service its corresponding area. 
\begin<<6226>>tex2html_deferred<<6226>>\par\end<<6227>>tex2html_deferred<<6227>>
The number of transceivers is based on the expected volume of traffic that a particular cell will experience at peak network usage. Some cells might be located in highly populous areas, which means the potential traffic that cell might need to handle during peak network usage is very high and thus the cell has more than one transceiver to handle the potential traffic. With cells that are located in areas that have a low population, the potential traffic the cell might experience during peak network usage is low and thus the cell only has one transceiver to handle potential traffic.
\begin<<6228>>tex2html_deferred<<6228>>\par\end<<6229>>tex2html_deferred<<6229>>
Based on the amount of traffic a cell needs to handle, the number of transceivers differs; thus in a frequency plan not all cells have the same number of transceivers, otherwise a frequency plan can be modelled as a series of constant D-dimensional vectors, where the D represents the number of transceivers. 
~
\begin<<5495>>figure<<5495>>[ht]
	\begin<<6230>>tex2html_deferred<<6230>>\centering\end<<6231>>tex2html_deferred<<6231>>
	\begin<<6232>>tex2html_nowrap<<6232>>
\setlength\end<<6233>>tex2html_nowrap<<6233>> \fboxsep<<5496>>0pt<<5496>>
	\begin<<6234>>tex2html_nowrap<<6234>>
\setlength\end<<6235>>tex2html_nowrap<<6235>> \fboxrule<<5497>>0.5pt<<5497>>
	\begin<<6236>>tex2html_wrap_inline<<6236>>\fbox<<5874>>\includegraphics[width=4.8in, height=3.5in]<<5498>>./pictures/fapPlanDiagram.pdf<<5498>><<5874>>\end<<6237>>tex2html_wrap_inline<<6237>>
	\begin<<6238>>tex2html_deferred<<6238>>\caption<<5499>>The structure of a frequency plan<<5499>>\end<<6239>>tex2html_deferred<<6239>>
	\label<<5500>>fig:fapPlan<<5500>>
\end<<5501>>figure<<5501>>
~
As can be seen in figure \ref<<5502>>fig:fapPlan<<5502>> a cellular network can have any number (\begin<<5888>>tex2html_wrap_inline<<5888>>$N$\end<<5889>>tex2html_wrap_inline<<5889>>\space in the figure) of cells to attain the desired coverage over the geographical landscape. In the COST 259 benchmark problems the cellular networks have a large number of cells that range from 500 to more than 1 000. 
\begin<<6240>>tex2html_deferred<<6240>>\par\end<<6241>>tex2html_deferred<<6241>>
The most important part of the plan is the actual transceivers within each cell. In figure~\ref<<5503>>fig:fapPlan<<5503>> it can be clearly seen how the number of transceivers (TRXs) varies from one cell to the next. \begin<<5890>>tex2html_wrap_inline<<5890>>$F(i)$\end<<5891>>tex2html_wrap_inline<<5891>>\space is a frequency at position \begin<<5892>>tex2html_wrap_inline<<5892>>$i$\end<<5893>>tex2html_wrap_inline<<5893>>\space from the available usable spectrum. 
\begin<<6242>>tex2html_deferred<<6242>>\par\end<<6243>>tex2html_deferred<<6243>>
Based on the structure of the plan depicted in figure \ref<<5504>>fig:fapPlan<<5504>> there is no concept of which cell interferes with which other cell and if there is indeed interference, the extent of this interference. Not all this information is part of the plan. Instead this information, for the purpose of this research is supplied by the COST 259 benchmark. 
\begin<<6244>>tex2html_deferred<<6244>>\par\end<<6245>>tex2html_deferred<<6245>>
The interference information is referred to as the interference matrix. A definition of the structure of an interference matrix was given in section~\ref<<5505>>sec:Interference<<5505>>. As discussed, each entry references two cells' entries: Cell A and Cell B. Along with the entry the amount of interference that occurs when Cell B interferes with Cell A is also listed\begin<<6246>>tex2html_deferred<<6246>>\footnote<<5875>>Interference occurs based on the electromagnetic constraints as defined in chapter~\ref<<5506>>chpt:fap<<5506>><<5875>>\end<<6247>>tex2html_deferred<<6247>>.
\begin<<6248>>tex2html_deferred<<6248>>\par\end<<6249>>tex2html_deferred<<6249>>
A frequency plan is a possible solution to the \gls<<5507>>FAP<<5507>>. Therefore in the \gls<<5508>>PSO<<5508>> that was developed each particle's position in the solution space is represented by a frequency plan. As illustrated in figure~\ref<<5509>>fig:fapPlan<<5509>>, a frequency plan is just a series of cells, where each cell has a set of transceivers; thus in the \gls<<5510>>PSO<<5510>> algorithm a plan is actually represented as an array of cells. This enables the algorithm to access particular cells in a plan by index as can be observed in listed algorithms~\ref<<5511>>alg:velocitymethod1<<5511>> and ~\ref<<5512>>alg:velocitymethod2<<5512>>. 
\begin<<6250>>tex2html_deferred<<6250>>\par\end<<6251>>tex2html_deferred<<6251>>
Before the particles can actually start to move around in the \gls<<5513>>FAP<<5513>> space, they first need to be assigned positions. In the developed \gls<<5514>>PSO<<5514>> listed in algorithm~\ref<<5515>>alg:FAPPSO<<5515>> line 1 the first operation that the algorithm executes is to initialise all the particles in the swarm. A particle position in the algorithm is initialised by assigning it a random position; thus a frequency plan (representing a position) is randomly generated by the algorithm.
\begin<<5516>>algorithm<<5516>>[H]
\label<<5517>>alg:FAPPSO<<5517>>
\begin<<6252>>tex2html_deferred<<6252>>\caption<<5876>>The \gls<<5518>>FAP<<5518>> \gls<<5519>>PSO<<5519>> Algorithm<<5876>>\end<<6253>>tex2html_deferred<<6253>>
\begin<<5520>>algorithmic<<5520>>
\State \begin<<5894>>tex2html_wrap_inline<<5894>>$s_n$\end<<5895>>tex2html_wrap_inline<<5895>>\space = Initialize Swarm \begin<<5896>>tex2html_wrap_inline<<5896>>$s_n$\end<<5897>>tex2html_wrap_inline<<5897>>
\While<<5521>>Termination criterion not met<<5521>>
	\State EvaluateSwarm(\begin<<5898>>tex2html_wrap_inline<<5898>>$s_n$\end<<5899>>tex2html_wrap_inline<<5899>>)
	\State UpdateGlobalBest(\begin<<5900>>tex2html_wrap_inline<<5900>>$s_n$\end<<5901>>tex2html_wrap_inline<<5901>>)
	\State UpdateSwarmMovement(\begin<<5902>>tex2html_wrap_inline<<5902>>$s_n$\end<<5903>>tex2html_wrap_inline<<5903>>,\begin<<5904>>tex2html_wrap_inline<<5904>>$gbest$\end<<5905>>tex2html_wrap_inline<<5905>>)
\EndWhile
\end<<5522>>algorithmic<<5522>>
\end<<5523>>algorithm<<5523>>
\begin<<6254>>tex2html_deferred<<6254>>\par\end<<6255>>tex2html_deferred<<6255>>
The position is purely random in that the only considerations made by the position generator are that valid frequencies are assigned to transceivers installed at cells. Thus the generator does not check whether a frequency has already been assigned in the current cell or any other considerations. The intended purpose of the generator is just to place a particle in the problem space, not the premature start of the optimisation process.
\begin<<6256>>tex2html_deferred<<6256>>\par\end<<6257>>tex2html_deferred<<6257>>
Since particles are able to occupy positions in the \gls<<5524>>FAP<<5524>> space the \gls<<5525>>PSO<<5525>> algorithm is now able to move them around in the problem space. As mentioned previously, moving particles through the frequency plan solution space introduces an interesting problem due to the multidimensionality of a plan. A discussion of how particles are moved from one position to another through the solution space is provided in section \ref<<5526>>sec:velocityFAP<<5526>>
\begin<<6258>>tex2html_deferred<<6258>>\par\end<<6259>>tex2html_deferred<<6259>>
In the next section an explanation is given on the fitness function that determines the desirability of a particular particle's position or rather the frequency plan its position represents.
\section<<5527>>The Fitness Function<<5527>>
The fitness function rates the desirability of a particular particle's position in the problem space.
\begin<<6260>>tex2html_deferred<<6260>>\par\end<<6261>>tex2html_deferred<<6261>>
As discussed in the previous section, the COST 259 benchmark problems provide an interference matrix that lists the total amount of interference that occurs when a pair of cells interfere. As outlined in the structure definition (see section~\ref<<5528>>sec:Interference<<5528>>) each entry in the interference matrix defines a pair of cells that are said to interfere, along with two additional values. The first value is referred to as co-channel interference and is the total amount of interference that will occur on the communication link when the allocated frequency of one transceiver is equal to a transceiver in the other cell that is listed in the interference matrix. 
\begin<<6262>>tex2html_deferred<<6262>>\par\end<<6263>>tex2html_deferred<<6263>>
The second value is called adjacent channel interference and it is the total amount of interference that will occur on the communication link when the allocated frequency of a transceiver in one cell differs by 1 from another frequency allocated to the transceiver from the other cell that is listed in the interference matrix.
\begin<<6264>>tex2html_deferred<<6264>>\par\end<<6265>>tex2html_deferred<<6265>>
Particles move towards other particles because the other particles have indicated (through information sharing) that the positions they occupy are very lucrative and thus they have found potentially good solutions. The only way particles can know the lucrativeness of the position they occupy is if the position is evaluated with a fitness function. Thus the lucrativeness of a position is actually the fitness value obtained from the fitness function. 
\begin<<6266>>tex2html_deferred<<6266>>\par\end<<6267>>tex2html_deferred<<6267>>
Since a particle position is defined as a frequency plan, a procedure is needed that calculates the fitness of a frequency plan. With the \gls<<5529>>FS-FAP<<5529>> the primary concern is to keep interference to a minimum. Therefore in the \gls<<5530>>PSO<<5530>> that was developed the fitness value is the total amount of interference generated by all the cells with their allocated frequencies. 
\begin<<6268>>tex2html_deferred<<6268>>\par\end<<6269>>tex2html_deferred<<6269>>
The evaluation procedure goes through each pair of cells defined in the interference matrix where it looks up both cells in the frequency plan. The second cell is said to interfere with the first cell. Therefore each transceiver in the first cell is checked against all the transceivers of the other cell. Depending on whether the frequencies differ from each other, the fitness procedure adds either co-channel or the adjacent channel interference to a summing variable. This procedure is mathematically defined in chapter 3 (see page \pageref<<5531>>E:costFunction<<5531>> for the formal equation) and algorithm~\ref<<5532>>alg:fapcost<<5532>> is the pseudocode of the implement equation used by the \gls<<5533>>PSO<<5533>> . 
\begin<<6270>>tex2html_deferred<<6270>>\par\end<<6271>>tex2html_deferred<<6271>>
\begin<<5534>>algorithm<<5534>>
\begin<<6272>>tex2html_deferred<<6272>>\caption<<5535>>FAP Cost Function<<5535>>\end<<6273>>tex2html_deferred<<6273>>
\label<<5536>>alg:fapcost<<5536>>
	\begin<<5537>>algorithmic<<5537>>[1]
	\Require normalCell
	\Require interferingCe;;
	\State \begin<<5906>>tex2html_wrap_inline<<5906>>$totalInterference \leftarrow $\end<<5907>>tex2html_wrap_inline<<5907>>0
	\For<<5538>>Each TRX \begin<<5908>>tex2html_wrap_inline<<5908>>$trx_i$\end<<5909>>tex2html_wrap_inline<<5909>>\space in interferingCell<<5538>>
		\For<<5539>>Each TRX \begin<<5910>>tex2html_wrap_inline<<5910>>$trx_j$\end<<5911>>tex2html_wrap_inline<<5911>>\space in normalCell<<5539>>
			\State \begin<<5912>>tex2html_wrap_inline<<5912>>$interference \leftarrow 0$\end<<5913>>tex2html_wrap_inline<<5913>>
			\State \begin<<5914>>tex2html_wrap_inline<<5914>>$difference \leftarrow$\end<<5915>>tex2html_wrap_inline<<5915>>\space \begin<<5916>>tex2html_wrap_inline<<5916>>$|trx_i - trx_j|$\end<<5917>>tex2html_wrap_inline<<5917>>
			\If<<5540>>difference is 0<<5540>>
				\If<<5541>>coChannelInterference \begin<<5918>>tex2html_wrap_inline<<5918>>$\leq$\end<<5919>>tex2html_wrap_inline<<5919>>\space minInterferenceThershold<<5541>>
					\State \begin<<5920>>tex2html_wrap_inline<<5920>>$interference \leftarrow interference + 0$\end<<5921>>tex2html_wrap_inline<<5921>>
				\Else
					\State \begin<<5922>>tex2html_wrap_inline<<5922>>$interference \leftarrow interference + coChannelInterference$\end<<5923>>tex2html_wrap_inline<<5923>>
				\EndIf
			\Else
				\If<<5542>>difference is 1<<5542>>
					\If<<5543>>adjChannelInterference \begin<<5924>>tex2html_wrap_inline<<5924>>$\leq$\end<<5925>>tex2html_wrap_inline<<5925>>\space minInterferenceThershold<<5543>>
						\State \begin<<5926>>tex2html_wrap_inline<<5926>>$interference \leftarrow interference + 0$\end<<5927>>tex2html_wrap_inline<<5927>>
					\Else
						\State \begin<<5928>>tex2html_wrap_inline<<5928>>$interference \leftarrow interference + adjChannelInterference$\end<<5929>>tex2html_wrap_inline<<5929>>
					\EndIf
				\EndIf
			\EndIf
			\State \begin<<5930>>tex2html_wrap_inline<<5930>>$totalInterference \leftarrow totalInterference + interference$\end<<5931>>tex2html_wrap_inline<<5931>>
		\EndFor
	\EndFor
	\end<<5544>>algorithmic<<5544>>
\end<<5545>>algorithm<<5545>>
\begin<<6274>>tex2html_deferred<<6274>>\par\end<<6275>>tex2html_deferred<<6275>>
As can be seen in algorithm~\ref<<5546>>alg:fapcost<<5546>> not all interference values are added to the total amount of interference variable. The COST 259 benchmarks define a minimum tolerable interference variable. This means that if a given interference value is either equal to or less than this defined value the interference generated is negligible and can be disregarded as it will not have a noticeable impact on the communication link.
\begin<<6276>>tex2html_deferred<<6276>>\par\end<<6277>>tex2html_deferred<<6277>>
In the next section a description is given of how particles are moved from one iteration to the next using frequency plans as positions in the solution space.
\section<<5547>>Velocity Function for Frequency Planning<<5547>>
\label<<5548>>sec:velocityFAP<<5548>>
The elocity function is arguably the core of the \gls<<5549>>PSO<<5549>> algorithm. It is the procedure by which particles in the swarm move from one point to another in the solution space. 
\begin<<6278>>tex2html_deferred<<6278>>\par\end<<6279>>tex2html_deferred<<6279>>
The velocity function does not blindly move a particle from one point to another, but instead it takes the particle history into account as well as the best particle in the swarm. Therefore the velocity function is the core means by which the swarm explores the solution space. A more thorough explanation is provided in section~\ref<<5550>>sec:particleVelocity<<5550>>.
\begin<<6280>>tex2html_deferred<<6280>>\par\end<<6281>>tex2html_deferred<<6281>>
The development of a velocity function that is suitable for particles to move from one frequency plan to another is covered next. The section will start off with the first velocity function that was developed. With each method discussed, the problems associated with it will also be mentioned. 
\begin<<6282>>tex2html_deferred<<6282>>\par\end<<6283>>tex2html_deferred<<6283>>
This section will conclude with the second method that was developed and that is also the primary method the developed \gls<<5551>>PSO<<5551>> uses.
\begin<<6284>>tex2html_deferred<<6284>>\par\end<<6285>>tex2html_deferred<<6285>>
\subsection<<5552>>Movement in the Frequency Planning Domain<<5552>>
The standard velocity equation works on the basis of vector mathematics. Each particle has a velocity and position, which is represented by a standard mathematical vector. The standard equation alters the direction of the particle to move to a more promising position in the solution space that is in the general direction of the global best particle and a previous personal best position the particle held..
\begin<<6286>>tex2html_deferred<<6286>>\par\end<<6287>>tex2html_deferred<<6287>>
Vector mathematics has standard basic operations defined for adding, subtracting and multiplying; hence applying the \gls<<5553>>PSO<<5553>> to problems that are either mathematical functions or problems that map well to the vector domain is a defined process. With regard to the frequency planning domain an important question needs to be answered: How can one multidimension frequency plan be moved to another?
\begin<<6288>>tex2html_deferred<<6288>>\par\end<<6289>>tex2html_deferred<<6289>>
With any difficult problem it is better to break the problem down into its most basic constructs and then solve each piece individually until the problem as a collective is solved. This technique is also commonly known as divide and conquer. This technique was first applied to the nature of a frequency plan.
\begin<<6290>>tex2html_deferred<<6290>>\par\end<<6291>>tex2html_deferred<<6291>>
A frequency plan is a plan that consists of a series of different cells that are in use in the network. The plan specifies the frequencies that each individual transceiver installed at a cell must use for communication. Thus a frequency plan can broken up into three important constructs:
\begin<<5554>>enumerate<<5554>>
\item A plan is a list of different cells.
\item Each cell in a plan has a list of transceivers that it has installed.
\item Each installed transceiver has a single number allocated to it called the frequency. This frequency is used for communication.
\end<<5555>>enumerate<<5555>>
\begin<<6292>>tex2html_deferred<<6292>>\par\end<<6293>>tex2html_deferred<<6293>>
Now that a frequency plan has been broken up into its constructs, the question of how to move one frequency plan to another can be rephrased. How does one move a frequency allocated to a \emph<<5556>>transceiver<<5556>> in a particular \emph<<5557>>cell<<5557>> of one frequency plan to another frequency of the \emph<<5558>>same<<5558>> transceiver and cell in another \emph<<5559>>different<<5559>> plan? An important realisation needs to be noted here. In the \gls<<5560>>PSO<<5560>> at any one time the algorithm is only considering two positions and for the \gls<<5561>>FAP<<5561>> the two positions are frequency plans. Both plans are \emph<<5562>>identical<<5562>> except for the specific that frequencies transceivers use. Thus a cell that exists in the one plan, also exists in another plan. Both the cells have exactly the same number of transceivers installed; only the frequencies each individual transceiver uses for communication differ.
\begin<<6294>>tex2html_deferred<<6294>>\par\end<<6295>>tex2html_deferred<<6295>>
Using this realisation, the conclusion can be made that the velocity equation can only work with the frequencies assigned to transceivers. Therefore a potential velocity equation mechanism needs to operate on the finest granularity of a frequency plan, i.e. the frequencies.
\begin<<6296>>tex2html_deferred<<6296>>\par\end<<6297>>tex2html_deferred<<6297>>
The principle on which the first velocity method developed is based, is for the movement of the swarm to be at a much finer granularity and hence movement is based on frequencies. Therefore when a particle needs to move towards a global best particle, the velocity procedure goes into the intricate details of the particle wanting to move and the global best particle. The procedure goes into each cell defined in the frequency plan represented by the standard particle as well as the global best particle to be able to access each installed transceiver.
\begin<<6298>>tex2html_deferred<<6298>>\par\end<<6299>>tex2html_deferred<<6299>>
To be able to move from one frequency plan to another by utilising the standard velocity equation, the equation needs to be broken up into its smaller operations. In this way, small operations can be developed that perform the same function as the individual parts. 
\begin<<6300>>tex2html_deferred<<6300>>\par\end<<6301>>tex2html_deferred<<6301>>
The velocity equation in section~\ref<<5563>>sec:particleVelocity<<5563>> can be broken up into the following parts:
\label<<5564>>lst:velocitybreakup<<5564>>
\begin<<5565>>itemize<<5565>>
\item \textbf<<5566>>Subtraction<<5566>> --- \begin<<5932>>tex2html_wrap_inline<<5932>>$pbest - x_i(t)$\end<<5933>>tex2html_wrap_inline<<5933>>\space --- (SubtractionResultPbest) and \begin<<5934>>tex2html_wrap_inline<<5934>>$gbest - x_i(t)$\end<<5935>>tex2html_wrap_inline<<5935>>\space --- (SubtractionResultGbest)
\item \textbf<<5567>>Multiplication<<5567>> --- \begin<<5936>>tex2html_wrap_inline<<5936>>$c_1\phi_1 * SubtractionResultPbest$\end<<5937>>tex2html_wrap_inline<<5937>>\space --- (MultiPbestResult) and \begin<<5938>>tex2html_wrap_inline<<5938>>$c_2\phi_2 * SubtractionResultGbest$\end<<5939>>tex2html_wrap_inline<<5939>>\space --- (MultiGBestResult)
\item \textbf<<5568>>Addition<<5568>> --- \begin<<5940>>tex2html_wrap_inline<<5940>>$v_i(t) + MultiPbestResult + MultiGBestResult$\end<<5941>>tex2html_wrap_inline<<5941>>
\end<<5569>>itemize<<5569>>
There are no mathematical constructs that define how two frequency plans are added together or subtracted, let alone multiplied. As discussed earlier, a frequency plan is just a series of cells that have frequencies and these frequencies are numbers that internally are just integers and there are mathematical constructs that define how two integers should be added, subtracted or multiplied. Both velocity methods that were developed utilise the basic principle that on a fine granularity of a frequency plan one is merely working with integers.
\begin<<6302>>tex2html_deferred<<6302>>\par\end<<6303>>tex2html_deferred<<6303>>
The first velocity method is listed in algorithm~\ref<<5570>>alg:velocitymethod1<<5570>>. Velocity method 1 works on the principle of moving one cell in a particular frequency plan to the same cell in a different frequency plan. As noted earlier, the cells are the \emph<<5571>>same<<5571>>, but the frequencies that have been allocated to each transceiver within a cell differs. Thus in velocity method 1, each cell has an array of transceivers. The array of transceivers contains the individual frequency numbers that have been allocated to a cell.
\begin<<5572>>algorithm<<5572>>[H]
\begin<<6304>>tex2html_deferred<<6304>>\caption<<5573>>Velocity Method 1<<5573>>\end<<6305>>tex2html_deferred<<6305>>
\label<<5574>>alg:velocitymethod1<<5574>>
	\begin<<5575>>algorithmic<<5575>>[1]
	\Require currentParticle
	\Require globalBestParticle
	\State \begin<<5942>>tex2html_wrap_inline<<5942>>$pbest \leftarrow $\end<<5943>>tex2html_wrap_inline<<5943>>currentParticle position
	\State \begin<<5944>>tex2html_wrap_inline<<5944>>$gbest \leftarrow $\end<<5945>>tex2html_wrap_inline<<5945>>globalBestParticle position
	\State \begin<<5946>>tex2html_wrap_inline<<5946>>$localCoeff \leftarrow getLocalCoefficient()$\end<<5947>>tex2html_wrap_inline<<5947>>
	\State \begin<<5948>>tex2html_wrap_inline<<5948>>$globalCoeff \leftarrow getGlobalCoefficient()$\end<<5949>>tex2html_wrap_inline<<5949>>
	\State \begin<<5950>>tex2html_wrap_inline<<5950>>$pBestSubtractResult \leftarrow $\end<<5951>>tex2html_wrap_inline<<5951>>Subtract current Particle position from pbest
	\State \begin<<5952>>tex2html_wrap_inline<<5952>>$gBestSubtractResult \leftarrow $\end<<5953>>tex2html_wrap_inline<<5953>>Subtract current Particle position from gbest
	\State \begin<<5954>>tex2html_wrap_inline<<5954>>$a \leftarrow $\end<<5955>>tex2html_wrap_inline<<5955>>Multiply localCoeff with pBestSubtractResult and a random value
	\State \begin<<5956>>tex2html_wrap_inline<<5956>>$b \leftarrow $\end<<5957>>tex2html_wrap_inline<<5957>>Multiply globalCoeff with gBestSubtractResult and a random value
	\If<<5576>>first time velocity is calculated for current Particle<<5576>>
		\State \begin<<5958>>tex2html_wrap_inline<<5958>>$currentParticle.Velocity \leftarrow $\end<<5959>>tex2html_wrap_inline<<5959>>Add a and b
	\Else
		\State \begin<<5960>>tex2html_wrap_inline<<5960>>$abAdditionResult \leftarrow $\end<<5961>>tex2html_wrap_inline<<5961>>Add a and b
		\State \begin<<5962>>tex2html_wrap_inline<<5962>>$inertia \leftarrow getInertia()$\end<<5963>>tex2html_wrap_inline<<5963>>
		\State \begin<<5964>>tex2html_wrap_inline<<5964>>$newVelocity \leftarrow $\end<<5965>>tex2html_wrap_inline<<5965>>Add abAdditionResult and currentParticle.Velocity
		\State \begin<<5966>>tex2html_wrap_inline<<5966>>$currentParticle.Velocity \leftarrow $\end<<5967>>tex2html_wrap_inline<<5967>>Multiply inertia with newVelocity
	\EndIf
	\State \begin<<5968>>tex2html_wrap_inline<<5968>>$currentParticle.Position \leftarrow $\end<<5969>>tex2html_wrap_inline<<5969>>Add currentParticle.Velocity and currentParticle.Position
	\State SanatizePosition(currentParticle.Position)
	\end<<5577>>algorithmic<<5577>>
\end<<5578>>algorithm<<5578>>
\begin<<6306>>tex2html_deferred<<6306>>\par\end<<6307>>tex2html_deferred<<6307>>
Velocity method 1 actually moves one array of transceivers to another array of transceivers. This is why, if one observes lines 5 -- 17 in algorithm~\ref<<5579>>alg:velocitymethod1<<5579>>, each particle position is passed to methods that are named Subtraction, Multiplication and Addition. As discussed in the previous section, each position of a particle is actually a frequency plan.
\begin<<6308>>tex2html_deferred<<6308>>\par\end<<6309>>tex2html_deferred<<6309>>
The first method that is used to calculate the velocity of a frequency plan, is the first basic operation defined in the velocity equation, namely subtraction, as can be observed from algorithm~\ref<<5580>>alg:arraySubtract<<5580>>. The particular algorithm expects two positions to be given to it: the position it must be moved from and the position it must be move to. Because each position is a frequency plan that contains an array of cells, a for-loop is started on line 1 that allows the algorithm to go through each cell that is defined in the frequency plan. Each cell has a number of transceivers, each with an assigned frequency. 
\begin<<5581>>algorithm<<5581>>[H]
\begin<<6310>>tex2html_deferred<<6310>>\caption<<5582>>Subtract One Position From Another<<5582>>\end<<6311>>tex2html_deferred<<6311>> (Method 1)
\label<<5583>>alg:arraySubtract<<5583>>
\begin<<5584>>algorithmic<<5584>>[1]
	\Require fromPosition
	\Require toPosition
	\For<<5585>>Each cell \begin<<5970>>tex2html_wrap_inline<<5970>>$c$\end<<5971>>tex2html_wrap_inline<<5971>>\space in fromPosition<<5585>>
		\For<<5877>>Each transceiver \begin<<5972>>tex2html_wrap_inline<<5972>>$f_<<5586>>trx<<5586>>$\end<<5973>>tex2html_wrap_inline<<5973>>\space in \begin<<5974>>tex2html_wrap_inline<<5974>>$c$\end<<5975>>tex2html_wrap_inline<<5975>><<5877>>
			\State \begin<<5976>>tex2html_wrap_inline<<5976>>$t_<<5587>>trx<<5587>> \leftarrow$\end<<5977>>tex2html_wrap_inline<<5977>>\space Get same \begin<<5978>>tex2html_wrap_inline<<5978>>$f_<<5588>>trx<<5588>>$\end<<5979>>tex2html_wrap_inline<<5979>>\space in toPosition
			\State \begin<<5980>>tex2html_wrap_inline<<5980>>$f_<<5589>>trx<<5589>> \leftarrow f_<<5590>>trx<<5590>> - t_<<5591>>trx<<5591>>$\end<<5981>>tex2html_wrap_inline<<5981>>
		\EndFor
	\EndFor
\end<<5592>>algorithmic<<5592>>
\end<<5593>>algorithm<<5593>>
\begin<<6312>>tex2html_deferred<<6312>>\par\end<<6313>>tex2html_deferred<<6313>>
To be able to subtract two transceivers from each other, the algorithm needs access to a particular transceiver of a cell. The algorithm gains this access by entering another for-loop based on the number of transceivers a cell has, as can be observed to occur in line 2. Within this for-loop the actual subtraction of transceivers occurs.
\begin<<6314>>tex2html_deferred<<6314>>\par\end<<6315>>tex2html_deferred<<6315>>
The algorithm first obtains the exact same transceiver in the toPosition frequency plan. This operation is quick, as the two plans are identical except for the frequencies assigned to transceivers for each cell. Thus the algorithm is able to refer to the cell and specific transceiver in the toPosition plan by the same index it utilises to access the cell and transceiver in the fromPosition.
\begin<<6316>>tex2html_deferred<<6316>>\par\end<<6317>>tex2html_deferred<<6317>>
Once the toPosition plan transceiver frequency value has been obtained, the algorithm performs a standard integer subtraction as seen in line 4 of algorithm~\ref<<5594>>alg:arraySubtract<<5594>>.
After the subtraction algorithm is completed, a position is returned which is the result of subtracting the fromPosition from the toPosition. Using this result the velocity method 1 algorithm is now ready to apply the next operation in the velocity update equation, namely multiplication which is depicted in algorithm~\ref<<5595>>alg:arrayMultiply<<5595>>.
\begin<<6318>>tex2html_deferred<<6318>>\par\end<<6319>>tex2html_deferred<<6319>>
\begin<<5596>>algorithm<<5596>>[H]
\begin<<6320>>tex2html_deferred<<6320>>\caption<<5597>>Multiply Position by a Value (Method 1)<<5597>>\end<<6321>>tex2html_deferred<<6321>>
\label<<5598>>alg:arrayMultiply<<5598>>
\begin<<5599>>algorithmic<<5599>>[1]
	\Require fromPosition
	\Require value
	\Require mustRandom
	\For<<5600>>Each cell \begin<<5982>>tex2html_wrap_inline<<5982>>$c$\end<<5983>>tex2html_wrap_inline<<5983>>\space in fromPosition<<5600>>
		\For<<5601>>Each transceiver \begin<<5984>>tex2html_wrap_inline<<5984>>$trx$\end<<5985>>tex2html_wrap_inline<<5985>>\space in \begin<<5986>>tex2html_wrap_inline<<5986>>$c$\end<<5987>>tex2html_wrap_inline<<5987>><<5601>>
			\If<<5602>>must multiply with random number<<5602>>
				\State \begin<<5988>>tex2html_wrap_inline<<5988>>$trx \leftarrow trx * value * random()$\end<<5989>>tex2html_wrap_inline<<5989>>
			\Else
				\State \begin<<5990>>tex2html_wrap_inline<<5990>>$trx \leftarrow trx * value$\end<<5991>>tex2html_wrap_inline<<5991>>
			\EndIf
		\EndFor
	\EndFor
\end<<5603>>algorithmic<<5603>>
\end<<5604>>algorithm<<5604>>
\begin<<6322>>tex2html_deferred<<6322>>\par\end<<6323>>tex2html_deferred<<6323>>
The multiplication algorithm is where the local Coefficient and the global coefficient\begin<<6324>>tex2html_deferred<<6324>>\footnote<<5878>>Local coefficient is the cognitive component and the global coefficient is the social component. These components are discussed in section~\ref<<5605>>sec:psointro<<5605>><<5878>>\end<<6325>>tex2html_deferred<<6325>> defined for the \gls<<5606>>PSO<<5606>> are multiplied into a position, i.e. frequency plan. As with the subtraction algorithm the multiplication algorithm enters two for-loops. The first for-loop is to access each cell defined in the frequency plan. The second loop allows the algorithm to access each transceiver within a particular cell. These for-loops can be observed to occur in algorithm~\ref<<5607>>alg:arrayMultiply<<5607>> in lines 1 and 2.
\begin<<6326>>tex2html_deferred<<6326>>\par\end<<6327>>tex2html_deferred<<6327>>
Once the algorithm is able to access each individual transceiver and get its assigned frequency, it is able to perform the multiplication operation. As can be observed in the algorithm in line 3 the algorithm checks whether it needs to multiply the frequency by an additional random number besides the \begin<<5992>>tex2html_wrap_inline<<5992>>$value$\end<<5993>>tex2html_wrap_inline<<5993>>\space passed to the algorithm. The reason this is done is that multiplication is required in the \gls<<5608>>PSO<<5608>> in the following cases:
\begin<<6328>>tex2html_deferred<<6328>>\par\end<<6329>>tex2html_deferred<<6329>>
\begin<<5609>>itemize<<5609>>
\item The inertia case --- \begin<<5994>>tex2html_wrap_inline<<5994>>$0.5 * v(t+1)$\end<<5995>>tex2html_wrap_inline<<5995>>, where 0.5 is the inertia value and \begin<<5996>>tex2html_wrap_inline<<5996>>$v(t+1)$\end<<5997>>tex2html_wrap_inline<<5997>>\space is velocity that has already been calculated for a particular particle \begin<<5998>>tex2html_wrap_inline<<5998>>$t$\end<<5999>>tex2html_wrap_inline<<5999>>. Note, a velocity that has been calculated is still a frequency plan.
\item Standard velocity calculation randomisation case --- As can be observed from the velocity equation~\ref<<5610>>eq:velocityupdate<<5610>> and also from the multiplication bullet point on page~\pageref<<5611>>lst:velocitybreakup<<5611>>, the equation requires that a position be multiplied by a coefficient \begin<<6000>>tex2html_wrap_inline<<6000>>$c_1$\end<<6001>>tex2html_wrap_inline<<6001>>\space or \begin<<6002>>tex2html_wrap_inline<<6002>>$c_2$\end<<6003>>tex2html_wrap_inline<<6003>>\space and then a random value \begin<<6004>>tex2html_wrap_inline<<6004>>$\phi_1$\end<<6005>>tex2html_wrap_inline<<6005>>\space or \begin<<6006>>tex2html_wrap_inline<<6006>>$\phi_2$\end<<6007>>tex2html_wrap_inline<<6007>>. 
\end<<5612>>itemize<<5612>>
\begin<<6330>>tex2html_deferred<<6330>>\par\end<<6331>>tex2html_deferred<<6331>>
Regardless of which case is executed, the actual operation that is performed is integer multiplication, which therefore means that even though the inertia and random numbers are decimal, the fractional component of the result is discarded. Channels are integers so the loss of the fractional component is warranted as it is of no use.
\begin<<6332>>tex2html_deferred<<6332>>\par\end<<6333>>tex2html_deferred<<6333>>
As per the last bullet point on page~\pageref<<5613>>lst:velocitybreakup<<5613>> the last basic operation that occurs in the velocity equation is an integer addition operation. Algorithm~\ref<<5614>>alg:arrayAdd<<5614>> is the addition procedure used by velocity method 1 (algorithm~\ref<<5615>>alg:velocitymethod1<<5615>>).
\begin<<5616>>algorithm<<5616>>[H]
\begin<<6334>>tex2html_deferred<<6334>>\caption<<5617>>Add One Position to Another (Method 1)<<5617>>\end<<6335>>tex2html_deferred<<6335>>
\label<<5618>>alg:arrayAdd<<5618>>
\begin<<5619>>algorithmic<<5619>>[1]
	\Require fromPosition
	\Require toPosition
	\For<<5620>>Each cell \begin<<6008>>tex2html_wrap_inline<<6008>>$c$\end<<6009>>tex2html_wrap_inline<<6009>>\space in fromPosition<<5620>>
		\For<<5879>>Each transceiver \begin<<6010>>tex2html_wrap_inline<<6010>>$f_<<5621>>trx<<5621>>$\end<<6011>>tex2html_wrap_inline<<6011>>\space in \begin<<6012>>tex2html_wrap_inline<<6012>>$c$\end<<6013>>tex2html_wrap_inline<<6013>><<5879>>
			\State \begin<<6014>>tex2html_wrap_inline<<6014>>$t_<<5622>>trx<<5622>> \leftarrow$\end<<6015>>tex2html_wrap_inline<<6015>>\space Get same \begin<<6016>>tex2html_wrap_inline<<6016>>$f_<<5623>>trx<<5623>>$\end<<6017>>tex2html_wrap_inline<<6017>>\space in toPosition
			\State \begin<<6018>>tex2html_wrap_inline<<6018>>$f_<<5624>>trx<<5624>> \leftarrow f_<<5625>>trx<<5625>> + t_<<5626>>trx<<5626>>$\end<<6019>>tex2html_wrap_inline<<6019>>
			\State Bound(\begin<<6020>>tex2html_wrap_inline<<6020>>$t_<<5627>>trx<<5627>>$\end<<6021>>tex2html_wrap_inline<<6021>>)
		\EndFor
	\EndFor
\end<<5628>>algorithmic<<5628>>
\end<<5629>>algorithm<<5629>>
\begin<<6336>>tex2html_deferred<<6336>>\par\end<<6337>>tex2html_deferred<<6337>>
In the addition algorithm, as with multiplication and subtraction, two for-loops are started as can be observed in lines 1 -- 2. The algorithm first starts iterating through all the cell's present in the fromPosition frequency plan and then within the cell for-loop starts another for-loop which iterates through each cells transceivers. Inside the transceiver for-loop the algorithm actually performs the addition of two frequencies.
\begin<<6338>>tex2html_deferred<<6338>>\par\end<<6339>>tex2html_deferred<<6339>>
Two frequencies are added based on integer addition. Once the fromPosition cell transceiver is accessed, the algorithm retrieves the exact transceiver and cell in the toPosition in order to get its allocated frequency value. After both values have been retrieved the algorithm performs the addition as can be observed in line 4 of algorithm~\ref<<5630>>alg:arrayAdd<<5630>>.
\begin<<6340>>tex2html_deferred<<6340>>\par\end<<6341>>tex2html_deferred<<6341>>
The addition operation is the last operation that occurs in the velocity equation and is also the only operation that occurs when the resultant velocity is applied to the current position of a particle as in equation~\ref<<5631>>eq:positionupdate<<5631>>. Since the addition operation is also used in the final position update of the particle, its last operation in the transceiver loop a bound operation. 
\begin<<6342>>tex2html_deferred<<6342>>\par\end<<6343>>tex2html_deferred<<6343>>
The purpose of the bound operation is to keep the frequencies within valid value ranges.
\subsection<<5632>>Keeping Frequencies Bounded<<5632>>
In the previous section the first velocity method that was developed was discussed. The velocity method is important as it calculates the direction and next position of a particle in the problem space, where the problem space is the \gls<<5633>>FAP<<5633>> and a position of a particle is a possible frequency plan. With the velocity method defined, the swarm is now able to move around in the problem space, but this alone is not enough. The swarm has no concept of the constraints\begin<<6344>>tex2html_deferred<<6344>>\footnote<<5880>>Constraints in the \gls<<5634>>FAP<<5634>> are discussed in chapter~\ref<<5635>>chpt:fap<<5635>><<5880>>\end<<6345>>tex2html_deferred<<6345>> that are imposed inherently by the domain as well as the network for which a frequency plan is being created.
\begin<<6346>>tex2html_deferred<<6346>>\par\end<<6347>>tex2html_deferred<<6347>>
Due to the swarm not having a concept of the constraints a constraint handling mechanism needs to be used. Each of the methods discussed in this section fall under the category of using the \emph<<5636>>repair method<<5636>> which is discussed in section~\ref<<5637>>sec:chm<<5637>>
\begin<<6348>>tex2html_deferred<<6348>>\par\end<<6349>>tex2html_deferred<<6349>>
The first method that was developed was the BoundValue method and is depicted in algorithm~\ref<<5638>>alg:boundvalue<<5638>>.
\begin<<5639>>algorithm<<5639>>[H]
\begin<<6350>>tex2html_deferred<<6350>>\caption<<5640>>BoundValue Method<<5640>>\end<<6351>>tex2html_deferred<<6351>>
\label<<5641>>alg:boundvalue<<5641>>
\begin<<5642>>algorithmic<<5642>>[1]
	\Require Position
	\For<<5643>>Each cell \begin<<6022>>tex2html_wrap_inline<<6022>>$c_i$\end<<6023>>tex2html_wrap_inline<<6023>>\space in Position<<5643>>
		\For<<5644>>Each transceiver \begin<<6024>>tex2html_wrap_inline<<6024>>$trx_j$\end<<6025>>tex2html_wrap_inline<<6025>>\space in \begin<<6026>>tex2html_wrap_inline<<6026>>$c_i$\end<<6027>>tex2html_wrap_inline<<6027>><<5644>>
			\State \begin<<6028>>tex2html_wrap_inline<<6028>>$trx_j = \left|trx_j\right|$\end<<6029>>tex2html_wrap_inline<<6029>>
			\If<<5645>>\begin<<6030>>tex2html_wrap_inline<<6030>>$trx_j \geq maxChannelValue$\end<<6031>>tex2html_wrap_inline<<6031>><<5645>>
				\State \begin<<6036>>tex2html_wrap_inline<<6036>>$trx_j = minChannelValue + (\text<<5646>>\begin<<6032>>tex2html_wrap_inline<<6032>>$trx_j$\end<<6033>>tex2html_wrap_inline<<6033>>\space mod \begin<<6034>>tex2html_wrap_inline<<6034>>$maxChannelValue$\end<<6035>>tex2html_wrap_inline<<6035>><<5646>>)$\end<<6037>>tex2html_wrap_inline<<6037>>
			\Else 
				\If<<5647>>\begin<<6038>>tex2html_wrap_inline<<6038>>$trx_j \leq minChannelValue$\end<<6039>>tex2html_wrap_inline<<6039>><<5647>>
					\State BoundValue(\begin<<6040>>tex2html_wrap_inline<<6040>>$trx_j + minChannelValue$\end<<6041>>tex2html_wrap_inline<<6041>>)
				\EndIf
			\EndIf
		\EndFor
	\EndFor
\end<<5648>>algorithmic<<5648>>
\end<<5649>>algorithm<<5649>>
The constraints that are imposed are usually some part of the spectrum that may under no circumstances be used anywhere in the network, which as discussed in chapter~\ref<<5650>>chpt:fap<<5650>> is known as globally blocked frequencies. Some frequencies that are only allowed to be used in certain parts of the network are known as locally blocked frequencies. Then of course the swarm also needs to take into account the electromagnetic constraints\begin<<6352>>tex2html_deferred<<6352>>\footnote<<5881>>Discussed in section~\ref<<5651>>sec:Interference<<5651>><<5881>>\end<<6353>>tex2html_deferred<<6353>>.
\begin<<6354>>tex2html_deferred<<6354>>\par\end<<6355>>tex2html_deferred<<6355>>
The velocity function used by the \gls<<5652>>PSO<<5652>> needs to be altered to make the swarm in some sense more aware of the domain it is operating in and hence keep the particle positions bounded within the allowable search space. By not bounding particle positions in the \gls<<5653>>FAP<<5653>> problem space, transceivers of some cells might be assigned a frequency that is not allowed or not even allocated to the network. The \gls<<5654>>PSO<<5654>> will accept this assignment since the fitness function operates on the assumption that under no circumstances will these invalid frequencies be assigned and thus does not penalise invalid assignments.
\begin<<6356>>tex2html_deferred<<6356>>\par\end<<6357>>tex2html_deferred<<6357>>
To keep assigned frequency values to transceivers in the allocated spectrum of the network a boundary check needs to be added to the velocity method. The purpose of the boundary check is to validate all assignments in a position, i.e. the frequency plan that a particle currently occupies, and if any assignments violate the defined boundary constraints then it must take the violating value and modify it to be in the acceptable value range.
\begin<<6358>>tex2html_deferred<<6358>>\par\end<<6359>>tex2html_deferred<<6359>>
The boundary check that is used by velocity method 1 operates on the basis that for any range of values there is a defined lower bound (a minimum value) and upper bound (a maximum value). The frequency boundary check is only applied when one of the following conditions is met after the calculated velocity has been applied to the current position:
\begin<<5655>>itemize<<5655>>
\item If a frequency allocated to a transceiver is above the maximum allowable frequency (upper bound) given to the network. 
\item If a frequency allocated to a transceiver is below the minimum allowable frequency (lower bound) given to the network.
\end<<5656>>itemize<<5656>>
\begin<<6360>>tex2html_deferred<<6360>>\par\end<<6361>>tex2html_deferred<<6361>>
As can be seen in line 5 of algorithm~\ref<<5657>>alg:boundvalue<<5657>>, a mod operation is applied to the value to bring it within the allowable range. The integer mod operation is similar to integer division, the only difference being in the result that is produced. Division produces the result of two numbers being divided. Mod produces the remainder of two numbers being divided. If two numbers divide perfectly into one another there will not be any remainder; if the numbers do not divide perfectly into one another there will be a remainder. 
\begin<<5658>>align<<5658>>
	10 mod 50 =;SPMamp; 10 \\ 
	60 mod 50 =;SPMamp; 10 \\ 
	50 mod 50 =;SPMamp; 0 \\ 
	100 mod 50 =;SPMamp; 0 \\ 
	35 mod 50 =;SPMamp; 35 
\end<<5659>>align<<5659>>
\begin<<6362>>tex2html_deferred<<6362>>\par\end<<6363>>tex2html_deferred<<6363>>
As can be seen in the above example mod operations, any value that is modded will be kept in the range \begin<<6042>>tex2html_wrap_inline<<6042>>$[0,50]$\end<<6043>>tex2html_wrap_inline<<6043>>. With regard to frequencies, the following occurs: If, for instance, the maximum allowable frequency is 50, and the transceiver has a frequency value (after velocity) of 56, the 56 value is modded by 50 to produce a value of 6. This modded value is then added to the minimum allowable frequency. In essence, the value is wrapped around to always be within acceptable range. 
\begin<<6364>>tex2html_deferred<<6364>>\par\end<<6365>>tex2html_deferred<<6365>>
The difficult case is when the frequency value is lower than the minimum frequency given to the network. This is because modding the frequency value has no effect. For example, if the lowest allowable frequency is 20 and the transceiver value after movement is 15, modding the transceiver value of 15 by 20 has no effect. To solve this, the following options are then considered:
\begin<<6366>>tex2html_deferred<<6366>>\par\end<<6367>>tex2html_deferred<<6367>>
\begin<<5660>>enumerate<<5660>>
\item First subtract the lower value from the minimum allowable frequency. Then add the result to the minimum allowable frequency. The resultant value is checked again as to whether it oversteps the bounds of the maximum allowable frequency and is bounded accordingly.
\item Add the lower value to the minimum allowable frequency. The resultant value is checked as towhether it oversteps the bounds of the maximum allowable frequency and is bounded accordingly.
\item Repeatedly subtract the lower value from the maximum allowable frequency until the resultant frequency is within the acceptable frequency range.
\end<<5661>>enumerate<<5661>>
\begin<<6368>>tex2html_deferred<<6368>>\par\end<<6369>>tex2html_deferred<<6369>>
An important notion to consider is that, based on the velocity equation, it is entirely within the realm of possibility that a frequency value after movement might contain a negative value. As can be seen in line 3 of algorithm~\ref<<5662>>alg:boundvalue<<5662>> the algorithm solves this problem by first taking the absolute value of the negative frequency value. The boundary check then treats the now positive frequency value as a normal value that needs to be bounded.
\begin<<6370>>tex2html_deferred<<6370>>\par\end<<6371>>tex2html_deferred<<6371>>
It is better to use frequency index values rather than actual frequency values for frequency plans, and this is explained below.
\subsection<<5663>>Using Indices instead of Frequencies<<5663>>
\label<<5664>>sec:velocityFAP2<<5664>>
As discussed in section~\ref<<5665>>sec:velocityFAP<<5665>> and as can be observed from algorithm~\ref<<5666>>alg:velocitymethod1<<5666>>, the first velocity method that was developed for the \gls<<5667>>PSO<<5667>> worked with raw frequency values. This is not ideal since upon closer inspection the frequency range that the swarm used to move around was indeed incorrect. The bound value algorithm only keeps frequencies within a minimum and maximum allowable frequency range, but globally blocked frequencies and locally blocked frequencies can be in between this minimum and maximum frequency range. 
\begin<<6372>>tex2html_deferred<<6372>>\par\end<<6373>>tex2html_deferred<<6373>>
With velocity method 1 and the \gls<<5668>>PSO<<5668>> using raw frequency values, the swarm increasingly moved towards allocating these blocked frequencies to trans-ceivers since the fitness function does not penalise the use of blocked or invalid frequency values. This is partly due to the fact that these values are under no circumstances allowed to be used and thus the fitness function is not designed to check for these values explicitly to impose a penalty.
\begin<<6374>>tex2html_deferred<<6374>>\par\end<<6375>>tex2html_deferred<<6375>>
Frequency plans that utilise these blocked frequencies are invalid and cannot be used. If a network were to use a plan that uses blocked frequencies, it could cause unexpected interference to other services and the network could be fined by the governing body that controls the spectrum. A bare minimum requirement then is that the \gls<<5669>>PSO<<5669>> must generate valid frequency plans and hence swarm particles can only occupy valid positions. The following options were presented to solve the problem of particles moving towards invalid positions and hence having invalid frequency plans:
\begin<<5670>>enumerate<<5670>>
\item Modify the fitness function to penalise a frequency plan if it uses any globally blocked frequencies or locally blocked frequencies.
\item Instead of letting the swarm work with raw frequency values, rather let it work with indices of an array. The array index values indicate positions in an array that has been pre-filled with only \emph<<5671>>valid<<5671>> frequencies. Thus the swarm then moves around in a range from 0 to \begin<<6044>>tex2html_wrap_inline<<6044>>$F$\end<<6045>>tex2html_wrap_inline<<6045>>, where \begin<<6046>>tex2html_wrap_inline<<6046>>$F$\end<<6047>>tex2html_wrap_inline<<6047>>\space is the size of the frequency array.
\end<<5672>>enumerate<<5672>>
\begin<<6376>>tex2html_deferred<<6376>>\par\end<<6377>>tex2html_deferred<<6377>>
With the first solution, the fitness function would have to be modified to impose a penalty if a prohibited frequency value were used. The first proposed solution was disregarded because it introduces complexity which can be completely avoided with the second proposed solution.
\begin<<6378>>tex2html_deferred<<6378>>\par\end<<6379>>tex2html_deferred<<6379>>
With the second solution the fitness function does not have to be modified and the boundary check is simplified since there is no need to check for a lower bound. The boundary check now only has to check for negative index values and whether the upper bound, which is now the size of the array, is violated. 
\begin<<6380>>tex2html_deferred<<6380>>\par\end<<6381>>tex2html_deferred<<6381>>
The second method is also a method known in constraint handling as \emph<<5673>>preserving feasibility<<5673>> (see section~\ref<<5674>>sec:chm<<5674>> for a discussion on constriant handling methods). By using only valid frequencies the search space is even more constricted to only feasible solutions.
\begin<<6382>>tex2html_deferred<<6382>>\par\end<<6383>>tex2html_deferred<<6383>>
Working with index values rather than with raw frequency values led to  a second velocity method. Algorithm~\ref<<5675>>alg:velocitymethod2<<5675>> is the pseudocode for the second velocity method. The second velocity method differs from velocity method 1 due to it being designed to only work with indices of an array.
\begin<<5676>>algorithm<<5676>>[H]
\begin<<6384>>tex2html_deferred<<6384>>\caption<<5677>>Velocity Method 2<<5677>>\end<<6385>>tex2html_deferred<<6385>>
\label<<5678>>alg:velocitymethod2<<5678>>
\begin<<5679>>algorithmic<<5679>>[1]
	\Require currentParticle
	\Require globalBestParticle
	\State \begin<<6048>>tex2html_wrap_inline<<6048>>$currPos \leftarrow$\end<<6049>>tex2html_wrap_inline<<6049>>\space currentParticle position
	\State \begin<<6050>>tex2html_wrap_inline<<6050>>$pbestPos \leftarrow$\end<<6051>>tex2html_wrap_inline<<6051>>\space currentParticle best position
	\State \begin<<6052>>tex2html_wrap_inline<<6052>>$gbestPos \leftarrow$\end<<6053>>tex2html_wrap_inline<<6053>>\space global best particle position
	\For<<5680>>Each cell \begin<<6054>>tex2html_wrap_inline<<6054>>$c$\end<<6055>>tex2html_wrap_inline<<6055>>\space in \begin<<6056>>tex2html_wrap_inline<<6056>>$currPos$\end<<6057>>tex2html_wrap_inline<<6057>><<5680>>
		\State \begin<<6058>>tex2html_wrap_inline<<6058>>$c_<<5681>>pbestPos<<5681>> \leftarrow $\end<<6059>>tex2html_wrap_inline<<6059>>\space Same cell in \begin<<6060>>tex2html_wrap_inline<<6060>>$pbestPos$\end<<6061>>tex2html_wrap_inline<<6061>>
		\State \begin<<6062>>tex2html_wrap_inline<<6062>>$c_<<5682>>gbestPos<<5682>> \leftarrow $\end<<6063>>tex2html_wrap_inline<<6063>>\space Same cell in \begin<<6064>>tex2html_wrap_inline<<6064>>$gbestPos$\end<<6065>>tex2html_wrap_inline<<6065>>
		\State \begin<<6066>>tex2html_wrap_inline<<6066>>$movedIndices \leftarrow $\end<<6067>>tex2html_wrap_inline<<6067>>MoveIndices(\begin<<6068>>tex2html_wrap_inline<<6068>>$c_<<5683>>pbestPos<<5683>>,c,c_<<5684>>gbestPos<<5684>>$\end<<6069>>tex2html_wrap_inline<<6069>>)
		\If<<5685>>First time velocity is calculated<<5685>>
			\State ApplyVelocity(c,movedIndices)
		\Else
			\State \begin<<6070>>tex2html_wrap_inline<<6070>>$newVelocity \leftarrow CalculateIndexVelocity(currPos.velocity,movedIndices)$\end<<6071>>tex2html_wrap_inline<<6071>>
			\State ApplyVelocity(c,newVelocity)
		\EndIf
	\EndFor
	\State SanatizePosition(currPos)
\end<<5686>>algorithmic<<5686>>
\end<<5687>>algorithm<<5687>>
\begin<<6386>>tex2html_deferred<<6386>>\par\end<<6387>>tex2html_deferred<<6387>>
Velocity method 2 also differs from method 1 due to the manner in which it applies the velocity equation. Velocity method 1 applies the velocity equation in stages. Each stage is applied to the entire position, i.e. frequency plan before applying the next stage. With velocity method 2 the algorithm first enters a for-loop as in line 6. Within this for-loop the algorithm obtains the current cell, the cell stored in its previous best-held position \begin<<6072>>tex2html_wrap_inline<<6072>>$pbestPos$\end<<6073>>tex2html_wrap_inline<<6073>>\space and the same cell stored in the global best position \begin<<6074>>tex2html_wrap_inline<<6074>>$gbestPos$\end<<6075>>tex2html_wrap_inline<<6075>>.
\begin<<6388>>tex2html_deferred<<6388>>\par\end<<6389>>tex2html_deferred<<6389>>
Once all the correct cells have been obtained the algorithm calls a method named \emph<<5688>>MoveIndices<<5688>> (which is presented in algorithm~\ref<<5689>>alg:moveindices<<5689>>) to which all the cells are passed.
\begin<<5690>>algorithm<<5690>>
\begin<<6390>>tex2html_deferred<<6390>>\caption<<5691>>MoveIndices<<5691>>\end<<6391>>tex2html_deferred<<6391>>
\label<<5692>>alg:moveindices<<5692>>
\begin<<5693>>algorithmic<<5693>>[1]
	\Require pbestCell
	\Require currCell
	\Require gbestCell
	\For<<5694>>Each \begin<<6076>>tex2html_wrap_inline<<6076>>$trx_i$\end<<6077>>tex2html_wrap_inline<<6077>>\space in currCell<<5694>>
		\State \begin<<6078>>tex2html_wrap_inline<<6078>>$pbestTRX_i$\end<<6079>>tex2html_wrap_inline<<6079>>\space = Get \begin<<6080>>tex2html_wrap_inline<<6080>>$trx_i$\end<<6081>>tex2html_wrap_inline<<6081>>\space in pbestCell
		\State \begin<<6082>>tex2html_wrap_inline<<6082>>$gbestTRX_i$\end<<6083>>tex2html_wrap_inline<<6083>>\space = Get \begin<<6084>>tex2html_wrap_inline<<6084>>$trx_i$\end<<6085>>tex2html_wrap_inline<<6085>>\space in gbestCell
		\State \begin<<6086>>tex2html_wrap_inline<<6086>>$r1 \leftarrow$\end<<6087>>tex2html_wrap_inline<<6087>>\space Random double number
		\State \begin<<6088>>tex2html_wrap_inline<<6088>>$r2 \leftarrow$\end<<6089>>tex2html_wrap_inline<<6089>>\space Random double number
		\State \begin<<6090>>tex2html_wrap_inline<<6090>>$localCoeff \leftarrow getLocalCoefficient()$\end<<6091>>tex2html_wrap_inline<<6091>>
		\State \begin<<6092>>tex2html_wrap_inline<<6092>>$globalCoeff \leftarrow getGlobalCoefficient()$\end<<6093>>tex2html_wrap_inline<<6093>>
		\State \begin<<6094>>tex2html_wrap_inline<<6094>>$a \leftarrow localCoef * r1 * (pbestTRX_i - trx_i)$\end<<6095>>tex2html_wrap_inline<<6095>>
		\State \begin<<6096>>tex2html_wrap_inline<<6096>>$b \leftarrow globalCoef * r2 * (pbestTRX_i - gbestTRX_i)$\end<<6097>>tex2html_wrap_inline<<6097>>
		\State \begin<<6098>>tex2html_wrap_inline<<6098>>$trx_i \leftarrow a + b$\end<<6099>>tex2html_wrap_inline<<6099>>
	\EndFor
\end<<5695>>algorithmic<<5695>>
\end<<5696>>algorithm<<5696>>
\begin<<6392>>tex2html_deferred<<6392>>\par\end<<6393>>tex2html_deferred<<6393>>
In the MoveIndices algorithm three cells are passed to it. The current cell of the velocity algorithm that is being moved, as is the same cell that is stored in the previous best-held position of the particle and also the same cell in the global best position. The algorithm starts off by iterating through all the transceivers installed at the current cell as can be seen in line 1 of algorithm~\ref<<5697>>alg:moveindices<<5697>>. In lines 2 -- 3 the algorithm obtains the frequency values from the \emph<<5698>>pbestCell<<5698>> and \emph<<5699>>gbestCell<<5699>>.
\begin<<6394>>tex2html_deferred<<6394>>\par\end<<6395>>tex2html_deferred<<6395>>
After the MoveIndices algorithm has obtained the frequency values it is ready to apply the velocity equation. As can be seen in lines 8 -- 10 the algorithm applies the standard velocity equation~\ref<<5700>>eq:velocityupdate<<5700>> formulated in chapter~\ref<<5701>>chpt:swarm<<5701>>. 
\begin<<6396>>tex2html_deferred<<6396>>\par\end<<6397>>tex2html_deferred<<6397>>
Once the MoveIndices algorithm has completef, the currCell variable now stores the calculated velocity. Algorithm~\ref<<5702>>alg:velocitymethod2<<5702>> uses the return calculated velocity to update the cell position of the current particle. The algorithm accomplishes this by first determining whether the particle has had a previously calculated velocity. If it is the first time the velocity has been calculated, the algorithm simply applies the velocity by using algorithm~\ref<<5703>>alg:applyvelocity<<5703>>. 
\begin<<6398>>tex2html_deferred<<6398>>\par\end<<6399>>tex2html_deferred<<6399>>
\begin<<5704>>algorithm<<5704>>
\begin<<6400>>tex2html_deferred<<6400>>\caption<<5705>>ApplyVelocity<<5705>>\end<<6401>>tex2html_deferred<<6401>>
\label<<5706>>alg:applyvelocity<<5706>>
\begin<<5707>>algorithmic<<5707>>[1]
	\Require currPos
	\Require velocity
	\For<<5708>>Each index \begin<<6100>>tex2html_wrap_inline<<6100>>$c_i$\end<<6101>>tex2html_wrap_inline<<6101>>\space in currPos<<5708>>
		\State \begin<<6102>>tex2html_wrap_inline<<6102>>$c_i \leftarrow c_i + velocity_i$\end<<6103>>tex2html_wrap_inline<<6103>>
	\EndFor
\end<<5709>>algorithmic<<5709>>
\end<<5710>>algorithm<<5710>>
\begin<<6402>>tex2html_deferred<<6402>>\par\end<<6403>>tex2html_deferred<<6403>>
If the particle does have a current velocity, the algorithm first executes algorithm~\ref<<5711>>alg:calcindexvelocity<<5711>> as can be observed to occur in line 11 of algorithm~\ref<<5712>>alg:velocitymethod2<<5712>> before applying the calculated velocity with algorithm~\ref<<5713>>alg:applyvelocity<<5713>>. Velocity method 2 first executes algorithm~\ref<<5714>>alg:calcindexvelocity<<5714>> to apply the concept of inertia\begin<<6404>>tex2html_deferred<<6404>>\footnote<<5882>>Inertia is discussed in chapter~\ref<<5715>>chpt:swarm<<5715>> in the subsection entitled ``Inertia Weight'' of section~\ref<<5716>>sec:psocharacteristics<<5716>>.<<5882>>\end<<6405>>tex2html_deferred<<6405>>.
\begin<<6406>>tex2html_deferred<<6406>>\par\end<<6407>>tex2html_deferred<<6407>>
\begin<<5717>>algorithm<<5717>>
\begin<<6408>>tex2html_deferred<<6408>>\caption<<5718>>CalculateIndexVelocity<<5718>>\end<<6409>>tex2html_deferred<<6409>>
\label<<5719>>alg:calcindexvelocity<<5719>>
\begin<<5720>>algorithmic<<5720>>[1]
	\Require currVelocity
	\Require newVelocity
	\For<<5721>>Each value \begin<<6104>>tex2html_wrap_inline<<6104>>$v_i$\end<<6105>>tex2html_wrap_inline<<6105>>\space in currVelocity<<5721>>
		\State \begin<<6106>>tex2html_wrap_inline<<6106>>$inertia \leftarrow getInertia()$\end<<6107>>tex2html_wrap_inline<<6107>>
		\State \begin<<6108>>tex2html_wrap_inline<<6108>>$v_i \leftarrow v_i + (inertia * newVelocity_i)$\end<<6109>>tex2html_wrap_inline<<6109>>
	\EndFor
\end<<5722>>algorithmic<<5722>>
\end<<5723>>algorithm<<5723>>
\begin<<6410>>tex2html_deferred<<6410>>\par\end<<6411>>tex2html_deferred<<6411>>
As can be observed in algorithm~\ref<<5724>>alg:calcindexvelocity<<5724>> the CalculateIndexVelocity method loops the current velocity. Within the loop the algorithm retrieves the inertia value that needs to be applied, after which the inertia value is multiplied by the newVelocity value.
\begin<<6412>>tex2html_deferred<<6412>>\par\end<<6413>>tex2html_deferred<<6413>>
After the CalculateIndexVelocity algorithm has finished executing, the concept of inertia has been applied to the velocity. Velocity method 2 therefore applies the velocity using the ApplyVelocity method listed in algorithm~\ref<<5725>>alg:applyvelocity<<5725>> to the current cell found in the particle position to move it in order to obtain a new position.
\begin<<6414>>tex2html_deferred<<6414>>\par\end<<6415>>tex2html_deferred<<6415>>
The observant reader might have noticed that in all the presented and associated velocity algorithms the procedures operate and store the result in the current particle position that is currently being worked on. Naturally one might think that this overwrites the position information currently in that position. In the developed \gls<<5726>>PSO<<5726>> algorithm when velocity is calculated the respective velocity methods operate on clones of the original position. The original position is only used once the velocity has been calculated and the particle has actually moved.
\begin<<6416>>tex2html_deferred<<6416>>\par\end<<6417>>tex2html_deferred<<6417>>
Another important note, is that if one analyses velocity method 1, the switch to using index values instead of raw frequencies does not affect the method's operation. Since the method only requires explicit knowledge on the data to operate on in the BoundValue algorithm, the algorithm is still able to calculate velocity. 
\begin<<6418>>tex2html_deferred<<6418>>\par\end<<6419>>tex2html_deferred<<6419>>
It is up to the algorithm designer to update the bound value method to use the array index bounds rather than the raw lower and upper bounds of the frequencies. The BoundValue algorithm needs to be updated since it is the primary means by which velocity method 1 ensures valid positions.
\begin<<6420>>tex2html_deferred<<6420>>\par\end<<6421>>tex2html_deferred<<6421>>
Both the velocity methods that are utilised by the developed \gls<<5727>>FAP<<5727>> \gls<<5728>>PSO<<5728>> algorithm have now been explained with corresponding pseudocode. Why the developed \gls<<5729>>PSO<<5729>> was modified to operate on frequency index values rather than frequency values was also explained. All the algorithms that enable the main algorithm to accomplish particle movement with indices were also discussed. The \gls<<5730>>PSO<<5730>> is hence able to move the particles in the \gls<<5731>>FAP<<5731>> using two different methods, but for a particle to be moved it needs a personal best and most importantly, a global best to move towards. The next section deals with on how the developed \gls<<5732>>PSO<<5732>> algorithm differs from the standard \gls<<5733>>PSO<<5733>> with regard to selecting a global best.
\section<<5734>>Building a Global Best<<5734>>
\label<<5735>>sec:buildglobalbest<<5735>>
Selection of the global best particle by the swarm is a very important procedure. After the swarm has determined which particle has achieved the best position, the swarm enters the velocity function phase. 
\begin<<6422>>tex2html_deferred<<6422>>\par\end<<6423>>tex2html_deferred<<6423>>
As discussed previously each particle position is then modified to move in the general direction of the global best and personal best position. Therefore the global best acts as a beacon for the rest of the swarm in the solution space to indicate where good solutions seem to be for the rest of the swarm.
\begin<<6424>>tex2html_deferred<<6424>>\par\end<<6425>>tex2html_deferred<<6425>>
\begin<<5736>>algorithm<<5736>>
\begin<<6426>>tex2html_deferred<<6426>>\caption<<5883>>Standard Gbest Selection in \gls<<5737>>FAP<<5737>> \gls<<5738>>PSO<<5738>> <<5883>>\end<<6427>>tex2html_deferred<<6427>>
\label<<5739>>alg:psogbestselection<<5739>>
\begin<<5740>>algorithmic<<5740>>[1]
\Require swarm
\Require gbest
\State \begin<<6110>>tex2html_wrap_inline<<6110>>$gbestCost$\end<<6111>>tex2html_wrap_inline<<6111>>\space = Evaluate(gbest)
\For<<5741>>Each particle \begin<<6112>>tex2html_wrap_inline<<6112>>$p_i$\end<<6113>>tex2html_wrap_inline<<6113>>\space in swarm<<5741>>
	\State \begin<<6114>>tex2html_wrap_inline<<6114>>$cost$\end<<6115>>tex2html_wrap_inline<<6115>>\space = Evaluate(\begin<<6116>>tex2html_wrap_inline<<6116>>$p_i$\end<<6117>>tex2html_wrap_inline<<6117>>)
	\If<<5742>>\begin<<6118>>tex2html_wrap_inline<<6118>>$cost \leq gbestCost$\end<<6119>>tex2html_wrap_inline<<6119>><<5742>>
		\State \begin<<6120>>tex2html_wrap_inline<<6120>>$gbestCost = cost$\end<<6121>>tex2html_wrap_inline<<6121>>
		\State gbest = \begin<<6122>>tex2html_wrap_inline<<6122>>$p_i$\end<<6123>>tex2html_wrap_inline<<6123>>
	\EndIf
\EndFor
\Return gbest
\end<<5743>>algorithmic<<5743>>
\end<<5744>>algorithm<<5744>>
\begin<<6428>>tex2html_deferred<<6428>>\par\end<<6429>>tex2html_deferred<<6429>>
Initially the \gls<<5745>>FAP<<5745>> \gls<<5746>>PSO<<5746>> algorithm used the standard method for selecting the global best particle from the swarm and did not differ at all from the traditional global \gls<<5747>>PSO<<5747>> algorithm. The standard global best selection is listed in algorithm~\ref<<5748>>alg:psogbestselection<<5748>>. 
\begin<<6430>>tex2html_deferred<<6430>>\par\end<<6431>>tex2html_deferred<<6431>>
As can be observed in lines 2 -- 8 the \gls<<5749>>FAP<<5749>> \gls<<5750>>PSO<<5750>> algorithm loops through all the particles in the swarm and applies the fitness function to evaluate the fitness of the particle's position. The fitness value is also referred to as the cost. In the \gls<<5751>>FAP<<5751>> \gls<<5752>>PSO<<5752>> the cost or fitness value of a particle position is the amount of interference the frequency plan that represents the particles position generates.
\begin<<6432>>tex2html_deferred<<6432>>\par\end<<6433>>tex2html_deferred<<6433>>
A low cost value is preferred to a high cost value, since a low cost value indicates low interference. In lines 4 -- 6 of algorithm~\ref<<5753>>alg:psogbestselection<<5753>> the \gls<<5754>>FAP<<5754>> \gls<<5755>>PSO<<5755>> algorithm determines whether the current particle position has a lower cost value than the current global best particle position.
\begin<<6434>>tex2html_deferred<<6434>>\par\end<<6435>>tex2html_deferred<<6435>>
If the current particle position evaluates to a lower cost value than the stored global best, the algorithm replaces the current global best with the current particle being evaluated, which in the algorithm is \begin<<6124>>tex2html_wrap_inline<<6124>>$p_i$\end<<6125>>tex2html_wrap_inline<<6125>>.
\begin<<6436>>tex2html_deferred<<6436>>\par\end<<6437>>tex2html_deferred<<6437>>
Selecting the global best by evaluating the position as a whole seems to be a natural fit. As outlined in the critical evaluation of each algorithm in chapters~\ref<<5756>>chpt:heuristic<<5756>> and \ref<<5757>>chpt:swarm<<5757>>, some of the algorithms had a problem with regard to some cells or even transceivers overshadowing better cells or transceivers.
\begin<<6438>>tex2html_deferred<<6438>>\par\end<<6439>>tex2html_deferred<<6439>>
For this dissertation, overshadowing is a term that describes a scenario where a bad value of one part of the frequency plan is so large that it causes other smaller values within the frequency plan not to be considered. 
\begin<<6440>>tex2html_deferred<<6440>>\par\end<<6441>>tex2html_deferred<<6441>>
As per the following example a few cells in a frequency plan might have the worst possible frequencies assigned to their respective transceivers, and other might have the best. Now the few cells with the worst frequencies generate a great deal of interference, whereas the cells with the best frequencies generate almost nothing.
\begin<<6442>>tex2html_deferred<<6442>>\par\end<<6443>>tex2html_deferred<<6443>>
When the example frequency plan is evaluated, the bad cells push up the cost value. The high cost value of the frequency plan causes the \gls<<5758>>PSO<<5758>> algorithm to disregard the whole plan. By discarding the whole plan the \gls<<5759>>FAP<<5759>> \gls<<5760>>PSO<<5760>> algorithm loses the knowledge gained on the few cells that had their best frequencies assigned to their respective transceivers.
\begin<<6444>>tex2html_deferred<<6444>>\par\end<<6445>>tex2html_deferred<<6445>>
In the traditional method of selecting the global best, a particle is actually selected as the swarm best because it contains fewer overshadowing cells or transceivers, and potentially good frequency assignments are lost.
\begin<<6446>>tex2html_deferred<<6446>>\par\end<<6447>>tex2html_deferred<<6447>>
The \gls<<5761>>FAP<<5761>> \gls<<5762>>PSO<<5762>> therefore needed to exploit the knowledge that the fitness function exposes much more thoroughly. The information exposed by the fitness function allows one to see what effects certain frequency assignments have on the interference of the cell when assigned to the individual transceivers. To make better use of this fitness information two methods were developed for the \gls<<5763>>FAP<<5763>> \gls<<5764>>PSO<<5764>> , each one being finer grained than the other.
\begin<<6448>>tex2html_deferred<<6448>>\par\end<<6449>>tex2html_deferred<<6449>>
\begin<<5765>>enumerate<<5765>>
\item Besides the particle storing its fitness or cost, the particle also needed to store the interference generated by an entire cell due to the frequencies allocated to its installed transceivers.
\item Besides the particle storing the total fitness, it also needed to store the interference generated by a frequency allocated to a particular transceiver of a cell.
\end<<5766>>enumerate<<5766>>
\begin<<6450>>tex2html_deferred<<6450>>\par\end<<6451>>tex2html_deferred<<6451>>
With both these methods, the global best selection scheme needs to be changed to allow the swarm to take advantage of this newly exposed information. As discussed, initially the \gls<<5767>>FAP<<5767>> \gls<<5768>>PSO<<5768>> used the standard global best selection scheme listed in algorithm~\ref<<5769>>alg:psogbestselection<<5769>>, but now with these new methods, a global best position is no longer selected, but built.
\begin<<6452>>tex2html_deferred<<6452>>\par\end<<6453>>tex2html_deferred<<6453>>
Before the \gls<<5770>>FAP<<5770>> \gls<<5771>>PSO<<5771>> is able to build a global best, the way a particle stores its evaluated fitness needs to change. For the standard global selection scheme, the particle only needs to store one fitness value that is a result of evaluating the whole frequency plan. To be able to build a global best as described above, the fitness value cannot simply be one lump sum representing interference. Instead in the \gls<<5772>>FAP<<5772>> \gls<<5773>>PSO<<5773>> algorithm the interference generated by every transceiver is stored.
\begin<<6454>>tex2html_deferred<<6454>>\par\end<<6455>>tex2html_deferred<<6455>>
The \gls<<5774>>FAP<<5774>> \gls<<5775>>PSO<<5775>> is able to know the performance of every single frequency allocated to a particular transceiver and also compare the allocation with other similar transceivers in other frequency plans.
\begin<<6456>>tex2html_deferred<<6456>>\par\end<<6457>>tex2html_deferred<<6457>>
Each global best scheme developed for the \gls<<5776>>FAP<<5776>> \gls<<5777>>PSO<<5777>> is more finely grained than the other with regard to what the scheme uses to build a gbest. Algorithm~\ref<<5778>>alg:gbestcells<<5778>> uses interference information of cells to build a gbest. Algorithm~\ref<<5779>>alg:gbesttrx<<5779>> uses the interference generated by each transceiver installed at a cell to build a gbest. Since each cell has transceivers, the second algorithm is therefore more finer grained than algorithm~\ref<<5780>>alg:gbestcells<<5780>>.
\begin<<6458>>tex2html_deferred<<6458>>\par\end<<6459>>tex2html_deferred<<6459>>
\begin<<5781>>algorithm<<5781>>[H]
\begin<<6460>>tex2html_deferred<<6460>>\caption<<5782>>Building Global Best with Cells<<5782>>\end<<6461>>tex2html_deferred<<6461>>
\label<<5783>>alg:gbestcells<<5783>>
\begin<<5784>>algorithmic<<5784>>[1]
\Require gbest
\Require swarm
\For<<5785>>Each particle \begin<<6126>>tex2html_wrap_inline<<6126>>$p_i$\end<<6127>>tex2html_wrap_inline<<6127>>\space in swarm<<5785>>
	\For<<5786>>Each cell \begin<<6128>>tex2html_wrap_inline<<6128>>$c_j$\end<<6129>>tex2html_wrap_inline<<6129>>\space in \begin<<6130>>tex2html_wrap_inline<<6130>>$p_i$\end<<6131>>tex2html_wrap_inline<<6131>><<5786>>
		\State \begin<<6132>>tex2html_wrap_inline<<6132>>$gbestcell_j$\end<<6133>>tex2html_wrap_inline<<6133>>\space = Get cell \begin<<6134>>tex2html_wrap_inline<<6134>>$c_j$\end<<6135>>tex2html_wrap_inline<<6135>>\space in gbest
		\State \begin<<6136>>tex2html_wrap_inline<<6136>>$cellCost$\end<<6137>>tex2html_wrap_inline<<6137>>\space = Get total interference for cell \begin<<6138>>tex2html_wrap_inline<<6138>>$c_j$\end<<6139>>tex2html_wrap_inline<<6139>>
		\State \begin<<6140>>tex2html_wrap_inline<<6140>>$gbestCellCost$\end<<6141>>tex2html_wrap_inline<<6141>>\space = Get total interference for cell \begin<<6142>>tex2html_wrap_inline<<6142>>$gbestcell_j$\end<<6143>>tex2html_wrap_inline<<6143>>
		\If<<5787>>\begin<<6144>>tex2html_wrap_inline<<6144>>$cellCost \leq gbestCellCost$\end<<6145>>tex2html_wrap_inline<<6145>><<5787>>
			\State \begin<<6146>>tex2html_wrap_inline<<6146>>$gbestcell_j$\end<<6147>>tex2html_wrap_inline<<6147>>\space = \begin<<6148>>tex2html_wrap_inline<<6148>>$c_j$\end<<6149>>tex2html_wrap_inline<<6149>>
		\EndIf
	\EndFor
\EndFor
\end<<5788>>algorithmic<<5788>>
\end<<5789>>algorithm<<5789>>
\begin<<6462>>tex2html_deferred<<6462>>\par\end<<6463>>tex2html_deferred<<6463>>
\begin<<5790>>algorithm<<5790>>[H]
\begin<<6464>>tex2html_deferred<<6464>>\caption<<5791>>Building Global Best with Transceivers<<5791>>\end<<6465>>tex2html_deferred<<6465>>
\label<<5792>>alg:gbesttrx<<5792>>
\begin<<5793>>algorithmic<<5793>>[1]
\Require gbest
\Require swarm
\For<<5794>>Each particle \begin<<6150>>tex2html_wrap_inline<<6150>>$p_i$\end<<6151>>tex2html_wrap_inline<<6151>>\space in swarm<<5794>>
	\For<<5795>>Each cell \begin<<6152>>tex2html_wrap_inline<<6152>>$c_j$\end<<6153>>tex2html_wrap_inline<<6153>>\space in \begin<<6154>>tex2html_wrap_inline<<6154>>$p_i$\end<<6155>>tex2html_wrap_inline<<6155>><<5795>>
		\For<<5796>>Each transceiver \begin<<6156>>tex2html_wrap_inline<<6156>>$trx_k$\end<<6157>>tex2html_wrap_inline<<6157>>\space in \begin<<6158>>tex2html_wrap_inline<<6158>>$c_j$\end<<6159>>tex2html_wrap_inline<<6159>><<5796>>
			\State \begin<<6160>>tex2html_wrap_inline<<6160>>$gbestTrx_k$\end<<6161>>tex2html_wrap_inline<<6161>>\space = Get \begin<<6162>>tex2html_wrap_inline<<6162>>$trx_k$\end<<6163>>tex2html_wrap_inline<<6163>>\space in \begin<<6164>>tex2html_wrap_inline<<6164>>$c_j$\end<<6165>>tex2html_wrap_inline<<6165>>\space in gbest
			\State \begin<<6166>>tex2html_wrap_inline<<6166>>$trxCost$\end<<6167>>tex2html_wrap_inline<<6167>>\space = Get total interference for \begin<<6168>>tex2html_wrap_inline<<6168>>$trx_k$\end<<6169>>tex2html_wrap_inline<<6169>>
			\State \begin<<6170>>tex2html_wrap_inline<<6170>>$gbestTrxCost$\end<<6171>>tex2html_wrap_inline<<6171>>\space = Get total interference for cell \begin<<6172>>tex2html_wrap_inline<<6172>>$gbestTrx_j$\end<<6173>>tex2html_wrap_inline<<6173>>
			\If<<5797>>\begin<<6174>>tex2html_wrap_inline<<6174>>$trxCost \leq gbestTrxCost$\end<<6175>>tex2html_wrap_inline<<6175>><<5797>>
				\State \begin<<6176>>tex2html_wrap_inline<<6176>>$gbestTrx_k$\end<<6177>>tex2html_wrap_inline<<6177>>\space = \begin<<6178>>tex2html_wrap_inline<<6178>>$trx_k$\end<<6179>>tex2html_wrap_inline<<6179>>
			\EndIf
		\EndFor
	\EndFor
\EndFor
\end<<5798>>algorithmic<<5798>>
\end<<5799>>algorithm<<5799>>
Each algorithm will now be discussed since the difference between them is subtle. Algorithm~\ref<<5800>>alg:gbestcells<<5800>> was the first global best building scheme which was developed and is discussed first. The algorithm starts off in line 1 by iterating through all the particles in the swarm. For each particle the algorithm enters another loop as can be observed in line 2 of algorithm~\ref<<5801>>alg:gbestcells<<5801>>.
\begin<<6466>>tex2html_deferred<<6466>>\par\end<<6467>>tex2html_deferred<<6467>>
The second loop of the algorithm iterates through all the cells in the frequency plan that represent a position of the particle. Once the algorithm has obtained a cell it looks for the same cell in the gbest frequency plan. Since the algorithm now has the current cell and the gbest cell it is able to compare the two cells based on the interference their respective transceivers generate.
\begin<<6468>>tex2html_deferred<<6468>>\par\end<<6469>>tex2html_deferred<<6469>>
The interference generated by the cell is retrieved and then compared as can be observed to occur in line 6. If the current cell has a lower interference (cost) value than the same cell in the global best plan, then the algorithm replaces the cell in the global best with the current cell.
\begin<<6470>>tex2html_deferred<<6470>>\par\end<<6471>>tex2html_deferred<<6471>>
The second algorithm is the finer grained algorithm and was developed because, after analysing the algorithm using cells, it was concluded that it is possible that a single bad frequency allocation to a transceiver within a cell can overshadow other potentially good frequency allocations to other cells within the cell.
\begin<<6472>>tex2html_deferred<<6472>>\par\end<<6473>>tex2html_deferred<<6473>>
Algorithms~\ref<<5802>>alg:gbestcells<<5802>> and \ref<<5803>>alg:gbesttrx<<5803>> have very similar flow, except that the second algorithm has an extra for-loop. In line 3 of algorithm~\ref<<5804>>alg:gbesttrx<<5804>> a third for-loop is started, which iterates through all the transceivers a particular cell \begin<<6180>>tex2html_wrap_inline<<6180>>$c_j$\end<<6181>>tex2html_wrap_inline<<6181>>\space has installed. The algorithm then obtains the frequency allocated to the same transceiver in the global best frequency plan.
\begin<<6474>>tex2html_deferred<<6474>>\par\end<<6475>>tex2html_deferred<<6475>>
Once both transceivers have been obtained, the algorithm determines the interference (cost) their respective frequency allocations generated. Using the cost values the algorithm determines whether the current transceiver frequency allocation generates less interference than the frequency allocated to the same transceiver in the global best frequency plan.
\begin<<6476>>tex2html_deferred<<6476>>\par\end<<6477>>tex2html_deferred<<6477>>
If the current transceiver frequency generates less interference, the algorithm then proceeds to replace the transceiver frequency in the global best with the current transceiver frequency. Thus it can be seen that algorithm~\ref<<5805>>alg:gbesttrx<<5805>> utilises individual transceivers to build a global best.
\begin<<6478>>tex2html_deferred<<6478>>\par\end<<6479>>tex2html_deferred<<6479>>
Initially when the \gls<<5806>>FAP<<5806>> \gls<<5807>>PSO<<5807>> algorithm was tested using both of these global best schemes, the \gls<<5808>>PSO<<5808>> did not produce noticeably better results. This was due to the algorithm at each iteration discarding the interference or cost information calculated in that iteration and making it zero. Making the cost values zero does initially seem correct, but effectively what is happening is that the algorithm is discarding knowledge gained by that iteration.
\begin<<6480>>tex2html_deferred<<6480>>\par\end<<6481>>tex2html_deferred<<6481>>
To enable this information to direct the swarm a bit more, the \gls<<5809>>FAP<<5809>> \gls<<5810>>PSO<<5810>> algorithm was modified to not reset the interference values for every transceiver and cell to 0. Instead, the interference values for an iteration are now added to the previous iteration interference values stored by the cell and transceiver. 
\begin<<6482>>tex2html_deferred<<6482>>\par\end<<6483>>tex2html_deferred<<6483>>
By letting interference values compound after each iteration the \gls<<5811>>PSO<<5811>> becomes much more aggressive. This is because as the interference compounds bad decisions made by the swarm for a particular particle become progressively worse as the swarm progresses through more iterations.
\begin<<6484>>tex2html_deferred<<6484>>\par\end<<6485>>tex2html_deferred<<6485>>
With compounding interference values the \gls<<5812>>FAP<<5812>> \gls<<5813>>PSO<<5813>> was able to produce much better positions and had lower total interference (cost) than all previously generated positions by previous \gls<<5814>>FAP<<5814>> \gls<<5815>>PSO<<5815>> algorithms. 
\begin<<6486>>tex2html_deferred<<6486>>\par\end<<6487>>tex2html_deferred<<6487>>
The \gls<<5816>>FAP<<5816>> \gls<<5817>>PSO<<5817>> algorithm is able to produce better results by allowing particles to keep a history of their previous movements. This is covered in the next section.
\section<<5818>>Keeping History<<5818>>
\label<<5819>>sec:keepinghistory<<5819>>
In the traditional \gls<<5820>>PSO<<5820>> history is kept by using the particle personal best position to direct the next movement of the particle. Other methods such as inertia also allow history to direct the movement of the particle. With regard to the developed \gls<<5821>>PSO<<5821>> on the \gls<<5822>>FAP<<5822>>, the algorithm also uses these concepts. But these concepts are not able to effectively exploit the history of a particle since they have no concept of what combinations of frequency values have previously been used in a cell.
\begin<<6488>>tex2html_deferred<<6488>>\par\end<<6489>>tex2html_deferred<<6489>>
In the \gls<<5823>>FAP<<5823>> \gls<<5824>>PSO<<5824>> algorithm more historical information is kept. The algorithm accomplishes this by incorporating the concept of tabu lists from the \gls<<5825>>TS<<5825>> algorithm. Using tabu lists a particle will be able to better exploit the problem space it currently finds itself in. In the \gls<<5826>>FAP<<5826>> \gls<<5827>>PSO<<5827>> algorithm, tabu lists were incorporated by adding to each cell a list which keeps track of each frequency value that has been assigned to the transceivers in the cell for 20 iterations.
\begin<<6490>>tex2html_deferred<<6490>>\par\end<<6491>>tex2html_deferred<<6491>>
Initially the \gls<<5828>>FAP<<5828>> \gls<<5829>>PSO<<5829>> algorithm calculated the velocity of a particle and then applied this to the current position of the particle. This moved the particle to its next position in the problem space. With tabu lists this movement step becomes more complicated.
\begin<<6492>>tex2html_deferred<<6492>>\par\end<<6493>>tex2html_deferred<<6493>>
Tabu lists are there to prevent cycling of movements to the same position. Thus to stop the particle from moving to a position that was previously occupied, an extra check has to occur before the particle can occupy a new position. As can be seen in the two developed velocity methods in algorithms~\ref<<5830>>alg:velocitymethod1<<5830>> and \ref<<5831>>alg:velocitymethod2<<5831>> the last step that occurs in both algorithms is that the SanitizePosition method is called.
\begin<<6494>>tex2html_deferred<<6494>>\par\end<<6495>>tex2html_deferred<<6495>>
The SanitizePosition method is listed in algorithm~\ref<<5832>>alg:sanitizeposition<<5832>>. Within this algorithm a particle's future position is first checked and sanitised before the particle is allowed to move to that position. The main purpose of this algorithm is to check if the future position has been occupied previously and hence is in the tabu list.
\begin<<5833>>algorithm<<5833>>[H]
\begin<<6496>>tex2html_deferred<<6496>>\caption<<5834>>SanitizePosition<<5834>>\end<<6497>>tex2html_deferred<<6497>>
\label<<5835>>alg:sanitizeposition<<5835>>
\begin<<5836>>algorithmic<<5836>>[1]
	\Require currPosition
	\For<<5837>>Each cell \begin<<6182>>tex2html_wrap_inline<<6182>>$c_i$\end<<6183>>tex2html_wrap_inline<<6183>>\space in currPosition<<5837>>
		\State \begin<<6184>>tex2html_wrap_inline<<6184>>$tbList = $\end<<6185>>tex2html_wrap_inline<<6185>>\space Get Tabu List of currPosition
		\State ResolveCollision(\begin<<6186>>tex2html_wrap_inline<<6186>>$c_i$\end<<6187>>tex2html_wrap_inline<<6187>>,\begin<<6188>>tex2html_wrap_inline<<6188>>$tbList$\end<<6189>>tex2html_wrap_inline<<6189>>)
		\State AdhereToSeparation(\begin<<6190>>tex2html_wrap_inline<<6190>>$c_i$\end<<6191>>tex2html_wrap_inline<<6191>>)
	\EndFor
\end<<5838>>algorithmic<<5838>>
\end<<5839>>algorithm<<5839>>
\begin<<6498>>tex2html_deferred<<6498>>\par\end<<6499>>tex2html_deferred<<6499>>
In the \gls<<5840>>FAP<<5840>> \gls<<5841>>PSO<<5841>> the tabu list check works slightly differently from what one would expect. As can be observed in algorithm~\ref<<5842>>alg:sanitizeposition<<5842>>, it enters a loop which iterates through all the cells in the position of the particle. Note that the position passed to the SanitizePosition algorithm is a \emph<<5843>>future<<5843>> position; thus the particle does not yet occupy the position yet. Within the for-loop in line 2 the method \emph<<5844>>ResolveCollision<<5844>> is called which is listed in algorithm~\ref<<5845>>alg:resolvecollision<<5845>>.
\begin<<6500>>tex2html_deferred<<6500>>\par\end<<6501>>tex2html_deferred<<6501>>
\begin<<5846>>algorithm<<5846>>[H]
\begin<<6502>>tex2html_deferred<<6502>>\caption<<5847>>ResolveCollision<<5847>>\end<<6503>>tex2html_deferred<<6503>>
\label<<5848>>alg:resolvecollision<<5848>>
\begin<<5849>>algorithmic<<5849>>[1]
	\Require cell
	\Require tabuList
	\For<<5850>>Each \begin<<6192>>tex2html_wrap_inline<<6192>>$trx_i$\end<<6193>>tex2html_wrap_inline<<6193>>\space in cell<<5850>>
			\While<<5851>>\begin<<6194>>tex2html_wrap_inline<<6194>>$trx_i$\end<<6195>>tex2html_wrap_inline<<6195>>\space exists in TabuList<<5851>>
				\State \begin<<6196>>tex2html_wrap_inline<<6196>>$trx_i = $\end<<6197>>tex2html_wrap_inline<<6197>>\space Generate random frequency
				\If<<5852>>Collision not resolved after 20 attempts<<5852>>
					\State Break out of while loop
				\EndIf
			\EndWhile
	\EndFor
\end<<5853>>algorithmic<<5853>>
\end<<5854>>algorithm<<5854>>
\begin<<6504>>tex2html_deferred<<6504>>\par\end<<6505>>tex2html_deferred<<6505>>
As can be observed in algorithm~\ref<<5855>>alg:resolvecollision<<5855>>, when a frequency value is found to exist in the tabu list a collision is said to occur. In the \gls<<5856>>FAP<<5856>> \gls<<5857>>PSO<<5857>> a collision means that the specific frequency value that has been assigned to a transceiver for a particular cell was found in the tabu list. Once a collision occurs, the algorithm tries to generate a new random frequency that can be assigned to the transceiver as can be seen to occur within the while-loop in lines 2 -- 3.
\begin<<6506>>tex2html_deferred<<6506>>\par\end<<6507>>tex2html_deferred<<6507>>
The algorithm generates a new random frequency value and then checks to see if the generated value collides with the tabu list. If collision still occurs, the algorithm will generate another random frequency. As long as a collision occurs the algorithm will continually generate a new random frequency until it has attempted 20 random frequencies with no frequency colliding. 
\begin<<6508>>tex2html_deferred<<6508>>\par\end<<6509>>tex2html_deferred<<6509>>
After 20 attempts the algorithm just accepts the last generated frequency as the new frequency. The maximum number of 20  attempts was selected through testing and can be increased at the expense of more computational time. 
\begin<<6510>>tex2html_deferred<<6510>>\par\end<<6511>>tex2html_deferred<<6511>>
The resolution of collisions can be seen as a mechanism to increase the exploration of the \gls<<5858>>PSO<<5858>> algorithm as well as to increase the diversity. By making certain frequency assignments to transceivers tabu the algorithm is forced to try new frequency assignments and thus explore more of the problem space.
\begin<<6512>>tex2html_deferred<<6512>>\par\end<<6513>>tex2html_deferred<<6513>>
Care must be taken to select a maximum size of the tabu List since one wants to keep enough history so that the problem space can be adequately exploited. The maximum tabu List size must be less than the number of available frequencies otherwise the algorithm will not be allowed to make any assignments. 
\begin<<6514>>tex2html_deferred<<6514>>\par\end<<6515>>tex2html_deferred<<6515>>
Finally the maximum tabu List cannot be too large, since the checks the algorithm has to do to see if a value is tabu are very expensive. The operation is expensive, since the tabu list needs to be iterated through for each potential value to see if the frequency value is tabu.
\begin<<6516>>tex2html_deferred<<6516>>\par\end<<6517>>tex2html_deferred<<6517>>
By incorporating tabu lists and the collision resolving procedure, the efficiency of the algorithm reduces dramatically. To increase efficiency of the operations in the algorithm, the \gls<<5859>>FAP<<5859>> \gls<<5860>>PSO<<5860>> algorithm utilises parallelisation. Since the collision resolving procedure is very expensive it was one of the first operations to be parallelised. Other procedures that were also parallelised to increase efficiency were the velocity and any other procedures which involved constraint checks.
\begin<<6518>>tex2html_deferred<<6518>>\par\end<<6519>>tex2html_deferred<<6519>>
By parallelising these operations the efficiency of the algorithm increased and it was able to produce results significantly faster. This is because parallelisation is a good fit to the now standard multicore CPUs in desktop computers.
\begin<<6520>>tex2html_deferred<<6520>>\par\end<<6521>>tex2html_deferred<<6521>>
With the parallelisation of the procedures a slight side effect was noticed. The randomness of the random number generator decreased. This effect was noticed because during testing the counter variable of the collision resolver was displayed on the console. When the value was being displayed on the console the \gls<<5861>>FAP<<5861>> \gls<<5862>>PSO<<5862>> algorithm produced much better results. 
\begin<<6522>>tex2html_deferred<<6522>>\par\end<<6523>>tex2html_deferred<<6523>>
The reason for this is that outputting the variable inherently introduces a delay and therefore the random number generators in other threads have different seed values. Hence with a delay in each parallel thread the numbers generated by the random number generator are more distinct. 
\begin<<6524>>tex2html_deferred<<6524>>\par\end<<6525>>tex2html_deferred<<6525>>
Due to how parallel threads are scheduled by the operating system, some threads might start off with similar seed values because in  the \gls<<5863>>FAP<<5863>> \gls<<5864>>PSO<<5864>> algorithm the current time is used as a seed value\begin<<6526>>tex2html_deferred<<6526>>\footnote<<5865>>This is the default behaviour of the .Net 4.0 random number generator<<5865>>\end<<6527>>tex2html_deferred<<6527>>.
\begin<<6528>>tex2html_deferred<<6528>>\par\end<<6529>>tex2html_deferred<<6529>>
Keeping the delay counter variable displayed on the console introduced a delay in the collision resolving procedure. The reason the particular procedure was selected was that it was where the effect of delay was first noticed. After performing tests with delays of 5 milliseconds (ms), 10 ms, 15 and 20 it was found that 20 ms was the best-suited delay, as it gave just enough time for a reasonable distinction to be made between seed values used by other parallel threads.
\begin<<6530>>tex2html_deferred<<6530>>\par\end<<6531>>tex2html_deferred<<6531>>
In this section a discussion was presented on how the \gls<<5866>>FAP<<5866>> \gls<<5867>>PSO<<5867>> keeps additional history. The reason why the \gls<<5868>>FAP<<5868>> \gls<<5869>>PSO<<5869>> needs to keep more history was discussed as well as what mechanism the algorithm uses to store this information, namely tabu lists. Also covered was how the algorithm deals with collisions, which occurs when positions are in the tabu list. Finally collision resolution was explained with the aid of pseudocode of the algorithm that is utilised.
\begin<<6532>>tex2html_deferred<<6532>>\par\end<<6533>>tex2html_deferred<<6533>>
\section<<5870>>Summary<<5870>>
In this chapter an algorithm was presented based on the standard particle swarm optimisation algorithm to operate on the frequency assignment problem encountered in cellular networks.
\begin<<6534>>tex2html_deferred<<6534>>\par\end<<6535>>tex2html_deferred<<6535>>
At the beginning of the chapter it was explained how a frequency plan is represented by the algorithm for use internally. Reasons were given for choosing the particular representation in the algorithm.
\begin<<6536>>tex2html_deferred<<6536>>\par\end<<6537>>tex2html_deferred<<6537>>
One of the most important phases of the \gls<<5871>>PSO<<5871>> algorithm is velocity calculation. The problem was outlined as to why the standard velocity calculation was unsuitable for the \gls<<5872>>FAP<<5872>>. The customised velocity calculation used by the algorithm developed in this research was presented along with suitable pseudocode.
\begin<<6538>>tex2html_deferred<<6538>>\par\end<<6539>>tex2html_deferred<<6539>>
The chapter concluded with small additions made to the algorithm to improve performance and, most important of all, improve solution quality.
<tex2html_endfile>#./chpt7.tex#
