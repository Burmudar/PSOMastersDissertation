<tex2html_file>#./chpt5.tex#
\chapter[Swarm Intelligence]<<3692>>Metaheuristic Algorithms: Swarm Intelligence<<3692>>
\label<<3693>>chpt:swarm<<3693>>
\section<<3694>>Introduction<<3694>>
The research field of artificial intelligence stands a lot to gain by the study of the inner workings of nature itself; this is why there is a branch of artificial intelligence that incorporates some of nature's processes, like evolution, which can be seen being applied in practice in the \gls<<3695>>GA<<3695>> (see section \ref<<3696>>sec:geneticalgorithm<<3696>>).
\begin<<5040>>tex2html_deferred<<5040>>\par\end<<5041>>tex2html_deferred<<5041>>
There are other approaches in artificial intelligence which also have their routes in nature, for instance animal learning or the study of how dogs learn\cite<<3697>>DLearning<<3697>>. These approaches only look at a “single agent” thought process when agent percepts (senses) are mapped to actions in an agents particular environment \cite<<3698>>DLearning<<3698>>. 
\begin<<5042>>tex2html_deferred<<5042>>\par\end<<5043>>tex2html_deferred<<5043>>
A percept can be said to be a process that is specifically designed to take data from the surrounding environment, process it and present it as information upon which decisions can be made\cite<<3699>>DLearning,AIModernApproach<<3699>>. For instance, eyes are percepts, which take visual data presented by the environment\cite<<3700>>DLearning,AIModernApproach<<3700>>. The visual data is processed by the brain into information to enable decisions to be made on navigating the environment\cite<<3701>>DLearning,AIModernApproach<<3701>>.
\begin<<5044>>tex2html_deferred<<5044>>\par\end<<5045>>tex2html_deferred<<5045>>
The research field of swarm intelligence is an approach more concerned with the underlying processes and behaviour patterns when multiple agents (insects, animals) come together and perform a task as one collective entity\cite<<3702>>DLearning,AIModernApproach<<3702>>.  The study of animals and insects and how they socially interact within their local environments in groups has already contributed to artificial intelligence as a whole in the form of Swarm Intelligence\cite<<3703>>ChaoticSwarmIntel,BeeJobShop<<3703>>.  In the field of Swarm Intelligence, animals and insects are represented by agents which are simple stimulus-response agents and can only perceive changes in their local environments. A group of agents is referred to as a \emph<<3704>>swarm<<3704>>.
\begin<<5046>>tex2html_deferred<<5046>>\par\end<<5047>>tex2html_deferred<<5047>>
Swarm intelligence works on a key aspect observed in nature, the notion of emergent behaviour\cite<<3705>>SwarmArt,FundamentalSwarm<<3705>>. Emergent behaviour is when an individual in the swarm achieves success due to the it obtaining more knowledge through exploration about its local environment\cite<<3706>>SwarmArt,FundamentalSwarm<<3706>>.
\begin<<5048>>tex2html_deferred<<5048>>\par\end<<5049>>tex2html_deferred<<5049>>
In swarm intelligence, when an agent exhibits emergent behaviour, the outcome of the behaviour needs to be shared with the whole swarm in order for the swarm to adapt and use the newly gained knowledge\cite<<3707>>CompuIntelligenceIntro,FundamentalSwarm<<3707>>.
\begin<<5050>>tex2html_deferred<<5050>>\par\end<<5051>>tex2html_deferred<<5051>>
In a swarm, the agents communicate with each other about knowledge gained as a consequence of the changes in their local environments\cite<<3708>>SwarmArt,ChaoticSwarmIntel<<3708>>. Changes can be caused by emergent behaviour by the agent itself, other agents or the environment\cite<<3709>>CompuIntelligenceIntro,FundamentalSwarm<<3709>>. Communication among agents facilitates \emph<<3710>>knowledge sharing<<3710>>\cite<<3711>>SwarmArt,FundamentalSwarm<<3711>>. 
\begin<<5052>>tex2html_deferred<<5052>>\par\end<<5053>>tex2html_deferred<<5053>>
Social interaction among agents is certainly not the only means of interacting, but with regard to biological inspired systems it is the most prominent\cite<<3712>>CompuIntelligenceIntro<<3712>>.
\begin<<5054>>tex2html_deferred<<5054>>\par\end<<5055>>tex2html_deferred<<5055>>
Using this social interaction between the agents of the swarm can influence their own local environment to move towards more promosing space in the search space \cite<<3713>>ChaoticSwarmIntel,CompuIntelligenceIntro<<3713>>. Thus each agents of a swarm contributes to the swarm as a whole to locate and produce better solutions \cite<<3714>>BeeJobShop<<3714>>. Due to the social interaction between agents the swarm is also referred to as a \emph<<3715>>social swarm<<3715>>\cite<<3716>>ChaoticSwarmIntel,FundamentalSwarm<<3716>> 
\begin<<5056>>tex2html_deferred<<5056>>\par\end<<5057>>tex2html_deferred<<5057>>
As discussed the behaviour propagates from one agent to another through social interaction, which brings forth information exchange\cite<<3717>>SwarmArt<<3717>>. Social interaction is but one component of self-organisation. Other components that form part of self-organisation are \cite<<3718>>SIPowerInNums<<3718>>:
\begin<<3719>>itemize<<3719>>
\item Positive and negative feedback\cite<<3720>>SIPowerInNums<<3720>>
\item Increased fluctuations of random events\cite<<3721>>SIPowerInNums<<3721>>
\end<<3722>>itemize<<3722>>
\begin<<5058>>tex2html_deferred<<5058>>\par\end<<5059>>tex2html_deferred<<5059>>
The means by which agents facilitate indirect communication with each other is known as \emph<<3723>>stigmergy<<3723>>. Stimergy as well as the different forms of stigmergy are discussed in ~\ref<<3724>>sec:stigmergy<<3724>>.
\begin<<5060>>tex2html_deferred<<5060>>\par\end<<5061>>tex2html_deferred<<5061>>
Swarm intelligence algorithms are also meta-heuristic algorithms, with the distinction being made that swarm intelligence algorithms use multiple agents as a collective entity of knowledge to search the problem space\cite<<3725>>SwarmArt,ChaoticSwarmIntel,BeeJobShop,CompuIntelligenceIntro,FundamentalSwarm<<3725>>.
\begin<<5062>>tex2html_deferred<<5062>>\par\end<<5063>>tex2html_deferred<<5063>>
The initial algorithms developed with regard to swarm intelligence, were based on the coordination and behaviour exhibited by schools of fish and flocks of birds. The newer generation of algorithms include\cite<<3726>>SwarmArt,ChaoticSwarmIntel,BeeJobShop<<3726>>:
\begin<<3727>>itemize<<3727>>
\item \gls<<3728>>ACO<<3728>>\cite<<3729>>SwarmArt<<3729>>.
\item \gls<<3730>>ABC<<3730>>\cite<<3731>>BeeJobShop<<3731>>.
\item \gls<<3732>>PSO<<3732>>\cite<<3733>>ChaoticSwarmIntel<<3733>>. 
\item bacterial foraging optimisation\cite<<3734>>CompuIntelligenceIntro<<3734>>.
\item Firefly optimisation\cite<<3735>>CompuIntelligenceIntro<<3735>>.
\item Fish school optimisation\cite<<3736>>CompuIntelligenceIntro<<3736>>.
\end<<3737>>itemize<<3737>>
\begin<<5064>>tex2html_deferred<<5064>>\par\end<<5065>>tex2html_deferred<<5065>>
Swarm intelligence based algorithms are able to achieve good results since they have simple individuals searching in their own local environments for more optimal solutions\cite<<3738>>CompuIntelligenceIntro,FundamentalSwarm<<3738>>. A direct consequence of multiple individuals in a swarm searching is that the algorithms are able to explore multple locations within the defined search space\cite<<3739>>CompuIntelligenceIntro,FundamentalSwarm<<3739>>. Traditional single agent based metaheuristic algorithms like \gls<<3740>>TS<<3740>> (section~\ref<<3741>>sec:tabusearch<<3741>>) and \gls<<3742>>SA<<3742>> (section~\ref<<3743>>sec:simulatedannealing<<3743>>) only have in essence one ``individual'' searching for a solution\cite<<3744>>CompuIntelligenceIntro,FundamentalSwarm<<3744>>. 
\begin<<5066>>tex2html_deferred<<5066>>\par\end<<5067>>tex2html_deferred<<5067>>
With algorithms like \gls<<3745>>TS<<3745>> and \gls<<3746>>SA<<3746>>, the information is not shared since there is only one individual search\cite<<3747>>CompuIntelligenceIntro,FundamentalSwarm,SASingleMultiObj,TSHazardous<<3747>>. The information is kept to influence future decisions\cite<<3748>>AIModernApproach,TabuMontemanniSmith,TabuVechicleRoutingWithTimeWindows,CurveFittingSA,EcoEquilSA<<3748>>. Swarm intelligence algorithms also store information for use by the various individuals that make up the swarm to make more informed decisions as the search space is explored\cite<<3749>>CompuIntelligenceIntro,FundamentalSwarm<<3749>>.
\begin<<5068>>tex2html_deferred<<5068>>\par\end<<5069>>tex2html_deferred<<5069>>
NP-Complete optimisation problems are but one of the fields where swarm intelligence algorithms have been adapted to. Other fields where swarm intelligence has been applied include neural network training\cite<<3750>>CompuIntelligenceIntro<<3750>>, vehicle routing\cite<<3751>>ACOSurvey<<3751>>, clustering\cite<<3752>>AntSwarmClustering<<3752>>, search engines and electrical power systems\cite<<3753>>SAElectricPower<<3753>>. Swarm intelligence thus seems more suited towards problems with combinatorial complexity\cite<<3754>>SIOPDenby<<3754>>.
\begin<<5070>>tex2html_deferred<<5070>>\par\end<<5071>>tex2html_deferred<<5071>>
The chapter is organised as follows. Before the algorithms are discussed an overview of stigmergy is presented in section~\ref<<3755>>sec:stigmergy<<3755>>. Starting with section~\ref<<3756>>sec:ACO<<3756>> the first swarm intelligence algorithm is discussed namely, Ant Colony Optimisation. Artificial bee colony is discussed in section~\ref<<3757>>sec:BEE<<3757>>. Section~\ref<<3758>>sec:PSO<<3758>> is a discussion about the Particle Swarm Optimisation algorithm. This chapter concludes with section~\ref<<3759>>sec:SISummary<<3759>> that summurises the chapter.
\begin<<5072>>tex2html_deferred<<5072>>\par\end<<5073>>tex2html_deferred<<5073>>
\section<<3760>>Stigmergy<<3760>>
\label<<3761>>sec:stigmergy<<3761>>
Stigmergy is defined as the method used by animals and insects to facilitate indirect communication\cite<<3762>>CompuIntelligenceIntro,AntIntroTrends<<3762>>. Through the use of stimergy animals or insects are able to socially interact with their own species to convey information to each other\cite<<3763>>AntsAndStigmergy,FundamentalSwarm<<3763>>.
\begin<<5074>>tex2html_deferred<<5074>>\par\end<<5075>>tex2html_deferred<<5075>>
Interaction occurs through signals that the individuals receive which might require them to perform a specific action\cite<<3764>>AntsAndStigmergy,CompuIntelligenceIntro,AntIntroTrends<<3764>>.
\begin<<5076>>tex2html_deferred<<5076>>\par\end<<5077>>tex2html_deferred<<5077>>
Two forms of stigmergy can be observed in nature. One form, \emph<<3765>>sematectonic stigmergy<<3765>>\label<<3766>>def:sematectonic<<3766>>, is a direct and physical form of interaction since it relies on altering the environment\cite<<3767>>CompuIntelligenceIntro<<3767>>. 
\begin<<5078>>tex2html_deferred<<5078>>\par\end<<5079>>tex2html_deferred<<5079>>
Examples of this type of stigmergy are nest building and brood sorting by ants\cite<<3768>>CompuIntelligenceIntro<<3768>>. Schools of fish also use this type of stigmergy to communicate direction and speed by visually observing their closest partner in the school. Besides using visual information, birds use sound to communicate with and alert each other\cite<<3769>>SwarmArt<<3769>>.
\begin<<5080>>tex2html_deferred<<5080>>\par\end<<5081>>tex2html_deferred<<5081>>
The other form, \emph<<3770>>sign-based stigmergy<<3770>>, is an indirect form of interaction, where communication occurs through some sort of signal mechanism\cite<<3771>>CompuIntelligenceIntro<<3771>>. Ants use sign-based stigmergy to communicate with each other. More on how ants communicate with this type of stigmergy is discussed in section~\ref<<3772>>sec:ACOverview<<3772>>.
\begin<<5082>>tex2html_deferred<<5082>>\par\end<<5083>>tex2html_deferred<<5083>>
Other species that use sign-based stigmergy are bees\cite<<3773>>stigmergicoptimization<<3773>>. When a bee determines that an entity poses a threat to the hive, it might decide to sting the entity. The sting of a bee not only injects a toxin into the entity, but also releases a pheromone\cite<<3774>>stigmergicoptimization<<3774>>. This pheromone alerts nearby other bees from the hive of the presence of an entity that is a potential danger to the hive\cite<<3775>>stigmergicoptimization<<3775>>. 
\begin<<5084>>tex2html_deferred<<5084>>\par\end<<5085>>tex2html_deferred<<5085>>
The other bees of the hive pick up this pheromone that is released by the initial bee's stinger and attack the entity by also stinging it\cite<<3776>>stigmergicoptimization<<3776>>. As more bees sting the entity, more bee stingers emit the danger pheromone identifying the entity\cite<<3777>>stigmergicoptimization<<3777>>. Hence the pheromone is reinforced and becomes stronger, which persuades more bees into action\cite<<3778>>stigmergicoptimization<<3778>>.
\begin<<5086>>tex2html_deferred<<5086>>\par\end<<5087>>tex2html_deferred<<5087>>
Stigmergy is a powerful mechanism that is able to alter the behaviour of a collective entity efficiently, as can be gathered from the above-mentioned examples of stigmergy in nature\cite<<3779>>AntsAndStigmergy,CompuIntelligenceIntro,AntIntroTrends<<3779>>. Stigmergy is therefore a core concept upon which swarm intelligence algorithms are based as these communication techniques are exploited to aid the algorithm in finding better solutions\cite<<3780>>AntsAndStigmergy,CompuIntelligenceIntro,AntIntroTrends<<3780>>.
\begin<<5088>>tex2html_deferred<<5088>>\par\end<<5089>>tex2html_deferred<<5089>>
In the forthcoming sections three swarm intelligence algorithms are discussed. Each section is divided into four subsections. 
\begin<<5090>>tex2html_deferred<<5090>>\par\end<<5091>>tex2html_deferred<<5091>>
First, an overview of the algorithm is given, where basic concepts about the algorithm are introduced as well as a general outline given of the search process the algorithm uses. 
The second subsection will give an in-depth discussion of some of the core characteristics that make the algorithm unique. 
The third subsection will provide a step-by-step discussion of the algorithm using pseudocode as a reference.
\begin<<5092>>tex2html_deferred<<5092>>\par\end<<5093>>tex2html_deferred<<5093>>
Finally, for each algorithm studies using the algorithm on the \gls<<3781>>FAP<<3781>> are mentioned and the various considerations that need to be made to apply the algorithm to the \gls<<3782>>FAP<<3782>> are identified.
\begin<<5094>>tex2html_deferred<<5094>>\par\end<<5095>>tex2html_deferred<<5095>>
\section<<3783>>Ant Colony Optimisation (ACO)<<3783>>
\label<<3784>>sec:ACO<<3784>>
\subsection<<3785>>Introduction<<3785>>
\label<<3786>>sec:ACOverview<<3786>>
ACO is a class of algorithms incorporating different behavioural aspects that ants exhibit when they perform certain activities, i.e. gather food, build nests and construct cemeteries\cite<<3787>>AntsAndStigmergy,CompuIntelligenceIntro<<3787>>. The first \gls<<3788>>ACO<<3788>> algorithms that were developed were based on the foraging behaviour that was exhibited by ants when finding the most optimal path towards a food source. Deneubourg noticed the foraging behaviour when he performed the bridge experiment \cite<<3789>>AntsAndStigmergy,CompuIntelligenceIntro<<3789>>.
\begin<<5096>>tex2html_deferred<<5096>>\par\end<<5097>>tex2html_deferred<<5097>>
The bridge experiment outlined by Deneubourg placed a food source a certain distance away from the nest\cite<<3790>>AntsAndStigmergy,CompuIntelligenceIntro<<3790>>. Two bridges of equal length were established towards the food resource. The ants initially selected a path randomly with no clear distinction of the more dominant path to take to retrieve food from the food source\cite<<3791>>AntsAndStigmergy,CompuIntelligenceIntro<<3791>>. After a finite amount of time, one of the paths to the food source became the preferred route for the ants even though both paths were of equal length. The preference of the one bridge by the ants is.
\begin<<5098>>tex2html_deferred<<5098>>\par\end<<5099>>tex2html_deferred<<5099>>
Deneubourg concluded that ants utilise pheromones to communicate to the rest of the foraging ants the shortest path towards a food source.\cite<<3792>>FundamentalSwarm<<3792>> By using pheromones to communicate with other ants it can be concluded that ants use sign-based stigmergy (discussed in section~\ref<<3793>>sec:stigmergy<<3793>>) when they retrieve food\cite<<3794>>AntIntroTrends,AntsAndStigmergy,CompuIntelligenceIntro<<3794>>. As the ant moves along a particular path, it marks the path with a chemical signal that alerts other ants to the desirability of the path \cite<<3795>>CompuIntelligenceIntro<<3795>>. The chemical signal that ants use to indicate optimal paths is called \emph<<3796>>pheromones<<3796>>\cite<<3797>>AntsAndStigmergy,CompuIntelligenceIntro<<3797>>.
\begin<<5100>>tex2html_deferred<<5100>>\par\end<<5101>>tex2html_deferred<<5101>>
The bridge experiment was extended to have two bridges that differ in length. The extended bridge experiment is presented in figure~\ref<<3798>>fig:antBridgeExperiment<<3798>> and is known as the shortest path bridge experiement\cite<<3799>>FundamentalSwarm<<3799>>. In the experiment the ants started to prefer the shortest bridge \cite<<3800>>FundamentalSwarm<<3800>>. The conclusion was made that the ants prefered the shorter bridge because ants return to the nest quicker and therefore the path is reinforced with pheromones faster than on the longer path\cite<<3801>>FundamentalSwarm<<3801>>.
\begin<<5102>>tex2html_deferred<<5102>>\par\end<<5103>>tex2html_deferred<<5103>>
\begin<<3802>>figure<<3802>>[H]
	\begin<<5104>>tex2html_deferred<<5104>>\centering\end<<5105>>tex2html_deferred<<5105>>
	\begin<<5106>>tex2html_nowrap<<5106>>
\setlength\end<<5107>>tex2html_nowrap<<5107>> \fboxsep<<3803>>0pt<<3803>>
	\begin<<5108>>tex2html_nowrap<<5108>>
\setlength\end<<5109>>tex2html_nowrap<<5109>> \fboxrule<<3804>>0.5pt<<3804>>
	\begin<<5110>>tex2html_wrap_inline<<5110>>\fbox<<4643>>\includegraphics[width=4.0in,height=2.0in]<<3805>>./pictures/antBridgeExperiment.png<<3805>><<4643>>\end<<5111>>tex2html_wrap_inline<<5111>>
	\begin<<5112>>tex2html_deferred<<5112>>\caption<<4644>>The shortest path bridge experiment \cite<<3806>>AntsAndStigmergy<<3806>><<4644>>\end<<5113>>tex2html_deferred<<5113>>
	\label<<3807>>fig:antBridgeExperiment<<3807>>
\end<<3808>>figure<<3808>>
\begin<<5114>>tex2html_deferred<<5114>>\par\end<<5115>>tex2html_deferred<<5115>>
Pheromones used by the ants in \gls<<3809>>ACO<<3809>> go through two phases. The first phase is where pheromones a despoited on a particular path by an ant whether their exists previous pheromones or not. The second phase is where pheromones evapurate. Pheromones are not permenant and deteriorate over time\cite<<3810>>FundamentalSwarm<<3810>>. By letting pheromones evapurate, ants can ``forget'' previous desicions made by die colony\cite<<3811>>FundamentalSwarm<<3811>>. It can be concluded that the more pheromones evapurate the less influence the ants will have on their path selection, therefore promoting exploration\cite<<3812>>FundamentalSwarm<<3812>>.
\begin<<5116>>tex2html_deferred<<5116>>\par\end<<5117>>tex2html_deferred<<5117>>
The concept of pheromones and how the \gls<<3813>>ACO<<3813>> proceeds in updating the pheromones is a critical concept of \gls<<3814>>ACO<<3814>>. Hence, an in-depth discussion on pheromones is provided in subsection \ref<<3815>>sec:ACOcharacter<<3815>>.
\begin<<5118>>tex2html_deferred<<5118>>\par\end<<5119>>tex2html_deferred<<5119>>
The \gls<<3816>>ACO<<3816>> class of algorithms have a \emph<<3817>>core requirement<<3817>> about the problem they are applied to\cite<<3818>>FundamentalSwarm<<3818>>. The problem must be able to be modelled as a graph. The reason behind this requirement is that each individial ant in the \gls<<3819>>ACO<<3819>> algorithm constructs a path through the graph\cite<<3820>>FundamentalSwarm<<3820>>. The path constructed represents a solution.
\begin<<5120>>tex2html_deferred<<5120>>\par\end<<5121>>tex2html_deferred<<5121>>
A path through a graph is made up of a series of links between nodes\cite<<3821>>AIModernApproach,DataStructuresJava<<3821>>. A link between two nodes represents a movement from one node to the other\cite<<3822>>AIModernApproach,DataStructuresJava<<3822>>. Therefore, a path can be considered as the traversal of the interlinked nodes, from a starting node to some final node\cite<<3823>>AIModernApproach,DataStructuresJava<<3823>>. A path differs from another path by the order in which the nodes are interlinked between a start and end node\cite<<3824>>AIModernApproach,DataStructuresJava<<3824>>.
\begin<<5122>>tex2html_deferred<<5122>>\par\end<<5123>>tex2html_deferred<<5123>>
The \gls<<3825>>ACO<<3825>> class of algorithms has been applied to a wide range of problems that include single machine scheduling\cite<<3826>>ACOSingleMachine<<3826>>,weapon target assignment\cite<<3827>>WeaponTargetACO<<3827>>, flow shop scheduling\cite<<3828>>ACOFlowShop<<3828>> and image thresholding\cite<<3829>>ACOImageThreshold<<3829>>. Variants of the standard algorithm have been developed, but all of the algorithms still follow the core structure of the \gls<<3830>>ACO<<3830>> algorithm\cite<<3831>>CompuIntelligenceIntro,FundamentalSwarm<<3831>>.
The first algorithm developed based on the foraging behaviour of ants is known as the \gls<<3832>>SACO<<3832>> and was proposed by Dorigo in 1992 \cite<<3833>>CompuIntelligenceIntro<<3833>>. The algorithm provided the basis for how pheromones are used and updated. The \gls<<3834>>SACO<<3834>> is an algorithmic implementation of the double bridge experiment.
\begin<<5124>>tex2html_deferred<<5124>>\par\end<<5125>>tex2html_deferred<<5125>>
The first algorithm to improve upon the \gls<<3835>>SACO<<3835>> is the \gls<<3836>>AS<<3836>> \cite<<3837>>CompuIntelligenceIntro,AntIntroTrends<<3837>>. The \gls<<3838>>AS<<3838>> included heuristic information into the probability that an ants chooses to move towards a node. The \gls<<3839>>AS<<3839>> also added memory to the \gls<<3840>>AS<<3840>> by using a tabu list and also incorporated pheromone evapuration. The improvements made enabled the \gls<<3841>>AS<<3841>> to better explore the search space and produce better results\cite<<3842>>CompuIntelligenceIntro,AntIntroTrends<<3842>>. 
\begin<<5126>>tex2html_deferred<<5126>>\par\end<<5127>>tex2html_deferred<<5127>>
The \gls<<3843>>AS<<3843>> algorithm has achieved relatively good success in the problems it has been applied to, but it does have some disadvantages\cite<<3844>>ImpACOComplex,ACOSurvey<<3844>>. One of the primary disadvantages of \gls<<3845>>AS<<3845>> is that it tends to prematuve converge on local optima \cite<<3846>>FundamentalSwarm,ImpACOComplex<<3846>>. The premature convergence can be attributed to due to the ants exploiting the high concentration of pheromones on good solution paths too quickly\cite<<3847>>FundamentalSwarm<<3847>>. With the ants focusing only on the good solutions less exploration occurs in the search space leading to local optima being produced as the best solution\cite<<3848>>FundamentalSwarm<<3848>>.
\begin<<5128>>tex2html_deferred<<5128>>\par\end<<5129>>tex2html_deferred<<5129>>
Subsequently, various algorithms have been developed that improve on the \gls<<3849>>AS<<3849>> algorithm. These improved algorithms include the \gls<<3850>>ACS<<3850>>, \gls<<3851>>MMAS<<3851>>, Ant-Q, fast ant system, AntTabu, \gls<<3852>>AS<<3852>>-rank and i\gls<<3853>>ANTS<<3853>>\cite<<3854>>CompuIntelligenceIntro,AntIntroTrends<<3854>>. The discussion in this section is focused on providing an introduction to the general \gls<<3855>>ACO<<3855>> algorithm concepts and not to discuss various improvements made by variants of the core algorithm. In the forth coming sections reference is made to these algorithms and their respective improvements.
\begin<<5130>>tex2html_deferred<<5130>>\par\end<<5131>>tex2html_deferred<<5131>>
The \gls<<3856>>AS<<3856>> algorithm is the base algorithm upon which all other \gls<<3857>>ACO<<3857>> class algorithms are based upon. Therefore in the forth coming sections when a reference is made to the \gls<<3858>>ACO<<3858>> algorithm, it is directed at the base \gls<<3859>>AS<<3859>> algorithm.
\begin<<5132>>tex2html_deferred<<5132>>\par\end<<5133>>tex2html_deferred<<5133>>
In this section the concepts  upon which the core of \gls<<3860>>ACO<<3860>> is based upon were briefly introduced. In the next section a discussion is given on each of the concepts.
\subsection<<3861>>ACO Characteristics<<3861>>
\label<<3862>>sec:ACOcharacter<<3862>>
In this section characteristics that are important and unique to the \gls<<3863>>ACO<<3863>> class of algorithms is discussed. The discussion is focused upon three core characteristics namely pheromone trials, pheromone evaporation, pheromone updates and state transition rules.
\subsubsection<<3864>>Pheromone Trail<<3864>>
\label<<3865>>sec:pheromonetrail<<3865>>
The pheromone technique used by ants forms part of the core methodology used by the \gls<<3866>>ACO<<3866>> algorithm \cite<<3867>>AntQAP<<3867>>. As an ant moves it lays down pheromones to mark the path it is walking.
\begin<<5134>>tex2html_deferred<<5134>>\par\end<<5135>>tex2html_deferred<<5135>>
With the use of pheromones ants are able to communicate the best and shortest link between nodes\cite<<3868>>AntQAP,AntsAndStigmergy,CompuIntelligenceIntro<<3868>>. The more ants following a preferred link the more pheromones would be deposited on that specific link. This increases the strength of the pheromones \cite<<3869>>ImpACOComplex<<3869>>. The increase in strength of the pheromones on a link would thus let ants more clearly distinguish between links they should and should not take \cite<<3870>>ImpACOComplex<<3870>>. Therefore, a pheromone provides positive feedback to the colony\cite<<3871>>AntQAP,AntsAndStigmergy,CompuIntelligenceIntro<<3871>>.
\begin<<5136>>tex2html_deferred<<5136>>\par\end<<5137>>tex2html_deferred<<5137>>
Initially, all the ants will choose a random link to a node\cite<<3872>>AntQAP,AntsAndStigmergy,CompuIntelligenceIntro<<3872>>. After all the ants have completed their paths, each path is evaluated using a cost function defined by the problem domain\cite<<3873>>CompuIntelligenceIntro<<3873>>. The amount of pheromone marking the links contained in a path in the standard \gls<<3874>>ACO<<3874>> is related to the cost function\cite<<3875>>AntQAP,AntsAndStigmergy,CompuIntelligenceIntro<<3875>>. Therefore, a low cost function value will have a high pheromone dosage and a high cost function value will have a low dosage\cite<<3876>>CompuIntelligenceIntro<<3876>>. 
\begin<<5138>>tex2html_deferred<<5138>>\par\end<<5139>>tex2html_deferred<<5139>>
By incorporating the cost of a particular path into the amount of pheromone deposited the colony is able to influcence future decisions\cite<<3877>>CompuIntelligenceIntro<<3877>>. In terms of minimisation a path with a low cost will have a high pheromone value making the links of path more likely to be selected by future ants\cite<<3878>>CompuIntelligenceIntro<<3878>>.
\begin<<5140>>tex2html_deferred<<5140>>\par\end<<5141>>tex2html_deferred<<5141>>
In the iterations following the initial one, the ants will at each node decide based on a probability whether it should to a particular neighbouring node. The higher the pheromone intensity is at a neighbouring node, the higher the probability that the ant will choose to move towards that node\cite<<3879>>AntQAP,AntsAndStigmergy,CompuIntelligenceIntro<<3879>>. The probability with which ants choose links to neighbouring nodes are defined and discussed in the next section.
\begin<<5142>>tex2html_deferred<<5142>>\par\end<<5143>>tex2html_deferred<<5143>>
Due to ants choosing links to node based on a probability, it is still possible for the ant to choose a random link towards an other node. Thus the \gls<<3880>>ACO<<3880>> algorithms are considered stochastic search procedures due to the ants ability to choose links randomly when exploring the search space \cite<<3881>>ACOSurvey,ImpACOComplex<<3881>>.
\begin<<5144>>tex2html_deferred<<5144>>\par\end<<5145>>tex2html_deferred<<5145>>
The pheromone trail was initially developed with only one colony in mind \cite<<3882>>CompuIntelligenceIntro<<3882>>. In research done by Tiwari et al.\cite<<3883>>ACOLargeProblem<<3883>> pheromones in multiple colonies are considered. The basic principle of how pheromones are used by the ants stays the same, but the meaning of the pheromone changes if an ant of another colony encounters the pheromone trail\cite<<3884>>AntQAP,AntsAndStigmergy,CompuIntelligenceIntro<<3884>>. The ant will not follow or even consider the pheromone trail since any pheromone encountered from other colonies repulses the ant\cite<<3885>>ACOLargeProblem<<3885>>. Thus pheromones only provide positive feedback if the ant is from the same colony, otherwise the pheromone gives negative feedback, in a way warning the ant to stay away\cite<<3886>>ACOLargeProblem<<3886>>. This repulsion strategy promotes exploration among the multiple colonies\cite<<3887>>ACOLargeProblem<<3887>>. The probability with which a link towards a particular node is chosen by an ant forms part of the \emph<<3888>>state transition rules<<3888>>.
\begin<<5146>>tex2html_deferred<<5146>>\par\end<<5147>>tex2html_deferred<<5147>>
\subsubsection<<3889>>Pheromone Evaporation<<3889>>
\label<<3890>>sec:pheromoneevapuation<<3890>>
Initially when the pheromone concept was first implemented the ants of the colony rapidly converged on a solution\cite<<3891>>CompuIntelligenceIntro<<3891>>. The search space was not adequately explored and the produced solution was of local optima\cite<<3892>>AntsAndStigmergy<<3892>>. To combat this premature convergence and force the ants to explore the search space more, the concept of \emph<<3893>>pheromone evaporation<<3893>> was introduced\cite<<3894>>AntIntroTrends,AntSurvey<<3894>>. 
\begin<<5148>>tex2html_deferred<<5148>>\par\end<<5149>>tex2html_deferred<<5149>>
Real pheromones used by ants to mark a particular link to a node is not permanent and over time the strength of the pheromone deteriorates until it eventually disappears\cite<<3895>>CompuIntelligenceIntro<<3895>>. Pheromone deteriorating is known in the literature as pheromone evaporation\cite<<3896>>CompuIntelligenceIntro<<3896>>. The pheromone will not completely evaporate as long there are ants traversing the defined link reinforcing the pheromone. The evaporation of pheromones is modelled in the \gls<<3897>>ACO<<3897>> by equation \ref<<3898>>eq:pheromoneevapuration<<3898>>\cite<<3899>>AntIntroTrends,AntSurvey<<3899>>:
\begin<<3900>>equation<<3900>>
\label<<3901>>eq:pheromoneevapuration<<3901>>
	\tau_<<3902>>ij<<3902>>(t) = (1-p)\tau_<<3903>>ij<<3903>>(t), p\in [0,1]
\end<<3904>>equation<<3904>>
The constant \begin<<4692>>tex2html_wrap_inline<<4692>>$p$\end<<4693>>tex2html_wrap_inline<<4693>>\space defines the rate at which the pheromone evaporates. If \begin<<4694>>tex2html_wrap_inline<<4694>>$p=1$\end<<4695>>tex2html_wrap_inline<<4695>>\space the pheromone completely evaporates every iteration. With no pheromone on a link towards a node the ants take no knowledge gained from the previous iteration into account and therefore select a link randomly \cite<<3905>>CompuIntelligenceIntro,AntsAndStigmergy<<3905>>. Thus, the amount of exploration done by the algorithm can be controlled by the constant \begin<<4696>>tex2html_wrap_inline<<4696>>$p$\end<<4697>>tex2html_wrap_inline<<4697>>\space \cite<<3906>>CompuIntelligenceIntro,AntsAndStigmergy<<3906>>.
\begin<<5150>>tex2html_deferred<<5150>>\par\end<<5151>>tex2html_deferred<<5151>>
Equation \ref<<3907>>eq:pheromoneevapuration<<3907>> was first introduced in the \gls<<3908>>AS<<3908>> \cite<<3909>>CompuIntelligenceIntro,AntSurvey<<3909>>. Most subsequent algorithms that are a form of the \gls<<3910>>ACO<<3910>> class of algorithms also use the concept of pheromone evaporation, but they either use the standard equation or develop their own variant \cite<<3911>>CompuIntelligenceIntro,AntsAndStigmergy<<3911>>.
\begin<<5152>>tex2html_deferred<<5152>>\par\end<<5153>>tex2html_deferred<<5153>>
A more aggressive form of pheromone evaporation  is added to the \gls<<3912>>AS<<3912>> discussed in the research done by Gambardella et. al\cite<<3913>>AntQAP<<3913>>. The more aggressive form works beside the already present pheromone evaporation, but this form seeks to add an additional search phase called \emph<<3914>>diversification<<3914>>\cite<<3915>>AntQAP<<3915>>. The aim of the diversification phase is to lead the algorithm into another direction of the search space\cite<<3916>>AntQAP<<3916>>. This is done in an attempt to avoid local minima and stagnation\cite<<3917>>AntQAP<<3917>>.
\begin<<5154>>tex2html_deferred<<5154>>\par\end<<5155>>tex2html_deferred<<5155>>
In the ant system developed by Gambardella et. al. the algorithm continually monitors the current best solution and keeps a history of recent best solutions\cite<<3918>>AntQAP<<3918>>. If the algorithm starts to notice that solutions are cycling or that the current best solution has not changed for a certain number of iterations, the algorithm activates the diversification phase\cite<<3919>>AntQAP<<3919>>. In this phase the algorithm is forced to re-search the search space to create new solutions, as it cannot rely on previous historical information provided by the pheromone trails\cite<<3920>>AntQAP<<3920>>.
\begin<<5156>>tex2html_deferred<<5156>>\par\end<<5157>>tex2html_deferred<<5157>>
\subsubsection<<3921>>State Transition Rules<<3921>>
\label<<3922>>sec:STR<<3922>>
The intention for this section is not to give an exhaustive survey of different transition rules in the literature. Therefore, only the first transition rule that was developed is discussed, since most of the other rules can be considered derivatives of the first. 
\begin<<5158>>tex2html_deferred<<5158>>\par\end<<5159>>tex2html_deferred<<5159>>
As discussed previously, the ants select which link to follow towards a node based on a probability. This probability is also known as the \emph<<3923>>transition probability<<3923>> and is formulated by equation~\ref<<3924>>eq:ASprobability<<3924>>.
\begin<<3925>>equation<<3925>>
\label<<3926>>eq:ASprobability<<3926>>
p^k_<<3927>>ij<<3927>>(t) =
\begin<<3928>>cases<<3928>>
	\frac<<4645>>\tau^<<3929>>\alpha<<3929>>_<<3930>>ij<<3930>>(t)\eta^<<3931>>\beta<<3931>>_<<3932>>ij<<3932>><<4645>><<4689>>\sum_<<3933>>u \in N^k_i(t)<<3933>> <<4646>>\tau^<<3934>>\alpha<<3934>>_<<3935>>iu<<3935>>(t)\eta^<<3936>>\beta<<3936>>_<<3937>>iu<<3937>>(t)<<4646>><<4689>>, ;SPMamp;\text<<3938>>if \begin<<4698>>tex2html_wrap_inline<<4698>>$j \in N^k_i(t)$\end<<4699>>tex2html_wrap_inline<<4699>><<3938>>\\ 
	0, ;SPMamp;\text<<3939>>if \begin<<4700>>tex2html_wrap_inline<<4700>>$j \notin N^k_i(t)$\end<<4701>>tex2html_wrap_inline<<4701>><<3939>>\\ 
\end<<3940>>cases<<3940>>
\end<<3941>>equation<<3941>>
The transition probability is used by individual ants of the \gls<<3942>>AS<<3942>> algorithm \cite<<3943>>AntQAP,FundamentalSwarm<<3943>>. An ant \begin<<4702>>tex2html_wrap_inline<<4702>>$k$\end<<4703>>tex2html_wrap_inline<<4703>>\space uses this equation to decide with what probability it will move from node \begin<<4704>>tex2html_wrap_inline<<4704>>$i$\end<<4705>>tex2html_wrap_inline<<4705>>\space to node \begin<<4706>>tex2html_wrap_inline<<4706>>$j$\end<<4707>>tex2html_wrap_inline<<4707>>\space \cite<<3944>>CompuIntelligenceIntro,ACOLargeProblem<<3944>>. \begin<<4708>>tex2html_wrap_inline<<4708>>$\tau_<<3945>>ij<<3945>>$\end<<4709>>tex2html_wrap_inline<<4709>>\space is the amount of pheromone on the link between nodes \begin<<4710>>tex2html_wrap_inline<<4710>>$i$\end<<4711>>tex2html_wrap_inline<<4711>>\space and \begin<<4712>>tex2html_wrap_inline<<4712>>$j$\end<<4713>>tex2html_wrap_inline<<4713>>\space \cite<<3946>>AntsAndStigmergy,ACOLargeProblem<<3946>>. Heuristic information is incorporated into the equation through the symbol \begin<<4714>>tex2html_wrap_inline<<4714>>$\eta_<<3947>>ij<<3947>>$\end<<4715>>tex2html_wrap_inline<<4715>>, which is the desirability of the link from node \begin<<4716>>tex2html_wrap_inline<<4716>>$i$\end<<4717>>tex2html_wrap_inline<<4717>>\space to node \begin<<4718>>tex2html_wrap_inline<<4718>>$j$\end<<4719>>tex2html_wrap_inline<<4719>>\space as evaluated by a heuristic function \cite<<3948>>AntsAndStigmergy,ACOLargeProblem<<3948>>. 
\begin<<5160>>tex2html_deferred<<5160>>\par\end<<5161>>tex2html_deferred<<5161>>
Each ant starting at a source node moves from one node to another based on the defined transition probaility until the ant reaches the final node.
\begin<<5162>>tex2html_deferred<<5162>>\par\end<<5163>>tex2html_deferred<<5163>>
Through the use of parameters \begin<<4720>>tex2html_wrap_inline<<4720>>$\alpha$\end<<4721>>tex2html_wrap_inline<<4721>>\space to represent pheromone intensity and \begin<<4722>>tex2html_wrap_inline<<4722>>$\beta$\end<<4723>>tex2html_wrap_inline<<4723>>\space to represent heuristic information the algorithm is able to achieve a good balance between exploration and exploitation when \begin<<4724>>tex2html_wrap_inline<<4724>>$\alpha=\beta$\end<<4725>>tex2html_wrap_inline<<4725>>\space \cite<<3949>>ACOLargeProblem,AntQAP<<3949>>. When \begin<<4726>>tex2html_wrap_inline<<4726>>$\alpha = 0$\end<<4727>>tex2html_wrap_inline<<4727>>\space no pheromone is taken into account; hence, any history that the algorithm has on the link between node \begin<<4728>>tex2html_wrap_inline<<4728>>$i$\end<<4729>>tex2html_wrap_inline<<4729>>\space and node \begin<<4730>>tex2html_wrap_inline<<4730>>$j$\end<<4731>>tex2html_wrap_inline<<4731>>\space is neglected and the algorithm degrades to a stochastic greedy search procedure. If \begin<<4732>>tex2html_wrap_inline<<4732>>$\beta = 0$\end<<4733>>tex2html_wrap_inline<<4733>>\space then the algorithm does not take into account the amount of desirability of the link between node \begin<<4734>>tex2html_wrap_inline<<4734>>$i$\end<<4735>>tex2html_wrap_inline<<4735>>\space and node \begin<<4736>>tex2html_wrap_inline<<4736>>$j$\end<<4737>>tex2html_wrap_inline<<4737>>\space as dictated by the problem-specific heuristic function.
\begin<<5164>>tex2html_deferred<<5164>>\par\end<<5165>>tex2html_deferred<<5165>>
The set \begin<<4738>>tex2html_wrap_inline<<4738>>$j \in N^k_i(t)$\end<<4739>>tex2html_wrap_inline<<4739>>\space contains all the valid neighbourhood moves ant \begin<<4740>>tex2html_wrap_inline<<4740>>$k$\end<<4741>>tex2html_wrap_inline<<4741>>\space is allowed to make when moving from node \begin<<4742>>tex2html_wrap_inline<<4742>>$i$\end<<4743>>tex2html_wrap_inline<<4743>>\space to node \begin<<4744>>tex2html_wrap_inline<<4744>>$j$\end<<4745>>tex2html_wrap_inline<<4745>>. A tabu list is kept by each ant to trim the set of moves already performed previously, and thus cycling is prevented.
\begin<<5166>>tex2html_deferred<<5166>>\par\end<<5167>>tex2html_deferred<<5167>>
The interested reader that requires more information about state transition rules is directed to the survey by Engelbrecht\cite<<3950>>FundamentalSwarm<<3950>>.
\subsubsection<<3951>>Pheromone Update<<3951>>
Pheromones start to evaporate over time, and so the link marked by a pheromone trail becomes less attractive to the ants. Therefore, a path that represents a good solution needs its pheromone trail to be continuously reinforced. Certian rules govern when and by how much pheromones are reinforced.
\begin<<5168>>tex2html_deferred<<5168>>\par\end<<5169>>tex2html_deferred<<5169>>
Most of the variants that have been developed differ in what pheromone update rules they employ. In the literature pheromone update rules are classified into two groups \cite<<3952>>CompuIntelligenceIntro<<3952>>. One group is called the global update rule. The other group is called the iteration-based or local update rule\cite<<3953>>CompuIntelligenceIntro<<3953>>. 
\begin<<5170>>tex2html_deferred<<5170>>\par\end<<5171>>tex2html_deferred<<5171>>
The first local pheromone update rule was first introduced in the \gls<<3954>>AS<<3954>> algorithm \cite<<3955>>CompuIntelligenceIntro,AntSurvey,AntsAndStigmergy<<3955>>. The ants would retrace their path after each iteration, depositing pheromones on each link that makes the complete path. The following equation is used to update the pheromone:
\begin<<3956>>align<<3956>>
\label<<3957>>eq:pheromonedeposit<<3957>>
 \tau_<<3958>>ij<<3958>>(t+1) ;SPMamp;= \tau_<<3959>>ij<<3959>>(t) + \Delta\tau_<<3960>>ij<<3960>>(t),\\  
 \text<<3961>>where <<3961>>\Delta\tau_<<3962>>ij<<3962>> ;SPMamp;= \sum^<<3963>>n_k<<3963>>_<<3964>>k=1<<3964>>\Delta\tau^k_<<3965>>ij<<3965>>(t) \notag
\end<<3966>>align<<3966>>
In equation~\ref<<3967>>eq:pheromonedeposit<<3967>> \begin<<4746>>tex2html_wrap_inline<<4746>>$\tau_<<3968>>ij<<3968>>(t+1)$\end<<4747>>tex2html_wrap_inline<<4747>>\space represents the amount of pheromone that will be on the link for the next time step \begin<<4748>>tex2html_wrap_inline<<4748>>$(t+1)$\end<<4749>>tex2html_wrap_inline<<4749>>. \begin<<4750>>tex2html_wrap_inline<<4750>>$\tau_<<3969>>ij<<3969>>$\end<<4751>>tex2html_wrap_inline<<4751>>\space represents the amount of pheromone currently on the link \begin<<4752>>tex2html_wrap_inline<<4752>>$(i,j)$\end<<4753>>tex2html_wrap_inline<<4753>>. \begin<<4754>>tex2html_wrap_inline<<4754>>$\Delta\tau_<<3970>>ij<<3970>>$\end<<4755>>tex2html_wrap_inline<<4755>>\space is the actual amount of pheromone that needs to be added to the current pheromone \begin<<4756>>tex2html_wrap_inline<<4756>>$\tau_<<3971>>ij<<3971>>$\end<<4757>>tex2html_wrap_inline<<4757>>.
\begin<<5172>>tex2html_deferred<<5172>>\par\end<<5173>>tex2html_deferred<<5173>>
Pheromone update rules that are in the global update group only allow the pheromone trail of the path representing the best found solution since the first iteration to be updated \cite<<3972>>CompuIntelligenceIntro<<3972>>. Thus the global rule favours intensification where the algorithm exploits the global knowledge gained by the ants to find a better solution. By updating a pheromone the concentration of the particular pheromone is reinforced.
\begin<<5174>>tex2html_deferred<<5174>>\par\end<<5175>>tex2html_deferred<<5175>>
\gls<<3973>>ACS<<3973>> was the first to use both the global update rule and local update rule together\cite<<3974>>CompuIntelligenceIntro<<3974>>. By using both types of rules the algorithm is able to efficiently exploit the history provided by the pheromones\cite<<3975>>CompuIntelligenceIntro<<3975>>. The global update rule used by the \gls<<3976>>ACS<<3976>> is formulated in the following equation\cite<<3977>>CompuIntelligenceIntro<<3977>>:
\begin<<3978>>align<<3978>>
\label<<3979>>eq:pheromoneupdate<<3979>>
	\tau_<<3980>>ij<<3980>>(t + 1) ;SPMamp;= (1 - p_1)\tau_<<3981>>ij<<3981>>(t) + p_1\Delta\tau_<<3982>>ij<<3982>>(t),\\ 
	\text<<3983>>where <<3983>>\Delta\tau_<<3984>>ij<<3984>> ;SPMamp;= \notag
	\begin<<3985>>cases<<3985>>
		\frac<<3986>>1<<3986>><<3987>>f(x^+(t))<<3987>> ;SPMamp;\text<<3988>>if \begin<<4758>>tex2html_wrap_inline<<4758>>$(i,j) \in x+(t)$\end<<4759>>tex2html_wrap_inline<<4759>><<3988>>\\ 
		0 ;SPMamp;\text<<3989>>otherwise<<3989>>
	\end<<3990>>cases<<3990>>
\end<<3991>>align<<3991>>
The parameter \begin<<4760>>tex2html_wrap_inline<<4760>>$f(x^+(t))$\end<<4761>>tex2html_wrap_inline<<4761>>\space represents the best/shortest path found so far by the algorithm\cite<<3992>>CompuIntelligenceIntro<<3992>>. \begin<<4762>>tex2html_wrap_inline<<4762>>$p_1$\end<<4763>>tex2html_wrap_inline<<4763>>\space is the variable that controls the rate of evaporation. \begin<<4764>>tex2html_wrap_inline<<4764>>$\Delta\tau_<<3993>>ij<<3993>>(t)$\end<<4765>>tex2html_wrap_inline<<4765>>\space is the amount of pheromone at the current time step \begin<<4766>>tex2html_wrap_inline<<4766>>$t$\end<<4767>>tex2html_wrap_inline<<4767>>\space for the link \begin<<4768>>tex2html_wrap_inline<<4768>>$ij$\end<<4769>>tex2html_wrap_inline<<4769>>.
\begin<<5176>>tex2html_deferred<<5176>>\par\end<<5177>>tex2html_deferred<<5177>>
By using the global update rule the algorithm is able to direct the search more, which is to say the algorithm exploits the search space more. Exploitation is achieved since the best path is continually used in the update of the pheromone as can be observed in equation~\ref<<3994>>eq:pheromoneupdate<<3994>>\cite<<3995>>CompuIntelligenceIntro,FundamentalSwarm<<3995>>.
\begin<<5178>>tex2html_deferred<<5178>>\par\end<<5179>>tex2html_deferred<<5179>>
As can been seen in the following equation, the \gls<<3996>>ACS<<3996>> uses a slight variant of the local update rule first used in \gls<<3997>>AS<<3997>>\cite<<3998>>CompuIntelligenceIntro<<3998>>:
\begin<<3999>>equation<<3999>>
	\tau_<<4000>>ij<<4000>>(t) = (1 - p_2)\tau_<<4001>>ij<<4001>> + p_2\tau_0
\end<<4002>>equation<<4002>>
In the above equation \begin<<4770>>tex2html_wrap_inline<<4770>>$\tau_0$\end<<4771>>tex2html_wrap_inline<<4771>>\space is a small constant and \begin<<4772>>tex2html_wrap_inline<<4772>>$p_2 \in [0,1]$\end<<4773>>tex2html_wrap_inline<<4773>>\space is the constant that defines the rate of evaporation\cite<<4003>>CompuIntelligenceIntro<<4003>>. With the local update rule, the algorithm is able to explore more. The path constructed by the individual ant is used to update the pheromone and no information from the best path found in the colony is incorporated, as with equation~\ref<<4004>>eq:pheromoneupdate<<4004>>\cite<<4005>>CompuIntelligenceIntro,FundamentalSwarm<<4005>>.
\begin<<5180>>tex2html_deferred<<5180>>\par\end<<5181>>tex2html_deferred<<5181>>
The \gls<<4006>>MMAS<<4006>> algorithm as discussed also improves on the \gls<<4007>>AS<<4007>>. The global update rule used by \gls<<4008>>AS<<4008>> has a disadvantage in the sense that the search might concentrate too quickly on a particular good solution (the global best path)\cite<<4009>>FundamentalSwarm<<4009>>. \gls<<4010>>MMAS<<4010>> address this disadvantage by using the global update rule on an iteration basis\cite<<4011>>FundamentalSwarm<<4011>>.
\begin<<5182>>tex2html_deferred<<5182>>\par\end<<5183>>tex2html_deferred<<5183>>
When considering only on an per iteration basis, the best path found by the algorithm can differ from one iteration to the next\cite<<4012>>FundamentalSwarm<<4012>>. Therefore the \gls<<4013>>MMAS<<4013>> a different path will be updating with the global update rule each iteration\cite<<4014>>FundamentalSwarm<<4014>>. Using this approach the algorithm is allowed to explore the search space more\cite<<4015>>FundamentalSwarm<<4015>>.
\begin<<5184>>tex2html_deferred<<5184>>\par\end<<5185>>tex2html_deferred<<5185>>
Another short coming of the \gls<<4016>>AS<<4016>> is that pheromone concentrations can become extremely high leading to less exploration by the algorithm\cite<<4017>>FundamentalSwarm<<4017>>. The \gls<<4018>>MMAS<<4018>> algorithm addresses this short coming by enforcing an maximum and minimum amount of pheromone that can exist on a path\cite<<4019>>FundamentalSwarm<<4019>>. By defining a maximum the algorithm is prevents the algorithm from settling on one particular solution i.e, stagnation\cite<<4020>>FundamentalSwarm<<4020>>. On the other hand, defining a minimum on all possible links between nodes ensures that links will be continiously considered for possible inclusion into a solution\cite<<4021>>FundamentalSwarm<<4021>>. In addition to providing boundaries for the pheromones \gls<<4022>>MMAS<<4022>> also uses a smoothing strategy to even out the difference between high and low pheromones\cite<<4023>>FundamentalSwarm<<4023>>.
\begin<<5186>>tex2html_deferred<<5186>>\par\end<<5187>>tex2html_deferred<<5187>>
\subsection<<4024>>Flow of the Algorithm<<4024>>
In this section the process the \gls<<4025>>AS<<4025>> algorithm uses to explore the search space is described using algorithm~\ref<<4026>>alg:ACO<<4026>> as a reference point.
\begin<<4027>>algorithm<<4027>>[H]
\begin<<5188>>tex2html_deferred<<5188>>\caption<<4647>>Ant System Algorithm~\cite<<4028>>CompuIntelligenceIntro<<4028>><<4647>>\end<<5189>>tex2html_deferred<<5189>>
\label<<4029>>alg:ACO<<4029>>
	\begin<<4030>>algorithmic<<4030>>[1]
	\State\begin<<4776>>tex2html_wrap_inline<<4776>>$\text<<4648>>Initialize \begin<<4774>>tex2html_wrap_inline<<4774>>$\tau_<<4031>>ij<<4031>>$\end<<4775>>tex2html_wrap_inline<<4775>>\space with small starting values<<4648>>$\end<<4777>>tex2html_wrap_inline<<4777>>
	\State\begin<<4778>>tex2html_wrap_inline<<4778>>$t \leftarrow 0$\end<<4779>>tex2html_wrap_inline<<4779>>
	\State\begin<<4782>>tex2html_wrap_inline<<4782>>$\text<<4032>>Place \begin<<4780>>tex2html_wrap_inline<<4780>>$n_k$\end<<4781>>tex2html_wrap_inline<<4781>>\space ants on starting node<<4032>>$\end<<4783>>tex2html_wrap_inline<<4783>>
	\While<<4033>>stopping condition not reached<<4033>>
		\For<<4034>>each ant \begin<<4784>>tex2html_wrap_inline<<4784>>$k \leftarrow 0$\end<<4785>>tex2html_wrap_inline<<4785>>\space to  number of ants \begin<<4786>>tex2html_wrap_inline<<4786>>$n_k$\end<<4787>>tex2html_wrap_inline<<4787>><<4034>>
			\State\begin<<4788>>tex2html_wrap_inline<<4788>>$p^k(t) \leftarrow \text<<4035>>Initialize path <<4035>> p^k \text<<4036>>for time step <<4036>> t$\end<<4789>>tex2html_wrap_inline<<4789>>
			\Repeat
				\State\begin<<4790>>tex2html_wrap_inline<<4790>>$\text<<4649>>Select next node based on probability equation~\ref<<4037>>eq:ASprobability<<4037>><<4649>>$\end<<4791>>tex2html_wrap_inline<<4791>>
				\State\begin<<4792>>tex2html_wrap_inline<<4792>>$\text<<4038>>Add link (i,j) to path <<4038>> p^k(t)$\end<<4793>>tex2html_wrap_inline<<4793>>
			\Until<<4039>>Final node reached<<4039>>
			\algstore<<4040>>AS<<4040>>
	\end<<4041>>algorithmic<<4041>>
\begin<<5190>>tex2html_deferred<<5190>>\addtocounter<<4042>>algorithm<<4042>><<4043>>-1<<4043>>\end<<5191>>tex2html_deferred<<5191>>
\end<<4044>>algorithm<<4044>>
\begin<<5192>>tex2html_deferred<<5192>>\par\end<<5193>>tex2html_deferred<<5193>>
\begin<<4045>>algorithm<<4045>>[H]
\begin<<5194>>tex2html_deferred<<5194>>\caption<<4046>>Ant System Algorithm (continued)<<4046>>\end<<5195>>tex2html_deferred<<5195>>
\label<<4047>>alg:ACO1<<4047>>
	\begin<<4048>>algorithmic<<4048>>
		\algrestore<<4049>>AS<<4049>>
			\State\begin<<4794>>tex2html_wrap_inline<<4794>>$x^k(t) \leftarrow \text<<4050>>Remove loops from path <<4050>>p^k(t)$\end<<4795>>tex2html_wrap_inline<<4795>>
			\State\begin<<4798>>tex2html_wrap_inline<<4798>>$\text<<4051>>Calculate length of path \begin<<4796>>tex2html_wrap_inline<<4796>>$f(p^k(t)$\end<<4797>>tex2html_wrap_inline<<4797>><<4051>>)$\end<<4799>>tex2html_wrap_inline<<4799>>
		\EndFor
		\For<<4052>>each link \begin<<4800>>tex2html_wrap_inline<<4800>>$(i,j)$\end<<4801>>tex2html_wrap_inline<<4801>>\space in graph<<4052>>
			\State\begin<<4804>>tex2html_wrap_inline<<4804>>$\tau_<<4053>>ij<<4053>> = \text<<4650>>Reduce pheromone of link \begin<<4802>>tex2html_wrap_inline<<4802>>$(i,j)$\end<<4803>>tex2html_wrap_inline<<4803>>\space with equation~\ref<<4054>>eq:pheromoneevapuration<<4054>><<4650>>$\end<<4805>>tex2html_wrap_inline<<4805>>
		\EndFor
		\For<<4055>>each ant \begin<<4806>>tex2html_wrap_inline<<4806>>$k = 0$\end<<4807>>tex2html_wrap_inline<<4807>>\space to  number of ants \begin<<4808>>tex2html_wrap_inline<<4808>>$n_k$\end<<4809>>tex2html_wrap_inline<<4809>><<4055>>
			\For<<4056>>each link \begin<<4810>>tex2html_wrap_inline<<4810>>$(i,j)$\end<<4811>>tex2html_wrap_inline<<4811>>\space in \begin<<4812>>tex2html_wrap_inline<<4812>>$p^k(t)$\end<<4813>>tex2html_wrap_inline<<4813>><<4056>>
				\State\begin<<4814>>tex2html_wrap_inline<<4814>>$\triangle \tau_<<4057>>ij<<4057>> = \frac<<4058>>1<<4058>><<4059>>f(p^k(t))<<4059>>$\end<<4815>>tex2html_wrap_inline<<4815>>
				\State\begin<<4818>>tex2html_wrap_inline<<4818>>$\text<<4651>>Update the pheromone \begin<<4816>>tex2html_wrap_inline<<4816>>$\tau_<<4060>>ij<<4060>>$\end<<4817>>tex2html_wrap_inline<<4817>>\space with equation~\ref<<4061>>eq:pheromoneupdate<<4061>><<4651>>$\end<<4819>>tex2html_wrap_inline<<4819>>
			\EndFor
		\EndFor
		\State\begin<<4820>>tex2html_wrap_inline<<4820>>$t \leftarrow t + 1$\end<<4821>>tex2html_wrap_inline<<4821>>
	\EndWhile\\ 
	\Return \begin<<4826>>tex2html_wrap_inline<<4826>>$\text<<4062>>path \begin<<4822>>tex2html_wrap_inline<<4822>>$x^k(t)$\end<<4823>>tex2html_wrap_inline<<4823>>\space with the smallest \begin<<4824>>tex2html_wrap_inline<<4824>>$f(x^k(t))$\end<<4825>>tex2html_wrap_inline<<4825>>\space as the solution<<4062>>$\end<<4827>>tex2html_wrap_inline<<4827>>
	\end<<4063>>algorithmic<<4063>>
\end<<4064>>algorithm<<4064>>
\begin<<5196>>tex2html_deferred<<5196>>\par\end<<5197>>tex2html_deferred<<5197>>
The \gls<<4065>>ACO<<4065>> algorithm initialises by creating a set population of ants and placing them on random starting nodes as well as initialising the pheromones to starting values as can be observed from algorithm~\ref<<4066>>alg:ACO<<4066>>, lines 1 -- 3. The main purpose of the ant is to explore the search space and to ultimately produce a solution that might be optimal. The ant explores the search space by performing a series of moves from one node to another. Each move is a link that is added to the path. This process can be seen in lines 5 -- 10.
\begin<<5198>>tex2html_deferred<<5198>>\par\end<<5199>>tex2html_deferred<<5199>>
The ant selects which node to move to next based on a probability. The probability is calculated taking into account the amount of pheromone that is on the current link representing the movement from the current node to the next node\cite<<4067>>CompuIntelligenceIntro,FundamentalSwarm<<4067>>. This decision process can be seen to occur in line 8.
\begin<<5200>>tex2html_deferred<<5200>>\par\end<<5201>>tex2html_deferred<<5201>>
As the ant moves it records each link between the nodes it traverses until it reaches the final node. All the links the ant has traversed represent a path taken through the search space\cite<<4068>>CompuIntelligenceIntro,FundamentalSwarm<<4068>>. Thus, as the ant is moving it is actively building an optimal solution.
\begin<<5202>>tex2html_deferred<<5202>>\par\end<<5203>>tex2html_deferred<<5203>>
Before the ant deposits pheromone on the links it traversed to construct its solution, the pheromones first need to be decayed. This is why in lines 14 -- 16, the algorithm traverses all links that contain pheromones and reduces the amount of pheromones by applying equation~\ref<<4069>>eq:pheromoneevapuration<<4069>>.
\begin<<5204>>tex2html_deferred<<5204>>\par\end<<5205>>tex2html_deferred<<5205>>
Once an ant has constructed a path and the pheromone evaporation has occurred, the ant is ready to inform the rest of the ants of what movements it made to construct its solution. The ant needs to share this movement information in order for the rest of the colony to know which movements worked well and which did not. The ant therefore needs to signal the other ants, which is accomplished with pheromones. Therefore, in the next phase of the algorithm, pheromones are deposited on all the links that make up the path the particular ant constructed. In the algorithm pheromones are deposited on lines 17 -- 22 in algorithm~\ref<<4070>>alg:ACO1<<4070>>.
\begin<<5206>>tex2html_deferred<<5206>>\par\end<<5207>>tex2html_deferred<<5207>>
After all the ants have deposited pheromones on all the links represented by each individual ant's constructed solution, the algorithm is ready to continue to its next iteration. This process occurs until some defined stopping criterion occurs.
\begin<<5208>>tex2html_deferred<<5208>>\par\end<<5209>>tex2html_deferred<<5209>>
\subsection<<4652>>ACO on the \gls<<4071>>FAP<<4071>><<4652>>
ACO has been applied to a wide number of problems and has produced good results. As discussed in chapter~\ref<<4072>>chpt:fap<<4072>>, the \gls<<4073>>FAP<<4073>> can be modelled as a graph and therefore the \gls<<4074>>ACO<<4074>> has also been applied to it.
\begin<<5210>>tex2html_deferred<<5210>>\par\end<<5211>>tex2html_deferred<<5211>>
When using the \gls<<4075>>ACO<<4075>> algorithm on the \gls<<4076>>FAP<<4076>> the ants need to construct a path that represents a frequency plan and has low interference. With the \gls<<4077>>ACO<<4077>>, a node is a cell that has a unique set of channels assigned to it. Thus the same cell may exist in the search space, but will have a different set of channels assigned to it, and will therefore represent an entirely different node to the \gls<<4078>>ACO<<4078>>.
\begin<<5212>>tex2html_deferred<<5212>>\par\end<<5213>>tex2html_deferred<<5213>>
As an ant moves in the frequency planning domain, it is actually moving between two cells that are said to interfere. The interference between two cells occurs as a consequence of the channels that have been assigned to them. 
\begin<<5214>>tex2html_deferred<<5214>>\par\end<<5215>>tex2html_deferred<<5215>>
As an ant completes a movement from one cell to another, i.e. it assigns channels to the cell, it measures the interference that occurs due to the assignment.  The measured interference information is incorporated into the pheromone, which the ant will deposit on the link between the two cells.
\begin<<5216>>tex2html_deferred<<5216>>\par\end<<5217>>tex2html_deferred<<5217>>
An optimal frequency plan would therefore be a path through all the interfering cells marked with a high dosage of pheromone. As discussed in the previous sections, the pheromone indicates the desirability of a particular path. In the \gls<<4079>>FAP<<4079>>, a desirable path would be one where interference is low; thus a path with a high dosage of pheromones would be the frequency plan with the lowest interference found by the algorithm.
\begin<<5218>>tex2html_deferred<<5218>>\par\end<<5219>>tex2html_deferred<<5219>>
When analysing the basic \gls<<4080>>ACO<<4080>> algorithm~\ref<<4081>>alg:ACO<<4081>> one can identify the following possible disadvantages if the algorithm were applied to the \gls<<4082>>FAP<<4082>>:
\paragraph<<4083>>Memory Usage<<4083>>
--- The algorithm requires a fair amount of memory. The memory is used to keep track of each permutation of a particular cell and its allocated frequencies until the pheromone that links to the cell has decayed enough to be discarded. As an ant moves from one cell to another, it might not select the previous cell (due to probability) to move to, but rather generates an entirely new cell to move towards. This newly generated cell would then be linked to the previous cell, and therefore the algorithm needs to keep track of the pheromone on that link until it has completely been decayed away. The algorithm needs to keep track of these pheromones on the links even if the new link to the generated cell is not even close to optimal and has very high interference.
\paragraph<<4084>>Building a solution<<4084>>
--- The \gls<<4085>>ACO<<4085>> \emph<<4086>>builds<<4086>> an optimal solution. Therefore, early decisions made by the ants still influence the plan later for better or for worse. A good decision might seem to be good early on, but later the algorithm might be better off with a slightly worse decision. In the \gls<<4087>>FAP<<4087>>, a cell can have multiple interfering cells, but a particular ant only knows about one link between two cells and not about the other interfering cells. Thus an ant will find the optimal path on the first interfering link between two cells, in other words it will optimise the channels allocated to these cells so that interference is low. The first interfering link is now optimised, and subsequent ants will reinforce this channel allocation since the interference is low. When the ants later reach the other cells that also interfere with the first cell that has been optimised, they will have difficulty changing the assignments that have already been made, since the pheromone representing that assignment is too strong to disregard.
\begin<<5220>>tex2html_deferred<<5220>>\par\end<<5221>>tex2html_deferred<<5221>>
The above disadvantages have only been identified by critically evaluating the algorithm as a possible point of interest to produce an optimal solution for the \gls<<4088>>FAP<<4088>> for this dissertation. Even with these disadvantages the \gls<<4089>>ACO<<4089>> has achieved success in producing high quality optimal solutions for the \gls<<4090>>FAP<<4090>>.
\begin<<5222>>tex2html_deferred<<5222>>\par\end<<5223>>tex2html_deferred<<5223>>
In research conducted by Luna et al.\cite<<4091>>ACOvsEA<<4091>> an \gls<<4092>>ACO<<4092>> algorithm was applied to a custom cellular network instance. This network instance had 711 sectors with 2 612 transceivers, which needed to be assigned frequencies. For their particular network, only 18 channels were available for assignment. The channels started at 134 and ended at 151\cite<<4093>>ACOvsEA<<4093>>.
\begin<<5224>>tex2html_deferred<<5224>>\par\end<<5225>>tex2html_deferred<<5225>>
The authors presented two versions of the algorithm. The first version used no heuristic information (henceforth referred to as \gls<<4094>>ACO<<4094>>*) and the other version used heuristic information to update the pheromone laid done by the artificial ants\cite<<4095>>ACOvsEA<<4095>>.
\begin<<5226>>tex2html_deferred<<5226>>\par\end<<5227>>tex2html_deferred<<5227>>
With regard to the heuristic updating of the pheromone trails, the authors opted to increase the pheromone by some magnitude\cite<<4096>>ACOvsEA<<4096>>. This magnitude was handtuned to be 100. The heuristic only increases a certain path's pheromone if the frequencies assigned to the transceivers represented by this path differ enough so as to not cause significant interference\cite<<4097>>ACOvsEA<<4097>>. Thus, the heuristic aims to amplify good choices made previously by the algorithm for the next iteration of the algorithm.
\begin<<5228>>tex2html_deferred<<5228>>\par\end<<5229>>tex2html_deferred<<5229>>
In table~\ref<<4098>>tab:ACO<<4098>> the results abtained by Lune et. al \cite<<4099>>ACOvsEA<<4099>> are presented. By evaluating the results obtained, one can clearly see that the \gls<<4100>>ACO<<4100>> version that incorporates heuristic information to reinforce pheromone trails outperforms the version that does not \cite<<4101>>ACOvsEA<<4101>>. The values depicted in the table represent the amount of interference that will result if the plan is used in the network\cite<<4102>>ACOvsEA<<4102>>.
\begin<<4103>>table<<4103>>[H]
\begin<<5230>>tex2html_deferred<<5230>>\centering\end<<5231>>tex2html_deferred<<5231>>
	\begin<<4104>>tabular<<4104>><<4105>>| c | c | c |<<4105>>
	\hline
	Time limit ;SPMamp; \gls<<4106>>ACO<<4106>>* ;SPMamp; \gls<<4107>>ACO<<4107>> \\  \hline
	120s ;SPMamp; 104719.72 ;SPMamp; 91140.04 \\  \hline
	600s ;SPMamp; 103752.12 ;SPMamp; 89703.44 \\  \hline
	1 800s ;SPMamp; 103781.86 ;SPMamp; 88345.94 \\  \hline
	\end<<4108>>tabular<<4108>>
\begin<<5232>>tex2html_deferred<<5232>>\caption<<4653>>ACO and \gls<<4109>>ACO<<4109>>* on custom GSM \gls<<4110>>FAP<<4110>> benchmark\cite<<4111>>ACOvsEA<<4111>><<4653>>\end<<5233>>tex2html_deferred<<5233>>
\label<<4112>>tab:ACO<<4112>>
\end<<4113>>table<<4113>>
\newpage
\section<<4114>>Artificial Bee Colony (ABC) Algorithm<<4114>>
\label<<4115>>sec:BEE<<4115>>
\begin<<5234>>tex2html_deferred<<5234>>\par\end<<5235>>tex2html_deferred<<5235>>
\subsection<<4116>>Introduction<<4116>>
The \gls<<4117>>ABC<<4117>> algorithm is the most recently presented algorithm in the literature discussed in this chapter\cite<<4118>>ABCCompareStudy,ABCLeafConstrained,ABCNumericalOptimization<<4118>>. The algorithm was first proposed by Karaboga in 2005 who wanted to mimic the foraging behaviour exhibited by bees \cite<<4119>>ABCCompareStudy,ABCLeafConstrained,ABCNumericalOptimization<<4119>>. Like ants, bees need to gather food to support the colony. To understand how the \gls<<4120>>ABC<<4120>> algorithm tries to mimic the foraging behaviour of bees, this behaviour of real bees needs to be described first\cite<<4121>>ABCCompareStudy<<4121>>. 
\begin<<5236>>tex2html_deferred<<5236>>\par\end<<5237>>tex2html_deferred<<5237>>
In a bee colony there are numerous bees, each with a specific role that dictates what actions a bee can perform. There are bees that protect the queen, maintain the colony, scout for resources and gather food, i.e the worker bees. The most important bees for foraging are those that scout and gather food\cite<<4122>>ABCCompareStudy<<4122>>. 
\begin<<5238>>tex2html_deferred<<5238>>\par\end<<5239>>tex2html_deferred<<5239>>
The scout bees are sent out and as their role implies, are responsible for exploring the surroundings of the hive to find suitable food sources\cite<<4123>>ABCCompareStudy<<4123>>. If a scout bee has found a food source it needs to return to the colony to share the information with the worker bees\cite<<4124>>ABCCompareStudy<<4124>>. When the bee enters the colony it needs to communicate to the other bees by using some form of stigmergy (see section~\ref<<4125>>sec:stigmergy<<4125>>)\cite<<4126>>ABCCompareStudy<<4126>>.
\begin<<5240>>tex2html_deferred<<5240>>\par\end<<5241>>tex2html_deferred<<5241>>
The scout bee accomplishes this communication by performing a dance known as the \emph<<4127>>waggle dance<<4127>> in the colony for all the bees to see\cite<<4128>>ABCCompareStudy<<4128>>. This is not a dance as in the traditional sense, since through certain movements the bee is able to communicate a variety of characteristics about the food source including\cite<<4129>>ABCCompareStudy<<4129>>:
\begin<<4130>>itemize<<4130>>
\item How far the food source is from the colony
\item Quality of the food source
\item Path towards the food source
\end<<4131>>itemize<<4131>>
\begin<<5242>>tex2html_deferred<<5242>>\par\end<<5243>>tex2html_deferred<<5243>>
It can be concluded that foraging bees use \emph<<4132>>sematectonic<<4132>> stigmergy (discussed in section~\ref<<4133>>sec:stigmergy<<4133>>). This is deduced from the dance which is a physical form of communication.
\begin<<5244>>tex2html_deferred<<5244>>\par\end<<5245>>tex2html_deferred<<5245>>
The dance is observed by \emph<<4134>>onlooker<<4134>> worker bees \cite<<4135>>ABCCompareStudy,ABCImageEnhancement<<4135>>. These onlooker bees are initially \emph<<4136>>unemployed<<4136>> in the colony \cite<<4137>>ABCCompareStudy,ABCImageEnhancement<<4137>>. Once the information of the scout has been transferred to the onlooker bees, the onlooker bees become \emph<<4138>>employed<<4138>> bees\cite<<4139>>ABCCompareStudy,ABCImageEnhancement<<4139>>. They become employed bees when they operate on a particular food source to gather food\cite<<4140>>ABCCompareStudy,ABCImageEnhancement<<4140>>. Thus it is the job of the worker bees to \emph<<4141>>exploit<<4141>> the information provided by the \emph<<4142>>exploration<<4142>> done by the scout bees \cite<<4143>>ABCCompareStudy,ABCNumericalOptimization<<4143>>. 
\begin<<5246>>tex2html_deferred<<5246>>\par\end<<5247>>tex2html_deferred<<5247>>
Worker bees gather food from the designated food source, until the food source reaches a certain quantity with regard to nectar content \cite<<4144>>ABCCompareStudy,ABCNumericalOptimization<<4144>>. Each time the bee returns to the colony it evaluates the current food source versus other food sources discovered \cite<<4145>>ABCCompareStudy,ABCNumericalOptimization<<4145>>. If a better food source is found, the bee abandons the previous source and starts gathering food from the new source \cite<<4146>>ABCCompareStudy,ABCNumericalOptimization<<4146>>. On the other hand, if the food source has been exhausted, meaning there is no more nectar content to gather, the bee returns to the colony and becomes ``unemployed'' \cite<<4147>>ABCCompareStudy,ABCNumericalOptimization<<4147>>.
\begin<<5248>>tex2html_deferred<<5248>>\par\end<<5249>>tex2html_deferred<<5249>>
In the \gls<<4148>>ABC<<4148>> algorithm, possible solutions are considered to be food sources\cite<<4149>>ABCCompareStudy,ABCNumericalOptimization<<4149>>. Each food source has an employed bee associated with it. Onlooker bees either wait for new food sources to be communicated to them or become employed bees by moving to another, more attractive food source \cite<<4150>>ABCCompareStudy,ABCNumericalOptimization<<4150>>. 
\begin<<5250>>tex2html_deferred<<5250>>\par\end<<5251>>tex2html_deferred<<5251>>
A food source might be more attractive to a bee because its defined nectar content is more than that of the current food source the bee is operating on\cite<<4151>>ABCCompareStudy,ABCNumericalOptimization<<4151>>. The nectar content of a food source can be considered to be the fitness, which is determined using the fitness function of the specific problem domain\cite<<4152>>ABCCompareStudy,ABCNumericalOptimization<<4152>>.
\begin<<5252>>tex2html_deferred<<5252>>\par\end<<5253>>tex2html_deferred<<5253>>
As with real honey bees, a \emph<<4153>>waggle dance<<4153>> is performed to all the onlooker bees by employed bees that provide information on the nectar amount (fitness value) that they represent \cite<<4154>>ABCReconfigDistro,ABCCompareStudy,ABCImageEnhancement<<4154>>. The onlooker bees choose food sources depending on the nectar amount \cite<<4155>>ABCReconfigDistro,ABCCompareStudy,ABCImageEnhancement<<4155>>; therefore as the nectar amount of a food source increases, the probability that more onlooker bees will choose the source increases \cite<<4156>>ABCReconfigDistro,ABCCompareStudy,ABCImageEnhancement<<4156>>. How and what affects the probability is discussed in the next subsection.
\begin<<5254>>tex2html_deferred<<5254>>\par\end<<5255>>tex2html_deferred<<5255>>
Bees can transition to different roles depending on their situation \cite<<4157>>ABCCompareStudy,ABCNumericalOptimization<<4157>>. An onlooker bee becomes employed when assigned to a food source and an employed bee can become a scout if its initial food source becomes exhausted \cite<<4158>>ABCImageEnhancement,ABCCompareStudy,ABCReconfigDistro<<4158>>. Note that not all employed bees of a food source become scouts; only the first employed bee of a food source transitions to a scout \cite<<4159>>ABCImageEnhancement,ABCCompareStudy,ABCReconfigDistro<<4159>>. Scout bees are sent to randomly generated food sources \cite<<4160>>ABCImageEnhancement,ABCCompareStudy,ABCReconfigDistro<<4160>>. 
\begin<<5256>>tex2html_deferred<<5256>>\par\end<<5257>>tex2html_deferred<<5257>>
The more onlooker bees a food source attracts, the more the neighbourhood will be explored since the onlooker bees move to the food source and choose an immediate neighbouring food source to be employed upon \cite<<4161>>ABCCompareStudy,ABCNumericalOptimization<<4161>>. Thus, this can be considered exploitation and the algorithm is therefore performing a local search\cite<<4162>>ABCCompareStudy,ABCReconfigDistro,ABCNumericalOptimization<<4162>>. Finally, the number of onlooker bees a food source has also indicates its desirability. A very good solution will have the majority of onlooker bees choosing it and searching for nearby better food sources \cite<<4163>>ABCCompareStudy,ABCReconfigDistro,ABCNumericalOptimization<<4163>>. More bees are lured towards a particular food source due to the high nectar amount that has been communicated to them by other employed bees\cite<<4164>>ABCCompareStudy,ABCReconfigDistro,ABCNumericalOptimization<<4164>>.
\begin<<5258>>tex2html_deferred<<5258>>\par\end<<5259>>tex2html_deferred<<5259>>
When a food source is abandoned, the previous bee that occupied the food source transitions to a scout bee \cite<<4165>>ABCCompareStudy,ABCNumericalOptimization<<4165>>. The scout bee is responsible for replacing the abandoned food source by finding a new one, and a new food source is generated and communicated back to the colony\cite<<4166>>ABCCompareStudy,ABCImageEnhancement,ABCNumericalOptimization<<4166>>. The generation of food sources is discussed in the next subsection.
\begin<<5260>>tex2html_deferred<<5260>>\par\end<<5261>>tex2html_deferred<<5261>>
Karaboga was not the first to base an algorithm on the above foraging behaviour. Other bee foraging inspired algorithms have been developed such as the BeeHive algorithm, \gls<<4167>>BCO<<4167>> and \gls<<4168>>BSO<<4168>> \cite<<4169>>BCO,HybridABCClustering,ABCNumericalOptimization<<4169>>. 
\begin<<5262>>tex2html_deferred<<5262>>\par\end<<5263>>tex2html_deferred<<5263>>
The BeeHive algorithm is based on the dance communication used inside the colony of bees. In \gls<<4170>>BCO<<4170>> solutions are randomly generated and assigned to bees\cite<<4171>>HybridABCClustering,ABCNumericalOptimization<<4171>>. Finally, \gls<<4172>>BSO<<4172>> solutions are iteratively constructed by forager (worker) bees and the best solution is communicated to the rest of the colony by performing a dance\cite<<4173>>HybridABCClustering,ABCNumericalOptimization<<4173>>.
\begin<<5264>>tex2html_deferred<<5264>>\par\end<<5265>>tex2html_deferred<<5265>>
Another bee algorithm is the \gls<<4174>>VBA<<4174>> which, like the previous algorithms, is also based on the foraging behaviour of bees, but it differs in that it is not designed for combinatorial problems \cite<<4175>>ABCNumericalOptimization<<4175>>. Instead the \gls<<4176>>VBA<<4176>> is a variant of the standard \gls<<4177>>ABC<<4177>> algorithm which is designed for numerical function optimisation \cite<<4178>>ABCNumericalOptimization<<4178>>. In \gls<<4179>>VBA<<4179>> bees move around in the search space communicating to each other any target nectar food sources that are found\cite<<4180>>ABCNumericalOptimization<<4180>>. Good food sources are function evaluations of particular coordinates in the numerical search space which produce low function evaluation values in the case of minimisation\cite<<4181>>ABCNumericalOptimization<<4181>>.
\begin<<5266>>tex2html_deferred<<5266>>\par\end<<5267>>tex2html_deferred<<5267>>
Karaboga developed the \gls<<4182>>ABC<<4182>> algorithm based on the previous research done on bee colony optimisation and the above algorithms. The \gls<<4183>>ABC<<4183>> algorithm is designed to be a multivariable optimisation algorithm and has to date been applied to the job scheduling problem, clustering \cite<<4184>>HybridABCClustering<<4184>>, neural network training and reconfiguration of distribution networks \cite<<4185>>ABCReconfigDistro<<4185>>. Due to the nature of the algorithm being similar to that of the \gls<<4186>>ACO<<4186>>, the \gls<<4187>>ABC<<4187>> algorithm will most likely also be applied to a whole host of other of problems.
\begin<<5268>>tex2html_deferred<<5268>>\par\end<<5269>>tex2html_deferred<<5269>>
\subsection<<4188>>ABC Algorithm Characteristics<<4188>>
Various characteristics of the \gls<<4189>>ABC<<4189>> algorithm define the algorithm and make it unique. The first characteristic is how food sources are handled in the algorithm. The second is how information is communicated to the colony.
\subsubsection<<4190>>Food Sources<<4190>>
\label<<4191>>sec:foodsources<<4191>>
As discussed previously, food sources represent solutions to the problem the \gls<<4192>>ABC<<4192>> algorithm is being applied to. When the algorithm starts, there are no defined food sources for the bees to evaluate and report on, and therefore initially a finite number of food sources are randomly generated\cite<<4193>>ABCCompareStudy,ABCFusionGrid<<4193>>. Since each food source needs an employed bee to evaluate the nectar amount of the source, the parameter that defines the number of food sources also defines the number of employed bees\cite<<4194>>ABCCompareStudy,ABCLeafConstrained<<4194>>.
\begin<<5270>>tex2html_deferred<<5270>>\par\end<<5271>>tex2html_deferred<<5271>>
Employed bees evaluate these food sources by determining their nectar amount\cite<<4195>>ABCCompareStudy,ABCLeafConstrained<<4195>>. The nectar amount is directly related to the fitness value calculated using a domain specific cost function\cite<<4196>>ABCCompareStudy,ABCReconfigDistro<<4196>>. After the amount is determined the employed bee advertises the food source to the colony by performing the waggle dance.
\begin<<5272>>tex2html_deferred<<5272>>\par\end<<5273>>tex2html_deferred<<5273>>
Onlooker bees witness a number of dances from a variety of employed bees\cite<<4197>>ABCFusionGrid,BeeJobShop<<4197>>. They therefore need to select a food source that is the most attractive while maintaining some diversity in the pool of solutions. Thus, an onlooker bee selects a food source based on a probability function which is formulated in equation \ref<<4198>>eq:beeProbability<<4198>>\cite<<4199>>ABCCompareStudy<<4199>>:
\begin<<4200>>equation<<4200>>
\label<<4201>>eq:beeProbability<<4201>>
p_i = \frac<<4654>><<4202>>fit<<4202>>_i<<4654>><<4655>>\sum^<<4203>>SN<<4203>>_<<4204>>n=1<<4204>><<4205>>fit<<4205>>_n<<4655>>
\end<<4206>>equation<<4206>>
\begin<<5274>>tex2html_deferred<<5274>>\par\end<<5275>>tex2html_deferred<<5275>>
The parameter \begin<<4828>>tex2html_wrap_inline<<4828>>$p_i$\end<<4829>>tex2html_wrap_inline<<4829>>\space is the \begin<<4830>>tex2html_wrap_inline<<4830>>$i$\end<<4831>>tex2html_wrap_inline<<4831>>th food source under consideration by the onlooker bee. The \begin<<4832>>tex2html_wrap_inline<<4832>>$<<4207>>fit<<4207>>_i$\end<<4833>>tex2html_wrap_inline<<4833>>\space parameter represents the value of the cost function and is directly related to the nectar amount of food source \begin<<4834>>tex2html_wrap_inline<<4834>>$i$\end<<4835>>tex2html_wrap_inline<<4835>>. The parameter SN is the maximum amount of food source and hence the maximum employed onlooker bees \cite<<4208>>ABCCompareStudy<<4208>>.
\begin<<5276>>tex2html_deferred<<5276>>\par\end<<5277>>tex2html_deferred<<5277>>
In algorithm~\ref<<4209>>alg:ABC<<4209>> the waggle dance can be seen being applied in line 11 where the probability of all the employed bee' solutions are calculated using equation~\ref<<4210>>eq:beeProbability<<4210>>. From lines 12 -- 16 the onlooker bees evaluate the solutions of the employed bees based on the probability \begin<<4836>>tex2html_wrap_inline<<4836>>$p_i$\end<<4837>>tex2html_wrap_inline<<4837>>\space that was calculated. \begin<<4838>>tex2html_wrap_inline<<4838>>$P_i$\end<<4839>>tex2html_wrap_inline<<4839>>\space can be seen as the rating of the waggle dance that was performed by the employed bee.
\begin<<5278>>tex2html_deferred<<5278>>\par\end<<5279>>tex2html_deferred<<5279>>
\subsubsection<<4211>>Employed and Onlooker Bees<<4211>>
\label<<4212>>sec:employonlookerbees<<4212>>
As previously outlined, when recruited onlooker bees reach the advertised food source that is stored in memory, they do not occupy the same food source\cite<<4213>>ABCCompareStudy,ABCNumericalOptimization<<4213>>. Instead the bees explore the immediate neighbourhood of the food source that was communicated to them\cite<<4214>>BeeJobShop,ABCFusionGrid,ABCReconfigDistro<<4214>>. They seek to find a food source that improves on the previous one\cite<<4215>>BeeJobShop,ABCNumericalOptimization<<4215>>. Equation \ref<<4216>>eq:beeGenerate<<4216>> is used by the bees to generate new food sources in the neighbourhood of food source \begin<<4840>>tex2html_wrap_inline<<4840>>$x_i$\end<<4841>>tex2html_wrap_inline<<4841>>\cite<<4217>>ABCCompareStudy,ABCFusionGrid<<4217>>.
\begin<<4218>>equation<<4218>>
\label<<4219>>eq:beeGenerate<<4219>>
v_<<4220>>ij<<4220>> = x_<<4221>>ij<<4221>> + \phi_<<4222>>ij<<4222>>(x_<<4223>>ij<<4223>> - x_<<4224>>kj<<4224>>)
\end<<4225>>equation<<4225>>
The subscripts \begin<<4842>>tex2html_wrap_inline<<4842>>$k \in \{1,2,\dots,SN\}$\end<<4843>>tex2html_wrap_inline<<4843>>\space and \begin<<4844>>tex2html_wrap_inline<<4844>>$j \in \{1,2,\dots,D\}$\end<<4845>>tex2html_wrap_inline<<4845>>\space are indices which are randomly chosen. \begin<<4846>>tex2html_wrap_inline<<4846>>$D$\end<<4847>>tex2html_wrap_inline<<4847>>\space is the maximum dimensionality of the vector a solution represents. The index \begin<<4848>>tex2html_wrap_inline<<4848>>$k$\end<<4849>>tex2html_wrap_inline<<4849>>\space has a constraint tied to it -- whatever value is randomly assigned to \begin<<4850>>tex2html_wrap_inline<<4850>>$k$\end<<4851>>tex2html_wrap_inline<<4851>>\space \emph<<4226>>must<<4226>> differ from the value \begin<<4852>>tex2html_wrap_inline<<4852>>$i$\end<<4853>>tex2html_wrap_inline<<4853>>. The position of the new food source in the neighbourhood of \begin<<4854>>tex2html_wrap_inline<<4854>>$x_<<4227>>ij<<4227>>$\end<<4855>>tex2html_wrap_inline<<4855>>\space is controlled by the \begin<<4856>>tex2html_wrap_inline<<4856>>$\phi_<<4228>>ij<<4228>>$\end<<4857>>tex2html_wrap_inline<<4857>>\space parameter, which is a bounded random value between \begin<<4858>>tex2html_wrap_inline<<4858>>$[-1,1]$\end<<4859>>tex2html_wrap_inline<<4859>>. 
\begin<<5280>>tex2html_deferred<<5280>>\par\end<<5281>>tex2html_deferred<<5281>>
From equation \ref<<4229>>eq:beeGenerate<<4229>> it can be concluded that the randomness of the food source position decreases as the difference between \begin<<4860>>tex2html_wrap_inline<<4860>>$x_<<4230>>ij<<4230>> - x_<<4231>>kj<<4231>>$\end<<4861>>tex2html_wrap_inline<<4861>>\space decreases. Thus, as the algorithm moves closer to an optimal solution the finer grained the search process of the algorithm becomes\cite<<4232>>ABCCompareStudy,ABCNumericalOptimization,ABCImageEnhancement<<4232>>.
\begin<<5282>>tex2html_deferred<<5282>>\par\end<<5283>>tex2html_deferred<<5283>>
After a new solution \begin<<4862>>tex2html_wrap_inline<<4862>>$v_i$\end<<4863>>tex2html_wrap_inline<<4863>>\space is produced, the bee takes the new and old solutions from memory to compare their respective nectar contents. If the new solution is found to have higher quality nectar, the bee replaces the old solution in memory with the new solution\cite<<4233>>ABCCompareStudy,ABCReconfigDistro<<4233>>. Otherwise, the bee abandons the new solution and keeps the old solution in memory\cite<<4234>>ABCCompareStudy,ABCNumericalOptimization<<4234>>. Thus, the bee seeks to always move towards a better solution and therefore uses a greedy selection process\cite<<4235>>ABCLeafConstrained,ABCReconfigDistro<<4235>>.
\begin<<5284>>tex2html_deferred<<5284>>\par\end<<5285>>tex2html_deferred<<5285>>
One of the problems with the above approach is that little information about the food source is used in generating a neighbouring food source. In the research by Singh \cite<<4236>>ABCLeafConstrained<<4236>> a slight variation is proposed to generating food source neighbours by using more global information. The author adds a constraint to the algorithm that all neighbouring solutions generated by \emph<<4237>>employed<<4237>> bees must be unique. 
\begin<<5286>>tex2html_deferred<<5286>>\par\end<<5287>>tex2html_deferred<<5287>>
When an employed bee generates a neighbour and an identical solution already exists in the system, a \emph<<4238>>collision<<4238>> is said to have occurred. A collision is solved by letting the employed bee transition to a scout bee so that a completely random solution can be generated \cite<<4239>>ABCLeafConstrained<<4239>>. Scout and onlooker bee generated solutions are not checked if they collide with other solutions in the system since the aim for them is exploring and not exploiting as with employed bees\cite<<4240>>BeeJobShop,ABCCompareStudy<<4240>>. 
\subsubsection<<4241>>Scout Bee<<4241>>
The artificial bees are modelled on the behaviour of real bees. Thus an employed bee can also abandon certain food sources when it has outlived its usefulness. Abandonment of a food source can occur for the following reasons\cite<<4242>>BeeJobShop,ABCNumericalOptimization,ABCImageEnhancement<<4242>>:
\begin<<4243>>itemize<<4243>>
\item The employed bee has reached the maximum allowed cycles to improve the nectar amount. The maximum cycles spent on a food source allow the algorithm to avoid local optima\cite<<4244>>ABCCompareStudy,ABCNumericalOptimization,ABCImageEnhancement<<4244>>.
\item The bee cannot improve the search represented by the food source any further\cite<<4245>>ABCCompareStudy,ABCNumericalOptimization,ABCImageEnhancement<<4245>>.
\end<<4246>>itemize<<4246>>
When a food source in the algorithm is abandoned, it needs to be replaced by a new food source\cite<<4247>>BeeJobShop,ABCCompareStudy,ABCImageEnhancement<<4247>>. Note that a food source is not abandoned when it represents the globally best found solution. An employed bee transitions to a new role when it abandons a food source from an employed bee to a scout bee\cite<<4248>>ABCCompareStudy,ABCNumericalOptimization,ABCImageEnhancement<<4248>>. 
\begin<<5288>>tex2html_deferred<<5288>>\par\end<<5289>>tex2html_deferred<<5289>>
It is the responsibility of the scout bee to replace the abandoned food source with a new randomly generated one\cite<<4249>>BeeJobShop,ABCCompareStudy,ABCImageEnhancement<<4249>>. The scout bee uses equation \ref<<4250>>eq:scoutGenerate<<4250>> to produce a new food source that will replace food source \begin<<4864>>tex2html_wrap_inline<<4864>>$x_i$\end<<4865>>tex2html_wrap_inline<<4865>>.
\begin<<4251>>equation<<4251>>
\label<<4252>>eq:scoutGenerate<<4252>>
x_<<4253>>ij<<4253>> = x_<<4254>>yj<<4254>> + rand[0,1](x_<<4255>>zj<<4255>> - x_<<4256>>yj<<4256>>)
\end<<4257>>equation<<4257>>
\begin<<5290>>tex2html_deferred<<5290>>\par\end<<5291>>tex2html_deferred<<5291>>
The subscript \begin<<4866>>tex2html_wrap_inline<<4866>>$y$\end<<4867>>tex2html_wrap_inline<<4867>>\space represents the minimum value of \begin<<4868>>tex2html_wrap_inline<<4868>>$i$\end<<4869>>tex2html_wrap_inline<<4869>>\space and the subscript \begin<<4870>>tex2html_wrap_inline<<4870>>$y$\end<<4871>>tex2html_wrap_inline<<4871>>\space represents the maximum value of \begin<<4872>>tex2html_wrap_inline<<4872>>$i$\end<<4873>>tex2html_wrap_inline<<4873>>.
\begin<<5292>>tex2html_deferred<<5292>>\par\end<<5293>>tex2html_deferred<<5293>>
In research done by G\'<<4258>>o<<4258>>mez-Iglesias et al. \cite<<4259>>ABCFusionGrid<<4259>> an extension is made to the scout bees. The scout bee individuals are divided into two types of bees, namely \emph<<4260>>rovers<<4260>> and \emph<<4261>>cubs<<4261>> bees\cite<<4262>>ABCFusionGrid<<4262>>.
\begin<<4263>>itemize<<4263>>
\item<<4264>>Rover bees<<4264>> are similar to traditional scout bees and hence use diversification strategies to explore the search space. 
\item <<4265>>Cub bees<<4265>> explore the search space relative to a good solution found by a rover by randomly changing configuration parameters. 
\end<<4266>>itemize<<4266>>
By using two different scout bees a good balance is achieved when searching the search space in the beginning where diversity is preferred and late in the algorithm where intensification is preferred \cite<<4267>>ABCFusionGrid<<4267>>.
\begin<<5294>>tex2html_deferred<<5294>>\par\end<<5295>>tex2html_deferred<<5295>>
In the next subsection the general flow of the \gls<<4268>>ABC<<4268>> algorithm is described, which will aid in the understanding of how the algorithm searches a particular problem space. 
\subsection<<4269>>Flow of the Algorithm<<4269>>
Most of the concepts that are used in the \gls<<4270>>ABC<<4270>> algorithm have been explained. The general search process of the algorithm will now be discussed using algorithm~\ref<<4271>>alg:ABC<<4271>> as a reference point.
\begin<<4272>>algorithm<<4272>>[H]
\begin<<5296>>tex2html_deferred<<5296>>\caption<<4656>>Basic Artificial Bee Colony Algorithm\cite<<4273>>ABCCompareStudy<<4273>><<4656>>\end<<5297>>tex2html_deferred<<5297>>
\label<<4274>>alg:ABC<<4274>>
	\begin<<4275>>algorithmic<<4275>>[1]
		\State\begin<<4874>>tex2html_wrap_inline<<4874>>$b_n \leftarrow \text<<4276>>Initialize bees<<4276>>$\end<<4875>>tex2html_wrap_inline<<4875>>
		\State\begin<<4876>>tex2html_wrap_inline<<4876>>$s_n \leftarrow \text<<4277>>Initialize starting solutions<<4277>>$\end<<4877>>tex2html_wrap_inline<<4877>>
		\State\begin<<4880>>tex2html_wrap_inline<<4880>>$\text<<4278>>Evaluate starting solutions with fitness function \begin<<4878>>tex2html_wrap_inline<<4878>>$f(s_n)$\end<<4879>>tex2html_wrap_inline<<4879>><<4278>>$\end<<4881>>tex2html_wrap_inline<<4881>>
		\State\begin<<4882>>tex2html_wrap_inline<<4882>>$t \leftarrow 0$\end<<4883>>tex2html_wrap_inline<<4883>>
		\While<<4279>>stopping criteria not met<<4279>>
			\For<<4280>>each employed bee \begin<<4884>>tex2html_wrap_inline<<4884>>$eb_i = 0$\end<<4885>>tex2html_wrap_inline<<4885>>\space to max bees \begin<<4886>>tex2html_wrap_inline<<4886>>$b_n$\end<<4887>>tex2html_wrap_inline<<4887>><<4280>>
				\State\begin<<4888>>tex2html_wrap_inline<<4888>>$\hat<<4281>>v_i<<4281>> \leftarrow \text<<4657>>Generate new solution with equation~\ref<<4282>>eq:beeGenerate<<4282>><<4657>>$\end<<4889>>tex2html_wrap_inline<<4889>>
				\State\begin<<4892>>tex2html_wrap_inline<<4892>>$\text<<4658>>Evaluate with fitness function \begin<<4890>>tex2html_wrap_inline<<4890>>$f(\hat<<4283>>v_i<<4283>>)$\end<<4891>>tex2html_wrap_inline<<4891>><<4658>>$\end<<4893>>tex2html_wrap_inline<<4893>>
				\State Apply greedy selection between \begin<<4894>>tex2html_wrap_inline<<4894>>$\hat<<4284>>v_i<<4284>>$\end<<4895>>tex2html_wrap_inline<<4895>>\space and the current solution \begin<<4896>>tex2html_wrap_inline<<4896>>$\hat<<4285>>s_i<<4285>>$\end<<4897>>tex2html_wrap_inline<<4897>>\space of bee \begin<<4898>>tex2html_wrap_inline<<4898>>$eb_i$\end<<4899>>tex2html_wrap_inline<<4899>>
			\EndFor
			\algstore<<4286>>ABC<<4286>>
	\end<<4287>>algorithmic<<4287>>
\begin<<5298>>tex2html_deferred<<5298>>\addtocounter<<4288>>algorithm<<4288>><<4289>>-1<<4289>>\end<<5299>>tex2html_deferred<<5299>>
\end<<4290>>algorithm<<4290>>
\begin<<5300>>tex2html_deferred<<5300>>\par\end<<5301>>tex2html_deferred<<5301>>
\begin<<4291>>algorithm<<4291>>
	\begin<<5302>>tex2html_deferred<<5302>>\caption<<4292>>Basic Artificial Bee Colony Algorithm (continued)<<4292>>\end<<5303>>tex2html_deferred<<5303>>
	\label<<4293>>alg:ABC1<<4293>>
	\begin<<4294>>algorithmic<<4294>>[1]
		\algrestore<<4295>>ABC<<4295>>
    \State\begin<<4906>>tex2html_wrap_inline<<4906>>$\text<<4659>>Calculate probability \begin<<4900>>tex2html_wrap_inline<<4900>>$p_i$\end<<4901>>tex2html_wrap_inline<<4901>>\space for solutions \begin<<4902>>tex2html_wrap_inline<<4902>>$\hat<<4296>>s_i<<4296>>$\end<<4903>>tex2html_wrap_inline<<4903>>\space in \begin<<4904>>tex2html_wrap_inline<<4904>>$\hat<<4297>>s_n<<4297>>$\end<<4905>>tex2html_wrap_inline<<4905>>\space using equation~\ref<<4298>>eq:beeProbability<<4298>><<4659>>$\end<<4907>>tex2html_wrap_inline<<4907>>
			\For<<4299>>each onlooker bee \begin<<4908>>tex2html_wrap_inline<<4908>>$ob_i \leftarrow 0$\end<<4909>>tex2html_wrap_inline<<4909>>\space to max bees \begin<<4910>>tex2html_wrap_inline<<4910>>$b_n$\end<<4911>>tex2html_wrap_inline<<4911>><<4299>>
				\State\begin<<4916>>tex2html_wrap_inline<<4916>>$\hat<<4300>>x_i<<4300>> \leftarrow \text<<4660>>Select solution \begin<<4912>>tex2html_wrap_inline<<4912>>$\hat<<4301>>s_i<<4301>>$\end<<4913>>tex2html_wrap_inline<<4913>>\space based on \begin<<4914>>tex2html_wrap_inline<<4914>>$p_i$\end<<4915>>tex2html_wrap_inline<<4915>><<4660>> $\end<<4917>>tex2html_wrap_inline<<4917>>
				\State\begin<<4922>>tex2html_wrap_inline<<4922>>$\hat<<4302>>v_i<<4302>> \leftarrow \text<<4661>>Generate new solution with \begin<<4918>>tex2html_wrap_inline<<4918>>$\hat<<4303>>x_i<<4303>>$\end<<4919>>tex2html_wrap_inline<<4919>>\space and \begin<<4920>>tex2html_wrap_inline<<4920>>$p_i$\end<<4921>>tex2html_wrap_inline<<4921>><<4661>>$\end<<4923>>tex2html_wrap_inline<<4923>>
				\State\begin<<4928>>tex2html_wrap_inline<<4928>>$\text<<4662>>Evaluate \begin<<4924>>tex2html_wrap_inline<<4924>>$\hat<<4304>>v_i<<4304>>$\end<<4925>>tex2html_wrap_inline<<4925>>\space with fitness function \begin<<4926>>tex2html_wrap_inline<<4926>>$f(\hat<<4305>>v_i<<4305>>)$\end<<4927>>tex2html_wrap_inline<<4927>><<4662>>$\end<<4929>>tex2html_wrap_inline<<4929>>
				\State\begin<<4934>>tex2html_wrap_inline<<4934>>$\text<<4663>>Apply greedy selection between \begin<<4930>>tex2html_wrap_inline<<4930>>$\hat<<4306>>v_i<<4306>>$\end<<4931>>tex2html_wrap_inline<<4931>>\space and bee \begin<<4932>>tex2html_wrap_inline<<4932>>$ob_i$\end<<4933>>tex2html_wrap_inline<<4933>>\space current solution<<4663>>$\end<<4935>>tex2html_wrap_inline<<4935>>
			\EndFor
			\If<<4307>>there is an abandoned solution for a scout bee<<4307>>
				\State Replace with solution generated with equation~\ref<<4308>>eq:scoutGenerate<<4308>>
			\EndIf
			\State\begin<<4936>>tex2html_wrap_inline<<4936>>$t \leftarrow t + 1$\end<<4937>>tex2html_wrap_inline<<4937>>
		\EndWhile
	\end<<4309>>algorithmic<<4309>>
\end<<4310>>algorithm<<4310>>
The algorithm starts off by generating a set number of possible solutions. The number of solutions is equal to the number of employed bees. Each starting solution is evaluated using a fitness function. The operations that peform these functions can be observed to occur from lines 1 -- 3.
\begin<<5304>>tex2html_deferred<<5304>>\par\end<<5305>>tex2html_deferred<<5305>>
At first each bee is assigned to one of the initial generated solutions (food sources). Hence the bees start off as employed bees and each bee has in its memory a particular possible solution with an associated nectar amount. The algorithm can now be considered to be initialised, and therefore the algorithm enters the next phase, which is where the actual optimisation and search procedure occurs. This phase stretches from lines 5 -- 22.
\begin<<5306>>tex2html_deferred<<5306>>\par\end<<5307>>tex2html_deferred<<5307>>
From lines 6 -- 10, each employed bee modifies its particular solution based on local information, which is also referred to as visual information in the literature. The modified solution is then tested to determine its nectar amount, i.e. the fitness of the generated solution is calculated. The employed bee then compares the newly generated nectar amount with the nectar amount of the search in the bee's memory. If the newly generated solution has a better nectar amount, the bee replaces the current solution in its memory with the newly generated solution.
\begin<<5308>>tex2html_deferred<<5308>>\par\end<<5309>>tex2html_deferred<<5309>>
After all the employed bees have determined whether to keep the newly generated solution or keep the one in memory, they then need to communicate to the rest of the bee hive the nectar amount of the food sources that they occupy. This phase is where the waggle dance occurs and can be observed in algorithm~\ref<<4311>>alg:ABC<<4311>> from lines 12 -- 17.
\begin<<5310>>tex2html_deferred<<5310>>\par\end<<5311>>tex2html_deferred<<5311>>
Each onlooker bee then selects which food source it will move towards based on a probability. The probability takes into account the nectar amount that was communicated through the waggle dance by a particular employed bee. The probability is calculated using equation~\ref<<4312>>eq:beeProbability<<4312>> which is discussed in section~\ref<<4313>>sec:foodsources<<4313>>.
\begin<<5312>>tex2html_deferred<<5312>>\par\end<<5313>>tex2html_deferred<<5313>>
Once an onlooker bee has selected a food source based on the calculated probability, it then starts to search the immediate neighbourhood of the selected food source for other food sources. The neighbouring food sources are generated using equation~\ref<<4314>>eq:beeGenerate<<4314>> which is discussed in section~\ref<<4315>>sec:employonlookerbees<<4315>>. This procedure of generating neighbouring food sources by an onlooker bee can be observed in line 14 in algorithm~\ref<<4316>>alg:ABC<<4316>>.
\begin<<5314>>tex2html_deferred<<5314>>\par\end<<5315>>tex2html_deferred<<5315>>
The onlooker bee then applies the same procedure as an employed bee with regard to determining if the newly generated food source should be remembered or discarded. The bee does this by evaluating each generated neighbouring food source to determine its nectar amount, which is then compared to the nectar amount of the food source in the bee's memory.
\begin<<5316>>tex2html_deferred<<5316>>\par\end<<5317>>tex2html_deferred<<5317>>
In the last phase of the algorithm (before the next iteration starts) the algorithm determines which food sources have been abandoned by the bees. A food source in the algorithm can be abandoned if, for a certain number of iterations the food source has not improved, meaning its nectar content has not increased. When a food source is abandoned the employed bee that occupied the particular food source transitions to a scout bee.
\begin<<5318>>tex2html_deferred<<5318>>\par\end<<5319>>tex2html_deferred<<5319>>
A scout bee aims to replace the abandoned food source with a new food source. In algorithm~\ref<<4317>>alg:ABC<<4317>> this occurs in lines 18 -- 22. The scout bee uses equation~\ref<<4318>>eq:scoutGenerate<<4318>> to generate a new food source. It then transitions to an employed bee and occupies the newly generated solution. The newly generated food source will now also be evaluated to determine its nectar amount as the rest of the employed bees do at the start of the next iteration.
\begin<<5320>>tex2html_deferred<<5320>>\par\end<<5321>>tex2html_deferred<<5321>>
\subsection<<4664>>ABC algorithm on the \gls<<4319>>FAP<<4319>><<4664>>
The \gls<<4320>>ABC<<4320>> algorithm and all its variants are relatively new. To date it has only been applied to a select few problems such as the traveling salesman problem.
\begin<<5322>>tex2html_deferred<<5322>>\par\end<<5323>>tex2html_deferred<<5323>>
As yet, no research has been done to apply the \gls<<4321>>ABC<<4321>> algorithm to the \gls<<4322>>FAP<<4322>>. The following critique is based on a theoretic implementation of the \gls<<4323>>ABC<<4323>> algorithm on the \gls<<4324>>FAP<<4324>>. Based on this evaluation the following obstacles can be identified if one were to apply the algorithm to the \gls<<4325>>FAP<<4325>>:
\paragraph<<4326>>Food source representation<<4326>>
--- Each food source can either represent a frequency plan or it can be a particular cell and a collective of food sources represents a frequency plan. If each food source is a frequency plan the algorithm will require a fair amount of memory, since as onlooker bees select it, they will start searching for neighbouring solutions. These neighbouring solutions are \emph<<4327>>also<<4327>> frequency plans. However, if each food source is a cell, this would require less memory. The problem with the latter approach is that the bees would then single out one cell as the optimum, since they do not know that all food sources collectively represent a plan and each cell is actually unique.
\paragraph<<4328>>Scout bee generation<<4328>>
--- When a food source is abandoned a scout bee needs to generate a new food source to take its place. In particular with the \gls<<4329>>FAP<<4329>>, the newly generated solution cannot be completely random. The scout bee needs to incorporate knowledge already gained by the colony operating on different food sources, otherwise a completely random solution might not be even nearly lucrative enough for the rest of the bee colony to consider if it contains no knowledge gained by the algorithm.
\paragraph<<4330>>Knowledge sharing<<4330>>
--- As a food source becomes more popular due to its high nectar amount, more onlooker bees will select it. By selecting the food source the onlooker be will then proceed to search in its neighbourhood for better solutions. Therefore the bees are disregarding previously gained knowledge while searching for neighbouring sources on \emph<<4331>>other<<4331>> food sources. If a food source represents a complete frequency plan, a previous food source a bee operated on might have had one or more cells that were assigned to their optimal frequencies. Due to the larger majority of the cells not being optimised, these \emph<<4332>>good<<4332>> cells are overshadowed. Thus due to the \emph<<4333>>bad<<4333>> cells overshadowing the good cells, the food source nectar amount becomes lower. As a consequence of the low nectar amount by the food source the bees abandon the food source and those optimal cells are lost.
\begin<<5324>>tex2html_deferred<<5324>>\par\end<<5325>>tex2html_deferred<<5325>>
The above obstacles present real relevant challenges that would require new techniques to be developed. As the algorithm has not been applied to a wide variety of problems and taking into account the above obstacles, it is difficult to gauge if the \gls<<4334>>ABC<<4334>> is well suited to be applied. The algorithm first needs to be applied to a wider set of problems. Once the algorithm has matured in the research behind it the algorithm can be revisited and applied to the \gls<<4335>>FAP<<4335>>.
\begin<<5326>>tex2html_deferred<<5326>>\par\end<<5327>>tex2html_deferred<<5327>>
In this section the various obstacles one would encounter when applying the \gls<<4336>>ABC<<4336>> class of algorithms to the \gls<<4337>>FAP<<4337>> were identified. This concludes the discussion on the \gls<<4338>>ABC<<4338>> algorithm. The next section deals with the particle swarm optimisation algorithm.
\section<<4339>>Particle Swarm Optimisation (PSO)<<4339>>
\begin<<5328>>tex2html_deferred<<5328>>\par\end<<5329>>tex2html_deferred<<5329>>
\label<<4340>>sec:PSO<<4340>>
\subsection<<4341>>Introduction<<4341>>
\label<<4342>>sec:psointro<<4342>>
PSO is population-based stochastic search technique that was developed by Kennedy and Ebenhart in 1995 \cite<<4343>>PSOGABreeding<<4343>>. The basic model of the algorithm is based on simulations done to recreate the natural behaviour of a flock of birds \cite<<4344>>PSOSoftTesting<<4344>>.
\begin<<5330>>tex2html_deferred<<5330>>\par\end<<5331>>tex2html_deferred<<5331>>
In the early stages of the particle swarm development, simulations were developed to closely model the stigmergy (see page \pageref<<4345>>sec:stigmergy<<4345>> for a discussion on stigmergy) exhibited when a flock of birds cohesively move as one and are able to suddenly change direction in a unpredictable, graceful manner, only to regroup as one observed entity \cite<<4346>>PSOHybridJobShop<<4346>>. 
\begin<<5332>>tex2html_deferred<<5332>>\par\end<<5333>>tex2html_deferred<<5333>>
As the ``leading'' bird of the flock changes its movements the information is shared with all birds in the immediate vicinity of the leading bird. As the information is shared locally among birds, each bird modifies his own movement to that of the leading bird's movement\cite<<4347>>PSOHybridJobShop<<4347>>. 
\begin<<5334>>tex2html_deferred<<5334>>\par\end<<5335>>tex2html_deferred<<5335>>
Because birds obtain information by observing their neighbouring birds, the stigmergy can be deemed to be of a physical nature; therefore the particular stigmergy used by birds is sematectonic stigmergy (see page \pageref<<4348>>def:sematectonic<<4348>>).
\begin<<5336>>tex2html_deferred<<5336>>\par\end<<5337>>tex2html_deferred<<5337>>
The simulations based on this behaviour of the flock allowed researchers to discover the underlying patterns that governed the way birds are able to share information about the general movement of the flock. Based on these patterns and simulations, the particle swarm algorithm emerged into an optimisation algorithm \cite<<4349>>CompuIntelligenceIntro<<4349>>.
\begin<<5338>>tex2html_deferred<<5338>>\par\end<<5339>>tex2html_deferred<<5339>>
In the algorithm a particle is an individual\cite<<4350>>FundamentalSwarm<<4350>>. A group of particles, referred to in the literature as a swarm,  are moved through the search space of the problem the algorithm is being applied to\cite<<4351>>FundamentalSwarm<<4351>>. Each particle changes its movement based on information shared with it by neighbouring particles in the swarm \cite<<4352>>FundamentalSwarm,CompuIntelligenceIntro<<4352>>. 
\begin<<5340>>tex2html_deferred<<5340>>\par\end<<5341>>tex2html_deferred<<5341>>
As information is shared among particles, the success of one particle ripples through the rest of the swarm and each particle is able to utilise shared information that leads to success of another particle. Thus, each particle's own personal experience and knowledge of the search space has an effect on its neighbouring particles \cite<<4353>>FundamentalSwarm,CompuIntelligenceIntro<<4353>>.
\begin<<5342>>tex2html_deferred<<5342>>\par\end<<5343>>tex2html_deferred<<5343>>
Two variants of the initial \gls<<4354>>PSO<<4354>> algorithm were developed namely the global \gls<<4355>>PSO<<4355>> and local \gls<<4356>>PSO<<4356>>. The only difference between the two algorithms is how they go about sharing information with the rest of the swarm. The sharing models of these two algorithms along with other sharing models are discussed in the \gls<<4357>>PSO<<4357>> characteristics subsection \cite<<4358>>SOSwarm<<4358>>.
\begin<<5344>>tex2html_deferred<<5344>>\par\end<<5345>>tex2html_deferred<<5345>>
In the swarm, each particle is a potential solution that is represented by a D-dimensional vector \cite<<4359>>PSOHybridJobShop,PSOSelfHierarch<<4359>>. As a particle moves through the search space, it continually evaluates its current position and adjusts it accordingly to move in the general direction of its own personal best position and the position of the best particle in its neighbourhood. 
\begin<<5346>>tex2html_deferred<<5346>>\par\end<<5347>>tex2html_deferred<<5347>>
A particle evaluates its current position by using a heuristic function, or in more evolutionary algorithm terms, a fitness function. The fitness value indicates to the particle how far it is from an optimal position\cite<<4360>>CompuIntelligenceIntro<<4360>>. 
\begin<<5348>>tex2html_deferred<<5348>>\par\end<<5349>>tex2html_deferred<<5349>>
As a particle moves through the search space it keeps a memory of the personal best position it has achieved since the start of the algorithm. In the literature and in the algorithm this personal best position is referred to as \emph<<4361>>pbest<<4361>> \cite<<4362>>SOSwarm<<4362>>.
\begin<<5350>>tex2html_deferred<<5350>>\par\end<<5351>>tex2html_deferred<<5351>>
Most of the research done on \gls<<4363>>PSO<<4363>> has focused on the convergence of the algorithm as well as improving the diversity \cite<<4364>>FundamentalSwarm<<4364>>. Some of these improvements and modifications is discussed in the subsection on \gls<<4365>>PSO<<4365>> characteristics.
\begin<<5352>>tex2html_deferred<<5352>>\par\end<<5353>>tex2html_deferred<<5353>>
\subsection<<4366>>PSO Characteristics<<4366>>
\label<<4367>>sec:psocharacteristics<<4367>>
The defining characteristics of the \gls<<4368>>PSO<<4368>> algorithm that are discussed in this section include \emph<<4369>>neighbourhood topology<<4369>>, \emph<<4370>>the partcle swarm<<4370>>, \emph<<4371>>movement of particles<<4371>> and \emph<<4372>>keeping particle velocities in check<<4372>>.
\subsubsection<<4373>>The Particle Swarm<<4373>>
The initialising of particles in a swarm are the same as used by traditional population-based evolutionary algorithm to initialise their respective populations \cite<<4374>>FixedFAPPSO<<4374>>.  At the start of the algorithm the swarm is initialised by randomly generating possible solutions that will represent the position of particles\cite<<4375>>CompuIntelligenceIntro<<4375>>. 
\begin<<5354>>tex2html_deferred<<5354>>\par\end<<5355>>tex2html_deferred<<5355>>
The \gls<<4376>>PSO<<4376>> algorithm in some aspects resembles evolutionary algorithms like the genetic algorithm since it also has a population that operates in the problem space in search of an optimal solution. However unlike some of the variants that exist for the \gls<<4377>>GA<<4377>> utilise good mutation operators are able have new genetic material to be inserted into the population. At least in the initial search phase of the GA, this increases diversity\cite<<4378>>CompuIntelligenceIntro<<4378>>. The \gls<<4379>>PSO<<4379>> does not continually generate new solutions to be reinserted into the swarm to increase diversity \cite<<4380>>PSOHybridUnitCommit<<4380>>. Thus the swarm size needs to be adjusted to get an optimal representation of the search space because as particles move in the swarm, the diversity among particles decreases rapidly as information is shared \cite<<4381>>FundamentalSwarm,CompuIntelligenceIntro<<4381>>. 
\begin<<5356>>tex2html_deferred<<5356>>\par\end<<5357>>tex2html_deferred<<5357>>
The diversity of the swarm is not only dependant on the sharing model used but also on the parameters used for velocity updatign of partciles. Most important of these parameters are the inertia weight and accelaration coefficients. Depending on the values used the diversity of the swarm decreases as the swarm moves because, with each iteration, the swarm converges towards the neighbourhood best position\cite<<4382>>PSOHybridJobShop,CompuIntelligenceIntro,FundamentalSwarm<<4382>>. This occurs due to the velocity equation directs the general movement of a particle in the direction of the neighbourhood best\cite<<4383>>PSOHybridJobShop,CompuIntelligenceIntro,FundamentalSwarm<<4383>>. If the best position in the neighbourhood does not change as the algorithm processes more iterations, a larger portion of the swarm will soon occupy a position which is a weighted average between the neighbourhood and each individual particles personal best\cite<<4384>>PSOHybridJobShop,CompuIntelligenceIntro,FundamentalSwarm<<4384>>. On the other hand, if the wrong values are used, the diversity of the swarm will increase, but there is also the possibility that the swarm will diverge never to converge to a single solution but having increased diversity\cite<<4385>>FundamentalSwarm<<4385>>.
\begin<<5358>>tex2html_deferred<<5358>>\par\end<<5359>>tex2html_deferred<<5359>>
Diversity among the particles in the swarm is important and at least initially must be maintained for the search space to be explored adequeately. As discussed previously, depending on the neighbourhood topolgy used diversity can be increased. In the next section neighbourhood topolgies is discussed.
\subsubsection<<4386>>Neighbourhood topolgies<<4386>>
The neighbourhood topology (also called social structure) used by a \gls<<4387>>PSO<<4387>> algorithm dictates how information is shared among the particles of the swarm. According to Engelbrecht\cite<<4388>>FundamentalSwarm<<4388>> there are 6 neighbourhood topologies. Each topology will now be listed and a short description will also be given.
\begin<<4389>>description<<4389>>
\item<<4665>>\textbf<<4390>>star<<4390>><<4665>> --- With the star topology all particles within a swarm are interconnected with each other. Any one particle can communicate with any other particle in the swarm\cite<<4391>>FundamentalSwarm<<4391>>. Using this topology each particle is attracted towards the best solution found globally by the swarm\cite<<4392>>FundamentalSwarm<<4392>>. 
\item<<4666>>\textbf<<4393>>ring<<4393>><<4666>> --- Using the ring topology each particle communicates with its immediate adjacent neighbour\cite<<4394>>FundamentalSwarm<<4394>>. Each particle aims to mimic the best solution found within its neighbourhood\cite<<4395>>FundamentalSwarm<<4395>>. Neighbourhoods are allowed to overlap in the ring topology\cite<<4396>>FundamentalSwarm<<4396>>. Overlapping allows for information sharing among neighbourhoods and facilitates the swarm in converging to a single solution\cite<<4397>>FundamentalSwarm<<4397>>. 
\item<<4667>>\textbf<<4398>>wheel<<4398>><<4667>> --- In the wheel topology there is a central particle with which all other particles in the swarm are connected to\cite<<4399>>FundamentalSwarm<<4399>>. The other particles are isolated and can only share information with the central particle\cite<<4400>>FundamentalSwarm<<4400>>. The central particle utilises information about all the particles in its neighbourhood and adjusts its own best position accordingly\cite<<4401>>FundamentalSwarm<<4401>>. Depending on whether the new best position represents a better solution than previously, the central particle shares the information to its neighbours\cite<<4402>>FundamentalSwarm<<4402>>. A consequence of the limited sharing that occurs in the wheel topology is that the propagation of good solutions through the swarm is slowed\cite<<4403>>FundamentalSwarm<<4403>>.
\item<<4668>>\textbf<<4404>>pyramid<<4404>><<4668>> --- The pyramid topology interconnects particles so that their connected structure resembles a three-dimensional pyramid\cite<<4405>>FundamentalSwarm<<4405>>.
\item<<4669>>\textbf<<4406>>four clusters<<4406>><<4669>> --- With this topology four clusters are formed. Each cluster containing interconnected particles\cite<<4407>>FundamentalSwarm<<4407>>. Between each cluster there exists only two connections to other clusters\cite<<4408>>FundamentalSwarm<<4408>>.
\item<<4670>>\textbf<<4409>>von Neumon<<4409>><<4670>> --- Using this topology all particles are connected in a structure that resembles a grid\cite<<4410>>FundamentalSwarm<<4410>>. This structure has been shown to enable the swarm to produce better results than other neighbourhood topologies\cite<<4411>>FundamentalSwarm<<4411>>
\end<<4412>>description<<4412>>
\begin<<5360>>tex2html_deferred<<5360>>\par\end<<5361>>tex2html_deferred<<5361>>
Based on the neighbourhood topologies defined above the global \gls<<4413>>PSO<<4413>> uses a star neighbourhood to allow for information to be shared all particles in the swarm. The particle whose position in the search space indicates the best solution found by the swarm is denoted as \emph<<4414>>gbest<<4414>>\cite<<4415>>SOSwarm, FundamentalSwarm, CompuIntelligenceIntro<<4415>>. 
\begin<<5362>>tex2html_deferred<<5362>>\par\end<<5363>>tex2html_deferred<<5363>>
In contrast, the local \gls<<4416>>PSO<<4416>> follows the process of natural birds more closely and uses the ring neighbourhood for information sharing\cite<<4417>>SOSwarm, FundamentalSwarm, CompuIntelligenceIntro<<4417>>. Hence, particles only share information with their immediate neighbourhood and not with the whole swarm. The best particle in the local \gls<<4418>>PSO<<4418>> is denoted as \emph<<4419>>lbest<<4419>>\cite<<4420>>SOSwarm, FundamentalSwarm, CompuIntelligenceIntro<<4420>>.
\begin<<5364>>tex2html_deferred<<5364>>\par\end<<5365>>tex2html_deferred<<5365>>
\subsubsection<<4421>>Movement of particles<<4421>>
\label<<4422>>sec:particleVelocity<<4422>>
A particle moves with a certain velocity through the search space. As the information is shared the particle must take advantage of the newly gained knowledge and therefore needs to adjust its own velocity to match the movement of the swarm. The particle updates its own velocity to move in the direction of the \emph<<4423>>gbest<<4423>> shared position, its own \emph<<4424>>pbest<<4424>> position and its current heading.
\begin<<5366>>tex2html_deferred<<5366>>\par\end<<5367>>tex2html_deferred<<5367>>
A particle needs to systematically explore the search space; therefore when the particle needs to update its personal velocity, it does not use all the information it has available, otherwise it will start to cycle solutions. The particle uses a certain amount of global information together with a certain amount of local information to produce a direction and new velocity\cite<<4425>>FundamentalSwarm,CompuIntelligenceIntro,PSOSelfHierarch,SOSwarm<<4425>>. 
\begin<<5368>>tex2html_deferred<<5368>>\par\end<<5369>>tex2html_deferred<<5369>>
The amount of global knowledge is referred to as the \emph<<4426>>social<<4426>> \label<<4427>>def:socialcomponent<<4427>> component \cite<<4428>>FundamentalSwarm,CompuIntelligenceIntro,PSOSelfHierarch,SOSwarm<<4428>>. The amount of personal information used by a particle is referred to as the \emph<<4429>>cognitive<<4429>> \label<<4430>>def:cognitivecomponent<<4430>> component\cite<<4431>>FundamentalSwarm,CompuIntelligenceIntro,PSOSelfHierarch,SOSwarm<<4431>>.
\begin<<5370>>tex2html_deferred<<5370>>\par\end<<5371>>tex2html_deferred<<5371>>
The velocity calculation of each particle is where the optimisation procedure occurs in the \gls<<4432>>PSO<<4432>> algorithm. It is the only means by which the \gls<<4433>>PSO<<4433>> algorithm searches the search space and particles are moved\cite<<4434>>CompuIntelligenceIntro<<4434>>.
\begin<<5372>>tex2html_deferred<<5372>>\par\end<<5373>>tex2html_deferred<<5373>>
The velocity update is where the personal experience of a particle and the knowledge gained through social sharing are incorporated. By updating the velocity of a particle, the particle is steered into a more promosing direction. The velocity of a particle is updated based upon on equation~\ref<<4435>>eq:velocityupdate<<4435>>.
\begin<<4436>>align<<4436>>
\hat<<4437>>v<<4437>>_i(t+1) ;SPMamp;= \hat<<4438>>v<<4438>>_i(t) + c_1\hat<<4439>>\phi<<4439>>_1(t)[\hat<<4440>>pbest<<4440>>_i - \hat<<4441>>x<<4441>>_i(t)] + c_2\hat<<4442>>\phi<<4442>>_2(t)[\hat<<4443>>gbest<<4443>>_i - \hat<<4444>>x<<4444>>_i(t)]\label<<4445>>eq:velocityupdate<<4445>>\\ 
\hat<<4446>>x<<4446>>_i(t+1) ;SPMamp;= \hat<<4447>>x<<4447>>_i(t) + \hat<<4448>>v<<4448>>_i(t+1)\label<<4449>>eq:positionupdate<<4449>>
\end<<4450>>align<<4450>>
where \begin<<4938>>tex2html_wrap_inline<<4938>>$\hat<<4451>>v<<4451>>_i(t+1)$\end<<4939>>tex2html_wrap_inline<<4939>>\space is the new velocity of particle \begin<<4940>>tex2html_wrap_inline<<4940>>$i$\end<<4941>>tex2html_wrap_inline<<4941>>\space for the next time step \begin<<4942>>tex2html_wrap_inline<<4942>>$t+1$\end<<4943>>tex2html_wrap_inline<<4943>>. The cognitive component is represented by the term \begin<<4944>>tex2html_wrap_inline<<4944>>$c_1\hat<<4452>>\phi<<4452>>_1(t)[\hat<<4453>>pbest<<4453>>_i - \hat<<4454>>x<<4454>>_i(t)]$\end<<4945>>tex2html_wrap_inline<<4945>>\space where \begin<<4946>>tex2html_wrap_inline<<4946>>$c_1$\end<<4947>>tex2html_wrap_inline<<4947>>\space is the cognitive coefficient. The social component is represented by the term \begin<<4948>>tex2html_wrap_inline<<4948>>$c_2\hat<<4455>>\phi<<4455>>_2(t)[\hat<<4456>>gbest<<4456>>_i - \hat<<4457>>x<<4457>>_i(t)]$\end<<4949>>tex2html_wrap_inline<<4949>>\space where \begin<<4950>>tex2html_wrap_inline<<4950>>$c_2$\end<<4951>>tex2html_wrap_inline<<4951>>\space is the social coefficient (discussed on page \pageref<<4458>>def:cognitivecomponent<<4458>>)\cite<<4459>>FundamentalSwarm,CompuIntelligenceIntro<<4459>>. Each of the respective components \begin<<4952>>tex2html_wrap_inline<<4952>>$c_1$\end<<4953>>tex2html_wrap_inline<<4953>>\space and \begin<<4954>>tex2html_wrap_inline<<4954>>$c_2$\end<<4955>>tex2html_wrap_inline<<4955>>\space controls how much neighborhood information is used in the calculation of the new velocity. 
\begin<<5374>>tex2html_deferred<<5374>>\par\end<<5375>>tex2html_deferred<<5375>>
The variables \begin<<4956>>tex2html_wrap_inline<<4956>>$\hat<<4460>>\phi<<4460>>_i$\end<<4957>>tex2html_wrap_inline<<4957>>\space and \begin<<4958>>tex2html_wrap_inline<<4958>>$\hat<<4461>>\phi<<4461>>_2$\end<<4959>>tex2html_wrap_inline<<4959>>\space are vectors containing random scalar values in the range \begin<<4960>>tex2html_wrap_inline<<4960>>$[0,1]$\end<<4961>>tex2html_wrap_inline<<4961>>. The current position of a particle in the search space at time step \begin<<4962>>tex2html_wrap_inline<<4962>>$t$\end<<4963>>tex2html_wrap_inline<<4963>>\space is represented by parameter \begin<<4964>>tex2html_wrap_inline<<4964>>$\hat<<4462>>x<<4462>>_i(t)$\end<<4965>>tex2html_wrap_inline<<4965>>\cite<<4463>>FundamentalSwarm,CompuIntelligenceIntro<<4463>>. After the new velocity is calculated the position of the particle is updated for time step \begin<<4966>>tex2html_wrap_inline<<4966>>$t+1$\end<<4967>>tex2html_wrap_inline<<4967>>\space using equation \ref<<4464>>eq:positionupdate<<4464>> \cite<<4465>>FundamentalSwarm,CompuIntelligenceIntro<<4465>>. The velocity update can be visually depicted as shown in figure \ref<<4466>>fig:particleVelocityUpdate<<4466>>. 
\begin<<4467>>figure<<4467>>[H]
	\begin<<4468>>center<<4468>>
	\begin<<5376>>tex2html_wrap_inline<<5376>>\fbox<<4671>>\includegraphics[width=4.5in,height=2.5in]<<4469>>./pictures/geovelocity.pdf<<4469>><<4671>>\end<<5377>>tex2html_wrap_inline<<5377>>
	\begin<<5378>>tex2html_deferred<<5378>>\caption<<4672>>Visual particle velocity update \cite<<4470>>SOSwarm,FundamentalSwarm,CompuIntelligenceIntro,PSOSelfHierarch<<4470>><<4672>>\end<<5379>>tex2html_deferred<<5379>>
	\label<<4471>>fig:particleVelocityUpdate<<4471>>
	\end<<4472>>center<<4472>>
\end<<4473>>figure<<4473>>
\begin<<5380>>tex2html_deferred<<5380>>\par\end<<5381>>tex2html_deferred<<5381>>
As discussed earlier gbest is the best position the swarm has occupied since the start of the algorithm. In the literature there are two defined methods of determining gbest. The most common method used is where gbest is the best position obtained by a particle in the swarm since the start of the algorithm; thus long-term knowledge dictates the best position found which favours exploitation \cite<<4474>>CompuIntelligenceIntro,FundamentalSwarm<<4474>>.
\begin<<5382>>tex2html_deferred<<5382>>\par\end<<5383>>tex2html_deferred<<5383>>
The second method of determining the gbest is the best particle position occupied by any particle in the swarm, in the \emph<<4475>>current<<4475>> iteration of the algorithm; thus short-term knowledge dictates the best position found which favours exploration \cite<<4476>>CompuIntelligenceIntro,FundamentalSwarm<<4476>>.
\begin<<5384>>tex2html_deferred<<5384>>\par\end<<5385>>tex2html_deferred<<5385>>
Most of the literature has concentrated on the velocity of the particle because it is the main function performing the optimisation. In research done by Ratnaweera et al.\cite<<4477>>PSOSelfHierarch<<4477>> particle positions in the solutions space are continually monitored. If the particle appears to be stagnant in the search space, the velocity is first updated, and then the particle is reinitialised with a random position. The new position of the particle is then updated with the new velocity, thus knowledge of the discarded particle is retained by using the velocity it had\cite<<4478>>PSOSelfHierarch<<4478>>.
\begin<<5386>>tex2html_deferred<<5386>>\par\end<<5387>>tex2html_deferred<<5387>>
In research done by Kalivarapu et al. \cite<<4479>>PSOPheromones<<4479>> a \gls<<4480>>PSO<<4480>> algorithm is developed that seeks to incorporate the pheromone notion of \gls<<4481>>ACO<<4481>> algorithms into the velocity updating of particles. The premise of the method is to allow greater sharing of information about promising areas between particles. The algorithm developed by the authors achieved promising results, with it finding solutions faster and also better solutions than other \gls<<4482>>PSO<<4482>> algorithms \cite<<4483>>PSOPheromones<<4483>>. 
\begin<<5388>>tex2html_deferred<<5388>>\par\end<<5389>>tex2html_deferred<<5389>>
Other research done by Monson and Seppi \cite<<4484>>adaptPSO<<4484>> is more concerned with how the particle is presented. In the general \gls<<4485>>PSO<<4485>> algorithm, particles have no physical form or volume and so particles in the swarm move through each other. The authors changed this in their algorithm by letting each particle have a radius around itself. This means that as particles move through the search space and another particle at a certain time step occupies the same space, the particles are said to collide. As one would expect, when a collision occurs both particles are deflected into random directions \cite<<4486>>adaptPSO<<4486>>. At a greater expense of computational time due to constant collision detection, the \gls<<4487>>PSO<<4487>> gains greater exploration in the search space. 
\begin<<5390>>tex2html_deferred<<5390>>\par\end<<5391>>tex2html_deferred<<5391>>
Finally, in the research by Lenin and Monan a \gls<<4488>>PSO<<4488>> algorithm is developed that is called the \gls<<4489>>ARPSO<<4489>>. The algorithm continually monitors the solutions in the swarm. If it picks up that a certain percentage of the swarm is stagnating, it activates the repulse state. In the repulse state particles are repelled from other particles in the swarm, which facilitates greater exploration. After a certain number of iterations, the algorithm returns to its default state, where particles attract each other. The state of attraction facilitates exploitation \cite<<4490>>PSOAttractRepulse<<4490>>.
\subsubsection<<4491>>Keeping velocity in check<<4491>>
As can be observed in equation \ref<<4492>>eq:velocityupdate<<4492>> the new velocity is added to the old velocity. The velocity of particles can get very large, especially for those particles that are far from the pbest and gbest positions. Large velocities are necessary for early exploration. 
\begin<<5392>>tex2html_deferred<<5392>>\par\end<<5393>>tex2html_deferred<<5393>>
Velocities should be kept in check since if a particles velocity becomes too large, it can overstep the search spaces boundaries and produce infeasible solutions \cite<<4493>>FundamentalSwarm<<4493>>. Thus the velocity of a particle needs to be bounded to ensure that its movement with in the search space stays within acceptable bounds. One of the means to bound the velocity is to clamp it. Clamping of velocity is achieved by applying equation \ref<<4494>>eq:velocityclamp<<4494>>. The equation is applied on the velocity before its position is updated\cite<<4495>>FundamentalSwarm<<4495>>.
\begin<<4496>>align<<4496>>
	\hat<<4497>>v_i<<4497>>(t+1) ;SPMamp;=
	\begin<<4498>>cases<<4498>>
	\hat<<4499>>v'_i<<4499>>(t+1), ;SPMamp;\text<<4690>>if \begin<<4968>>tex2html_wrap_inline<<4968>>$\hat<<4500>>v'_i<<4500>>(t+1) ;SPMlt; \hat<<4673>>V_<<4501>>max<<4501>><<4673>>$\end<<4969>>tex2html_wrap_inline<<4969>><<4690>>\\ 
	\hat<<4674>>V_<<4502>>max<<4502>><<4674>>, ;SPMamp;\text<<4691>>if \begin<<4970>>tex2html_wrap_inline<<4970>>$\hat<<4503>>v'_i<<4503>>(t+1) \geq \hat<<4675>>V_<<4504>>max<<4504>><<4675>>$\end<<4971>>tex2html_wrap_inline<<4971>><<4691>>
	\end<<4505>>cases<<4505>> \label<<4506>>eq:velocityclamp<<4506>>\\ 
	\hat<<4676>>V_<<4507>>max<<4507>><<4676>> ;SPMamp;= \delta(\hat<<4677>>x_<<4508>>max<<4508>><<4677>> - \hat<<4678>>x_<<4509>>min<<4509>><<4678>>)
\end<<4510>>align<<4510>>
In equation~\ref<<4511>>eq:velocityclamp<<4511>> \begin<<4972>>tex2html_wrap_inline<<4972>>$\hat<<4512>>v'_i<<4512>>$\end<<4973>>tex2html_wrap_inline<<4973>>\space is calculated using equation~\ref<<4513>>eq:velocityupdate<<4513>> for the global \gls<<4514>>PSO<<4514>>. Where \begin<<4974>>tex2html_wrap_inline<<4974>>$\hat<<4679>>V_<<4515>>max<<4515>><<4679>>$\end<<4975>>tex2html_wrap_inline<<4975>>\space is the maximum allowed velocity and \begin<<4976>>tex2html_wrap_inline<<4976>>$\delta \in (0,1]$\end<<4977>>tex2html_wrap_inline<<4977>>. The values \begin<<4978>>tex2html_wrap_inline<<4978>>$\hat<<4680>>x_<<4516>>max<<4516>><<4680>>$\end<<4979>>tex2html_wrap_inline<<4979>>\space and \begin<<4980>>tex2html_wrap_inline<<4980>>$\hat<<4681>>x_<<4517>>min<<4517>><<4681>>$\end<<4981>>tex2html_wrap_inline<<4981>>\space are the respective maximum and minimum position vectors in the domain the algorithm is being applied to \cite<<4518>>FundamentalSwarm<<4518>>. The value of \begin<<4982>>tex2html_wrap_inline<<4982>>$\delta$\end<<4983>>tex2html_wrap_inline<<4983>>\space is very problem dependent and must be carefully chosen to maximise the exploration-exploitation trade-off \cite<<4519>>FundamentalSwarm<<4519>>. The use of velocity clamping is not mandatory and should be considered only if the problem requires it\cite<<4520>>FundamentalSwarm<<4520>>. Finally there is no guarantee that velocity clamping will prohibit velocities becoming too large\cite<<4521>>FundamentalSwarm<<4521>>. There is still a chance, just to a lesser extent\cite<<4522>>FundamentalSwarm<<4522>>.
\begin<<5394>>tex2html_deferred<<5394>>\par\end<<5395>>tex2html_deferred<<5395>>
Velocity clamping is not the only developed means by which  the exploration-exploitation trade-off of the \gls<<4523>>PSO<<4523>> can be controlled. Consider the case when an object moves with a certain velocity it carries momentum. If the object were to suddenly change direction, momentum would for a certain period still move the object in the previous direction. Inertia weight seeks to add this type of behaviour to the particles of the \gls<<4524>>PSO<<4524>> algorithm. The velocity update equation with added inertia is formulated in equation \ref<<4525>>eq:inertia<<4525>> \cite<<4526>>FundamentalSwarm<<4526>>.
\begin<<4527>>equation<<4527>>
\hat<<4528>>v_i<<4528>>(t+1) = w\hat<<4529>>v_i<<4529>>(t) + c_1\hat<<4530>>\phi<<4530>>_1(t)[\hat<<4531>>pbest<<4531>>_i - \hat<<4532>>x<<4532>>_i(t)] + c_2\hat<<4533>>\phi<<4533>>_2(t)[\hat<<4534>>gbest<<4534>>_i - \hat<<4535>>x<<4535>>_i(t)]\label<<4536>>eq:inertia<<4536>>
\end<<4537>>equation<<4537>>
Inertia (\begin<<4984>>tex2html_wrap_inline<<4984>>$w$\end<<4985>>tex2html_wrap_inline<<4985>>\space in equation \ref<<4538>>eq:inertia<<4538>>) was added to the general velocity update equation in an attempt to control the exploration and exploitation of the \gls<<4539>>PSO<<4539>> as well as eliminate the need for velocity clamping\cite<<4540>>FundamentalSwarm<<4540>>. Although the inertia component did succeeded in enabling the control of the \gls<<4541>>PSO<<4541>>'s exploration-exploitation in the search space, the need for velocity clamping could not be eliminated\cite<<4542>>FundamentalSwarm<<4542>>.
\begin<<5396>>tex2html_deferred<<5396>>\par\end<<5397>>tex2html_deferred<<5397>>
For values of \begin<<4986>>tex2html_wrap_inline<<4986>>$w ;SPMgt; 1$\end<<4987>>tex2html_wrap_inline<<4987>>\space , the inertia of the particle is increased. With increased inertia the particle will explore more but it also more likely to leave the boundaries of the search space leading to infeasible solutions \cite<<4543>>FundamentalSwarm<<4543>>. 
\begin<<5398>>tex2html_deferred<<5398>>\par\end<<5399>>tex2html_deferred<<5399>>
When \begin<<4988>>tex2html_wrap_inline<<4988>>$w ;SPMlt; 1$\end<<4989>>tex2html_wrap_inline<<4989>>\space and depending on the values of \begin<<4990>>tex2html_wrap_inline<<4990>>$c_1$\end<<4991>>tex2html_wrap_inline<<4991>>\space and \begin<<4992>>tex2html_wrap_inline<<4992>>$c_2$\end<<4993>>tex2html_wrap_inline<<4993>>\space each time a particles velocity is updated a certain amount of momentum is lost. The particle seems to slow down, allowing it to exploit the current solution space in finer detail \cite<<4544>>FundamentalSwarm<<4544>>. This is not always the case, as \begin<<4994>>tex2html_wrap_inline<<4994>>$w ;SPMlt; 1$\end<<4995>>tex2html_wrap_inline<<4995>>\space can also lead to the particles in the swarm diverging never to converge on an optimal solution.
\begin<<5400>>tex2html_deferred<<5400>>\par\end<<5401>>tex2html_deferred<<5401>>
To allow for a greater trade-off between exploration and exploitation, the inertia value can be made dynamic. Exploration is favoured early on in an optimisation algorithm and  exploitation later on the algorithm when it is near an optimum. Various methods that are either linear decreasing or non-linear decreasing have been developed that modify the inertia component as the algorithm moves around in the search space \cite<<4545>>CompuIntelligenceIntro,FundamentalSwarm<<4545>>.
\begin<<5402>>tex2html_deferred<<5402>>\par\end<<5403>>tex2html_deferred<<5403>>
Finally, a similar inertia type component was developed from the analysis of particle dynamics \cite<<4546>>FundamentalSwarm<<4546>>. This new component is called the \emph<<4547>>constriction coefficient<<4547>> and, like the inertia above, also modifies the velocity update equation slightly\cite<<4548>>adaptPSO,FundamentalSwarm,CompuIntelligenceIntro<<4548>>. 
\begin<<5404>>tex2html_deferred<<5404>>\par\end<<5405>>tex2html_deferred<<5405>>
This modification can be observed in equation \ref<<4549>>eq:velocityconstriction<<4549>>, which is the standard velocity equation with the constriction coefficient. The constriction coefficient is formulated in equation \ref<<4550>>eq:constriction<<4550>>\cite<<4551>>adaptPSO,FundamentalSwarm,CompuIntelligenceIntro<<4551>>.
\begin<<4552>>align<<4552>>
v_i(t+1) ;SPMamp;= \chi[v_i(t) + c_1\phi_<<4553>>1<<4553>>(t)[pbest - x_i(t)] + c_2\phi_<<4554>>2<<4554>>(t)[gbest - x_i(t)]]\label<<4555>>eq:velocityconstriction<<4555>>\\ 
\chi ;SPMamp;= \frac<<4556>>2\kappa<<4556>><<4682>>\lvert 2 - \phi - \sqrt<<4557>>\phi^2 - 4\phi<<4557>>\rvert<<4682>>\label<<4558>>eq:constriction<<4558>>
\end<<4559>>align<<4559>>
\begin<<5406>>tex2html_deferred<<5406>>\par\end<<5407>>tex2html_deferred<<5407>>
search constriction coefficient is represented by the value \begin<<4996>>tex2html_wrap_inline<<4996>>$phi$\end<<4997>>tex2html_wrap_inline<<4997>>. The constriction coefficient evaluates to an ever-decreasing value between \begin<<4998>>tex2html_wrap_inline<<4998>>$[0,1]$\end<<4999>>tex2html_wrap_inline<<4999>>. By using the constriction coefficient the \gls<<4560>>PSO<<4560>> algorithm is also guaranteed to converge for values of \begin<<5000>>tex2html_wrap_inline<<5000>>$phi \geq 4$\end<<5001>>tex2html_wrap_inline<<5001>>\space and \begin<<5002>>tex2html_wrap_inline<<5002>>$\kappa \in [0,1]$\end<<5003>>tex2html_wrap_inline<<5003>>. As with the inertia discussed above, high values of \begin<<5004>>tex2html_wrap_inline<<5004>>$\kappa$\end<<5005>>tex2html_wrap_inline<<5005>>\space allow for greater exploration and slow convergence, whereas low values of \begin<<5006>>tex2html_wrap_inline<<5006>>$\kappa$\end<<5007>>tex2html_wrap_inline<<5007>>\space force the algorithm to exploit the search space and converge quickly \cite<<4561>>adaptPSO,FundamentalSwarm,CompuIntelligenceIntro<<4561>>.
\begin<<5408>>tex2html_deferred<<5408>>\par\end<<5409>>tex2html_deferred<<5409>>
\subsection<<4562>>Flow of the Algorithm<<4562>>
The general concepts that are evident in the \gls<<4563>>PSO<<4563>> algorithm have been covered. Using these concepts a general overview will now be given of the \gls<<4564>>PSO<<4564>> algorithm flow using algorithm~\ref<<4565>>alg:PSO<<4565>> as a reference point. Note that for the algorithm presented a start neighourhood topology is used and the algorithm is applied on a minimisation problem.
\begin<<4566>>algorithm<<4566>>[H]
\begin<<5410>>tex2html_deferred<<5410>>\caption<<4683>>Basic Global Particle Swarm Optimisation Algorithm\cite<<4567>>CompuIntelligenceIntro<<4567>><<4683>>\end<<5411>>tex2html_deferred<<5411>>
\label<<4568>>alg:PSO<<4568>>
	\begin<<4569>>algorithmic<<4569>>[1]
		\State Initialize \begin<<5008>>tex2html_wrap_inline<<5008>>$s_n$\end<<5009>>tex2html_wrap_inline<<5009>>\space swarm
		\While<<4570>>Stopping condition not met<<4570>>
			\For<<4684>>each particle \begin<<5010>>tex2html_wrap_inline<<5010>>$\hat<<4571>>p_i<<4571>> \leftarrow 0$\end<<5011>>tex2html_wrap_inline<<5011>>\space in \begin<<5012>>tex2html_wrap_inline<<5012>>$s_n$\end<<5013>>tex2html_wrap_inline<<5013>><<4684>>
				\State Evaluate particle with fitness function \begin<<5014>>tex2html_wrap_inline<<5014>>$f(\hat<<4572>>p_i<<4572>>)$\end<<5015>>tex2html_wrap_inline<<5015>>
				\If<<4685>>\begin<<5016>>tex2html_wrap_inline<<5016>>$f(\hat<<4573>>p_i<<4573>>) \leq pbest(\hat<<4574>>p_i<<4574>>)$\end<<5017>>tex2html_wrap_inline<<5017>><<4685>>
					\State personal best of \begin<<5018>>tex2html_wrap_inline<<5018>>$\hat<<4575>>p_i<<4575>>$\end<<5019>>tex2html_wrap_inline<<5019>>\space to \begin<<5020>>tex2html_wrap_inline<<5020>>$f(\hat<<4576>>p_i<<4576>>)$\end<<5021>>tex2html_wrap_inline<<5021>>
				\EndIf
				\If<<4686>>\begin<<5022>>tex2html_wrap_inline<<5022>>$f(\hat<<4577>>p_i<<4577>>) \leq f(\hat<<4578>>gbest)<<4578>>$\end<<5023>>tex2html_wrap_inline<<5023>><<4686>>
					\}State \begin<<5024>>tex2html_wrap_inline<<5024>>$\hat<<4579>>gbest<<4579>> \leftarrow f(\hat<<4580>>p_i<<4580>>)$\end<<5025>>tex2html_wrap_inline<<5025>>
				\EndIf
			\EndFor
			\For<<4687>>each particle \begin<<5026>>tex2html_wrap_inline<<5026>>$\hat<<4581>>p_i<<4581>> \leftarrow 0$\end<<5027>>tex2html_wrap_inline<<5027>>\space in \begin<<5028>>tex2html_wrap_inline<<5028>>$s_n$\end<<5029>>tex2html_wrap_inline<<5029>><<4687>>
				\State update velocity of \begin<<5030>>tex2html_wrap_inline<<5030>>$\hat<<4582>>p_i<<4582>>$\end<<5031>>tex2html_wrap_inline<<5031>>\space with equation~\ref<<4583>>eq:velocityupdate<<4583>>
				\State update position of \begin<<5032>>tex2html_wrap_inline<<5032>>$\hat<<4584>>p_i<<4584>>$\end<<5033>>tex2html_wrap_inline<<5033>>\space with equation~\ref<<4585>>eq:positionupdate<<4585>>
			\EndFor
		\EndWhile
	\end<<4586>>algorithmic<<4586>>
\end<<4587>>algorithm<<4587>>
\begin<<5412>>tex2html_deferred<<5412>>\par\end<<5413>>tex2html_deferred<<5413>>
The \gls<<4588>>PSO<<4588>> algorithm starts off by initialising the swarm of particles. Each particle is randomly assigned a certain position in the problem space. After the swarm has been initialised the algorithm enters the optimization or search phase, which starts in line 2.
\begin<<5414>>tex2html_deferred<<5414>>\par\end<<5415>>tex2html_deferred<<5415>>
Before the swarm can start moving around in the problem space, it first needs to determine the gbest particle as well as each particle's own pbest position. Therefore as can be observed in line 3, each particle's current fitness \begin<<5034>>tex2html_wrap_inline<<5034>>$f(\hat<<4589>>p_i<<4589>>)$\end<<5035>>tex2html_wrap_inline<<5035>>\space is determined using a problem-specific fitness function. The fitness determines the lucrativeness of the current position a particle occupies in the problem space.
\begin<<5416>>tex2html_deferred<<5416>>\par\end<<5417>>tex2html_deferred<<5417>>
Once the fitness of a particle's position is calculated, the algorithm needs to determine whether the current position of the particle is its pbest since the algorithm started. This comparison can be seen occur in line 5. 
\begin<<5418>>tex2html_deferred<<5418>>\par\end<<5419>>tex2html_deferred<<5419>>
If the fitness of the currently held position is indeed better than the previous personal best of the particle, then the new position is remembered as the personal best for that particular particle, as can be observed in line 6.
\begin<<5420>>tex2html_deferred<<5420>>\par\end<<5421>>tex2html_deferred<<5421>>
Regardless of whether the personal best of a particle has been updated or not, the algorithm performs another comparison also utilising the calculated fitness of the current position of the particle. The algorithm uses this fitness to also determine whether the current position of the particle is the best in the \emph<<4590>>entire<<4590>> swarm, i.e. whether it is  the \emph<<4591>>global<<4591>> best (gbest). This comparison occurs in line  8.
\begin<<5422>>tex2html_deferred<<5422>>\par\end<<5423>>tex2html_deferred<<5423>>
If the position of the particle is indeed the best position in the entire swarm, the algorithm replaces the current gbest with the position of the current particle being evaluated, as seen in line 9.
\begin<<5424>>tex2html_deferred<<5424>>\par\end<<5425>>tex2html_deferred<<5425>>
After the swarm has been evaluated, each particle should have a personal best and the swarm should have a global best. The swarm is therefore ready to move around in the problem space, which occurs in algorithm~\ref<<4592>>alg:PSO<<4592>> from lines 12 -- 15.
\begin<<5426>>tex2html_deferred<<5426>>\par\end<<5427>>tex2html_deferred<<5427>>
For each particle in the swarm the algorithm determines the particle's new velocity, as can be observed in line 13. The velocity of a particle is calculated using equation~\ref<<4593>>eq:velocityupdate<<4593>>. 
\begin<<5428>>tex2html_deferred<<5428>>\par\end<<5429>>tex2html_deferred<<5429>>
Once the velocity of a specific particle has been calculated, the particle is ready to move to a new position. Moving a particle from its current position to a new position using the calculated velocity is done by applying equation~\ref<<4594>>alg:PSO<<4594>> and occurs in line 14 in algorithm~\ref<<4595>>alg:PSO<<4595>>.
\begin<<5430>>tex2html_deferred<<5430>>\par\end<<5431>>tex2html_deferred<<5431>>
After the whole swarm has been moved, the algorithm continues to the next iteration to evaluate the new positions. This process occurs until certain stopping criteria are met.
\begin<<5432>>tex2html_deferred<<5432>>\par\end<<5433>>tex2html_deferred<<5433>>
\subsection<<4688>>PSO on the \gls<<4596>>FAP<<4596>><<4688>>
\label<<4597>>sec:psoonfap<<4597>>
The \gls<<4598>>PSO<<4598>> algorithm is also a relatively new algorithm and has been applied to only a handful of NP-Complete problems, including the \gls<<4599>>FAP<<4599>>. In this dissertation the \gls<<4600>>PSO<<4600>> algorithm will be utilized on the \gls<<4601>>FS-FAP<<4601>> to try and produce optimal solutions. 
\begin<<5434>>tex2html_deferred<<5434>>\par\end<<5435>>tex2html_deferred<<5435>>
Only two groups have conducted research where the \gls<<4602>>PSO<<4602>> has been applied to the \gls<<4603>>FAP<<4603>> to produce a near optimal solution. The research concentrated on the \gls<<4604>>MS-FAP<<4604>> variant of the \gls<<4605>>FAP<<4605>>, and so the aim of their algorithm was to reduce the span of frequencies used. The problem this dissertation is concerned with is the \gls<<4606>>FS-FAP<<4606>> where the amount of interference generated needs to be minimised. 
\begin<<5436>>tex2html_deferred<<5436>>\par\end<<5437>>tex2html_deferred<<5437>>
To date, no \gls<<4607>>PSO<<4607>> algorithm has been designed to operate on the \gls<<4608>>FS-FAP<<4608>> variant. Therefore, the interest in the research mentioned above is more to do with how the authors went about encoding a particular frequency plan as a position for a particle, than with the actual optimisation procedure.
\begin<<5438>>tex2html_deferred<<5438>>\par\end<<5439>>tex2html_deferred<<5439>>
In the research presented by Elkamchouchi et al.\cite<<4609>>EgyptFAPPSO<<4609>> a \gls<<4610>>PSO<<4610>> algorithm is applied to produce optimal solutions for the \gls<<4611>>MS-FAP<<4611>>. The way the authors went about assigning frequencies in their algorithm is known as \gls<<4612>>FEA<<4612>>.
This method works by first generating a list of calls, called a \emph<<4613>>call list<<4613>>, denoting calls that occur in the system\cite<<4614>>EgyptFAPPSO<<4614>>. 
\begin<<5440>>tex2html_deferred<<5440>>\par\end<<5441>>tex2html_deferred<<5441>>
The \gls<<4615>>FEA<<4615>> method then iterates over the calls in the list and assigns the lowest possible frequencies to the calls without violating interference constraints\cite<<4616>>EgyptFAPPSO<<4616>>. The authors note that the specific frequency that is assigned to a particular call depends heavily on the order the calls are in the list\cite<<4617>>EgyptFAPPSO<<4617>>.
\begin<<5442>>tex2html_deferred<<5442>>\par\end<<5443>>tex2html_deferred<<5443>>
Because of the success of the \gls<<4618>>PSO<<4618>> on the \gls<<4619>>MS-FAP<<4619>>, for this dissertation the \gls<<4620>>PSO<<4620>> algorithm was selected as the primary means by which to address the \gls<<4621>>FAP<<4621>>.
\begin<<5444>>tex2html_deferred<<5444>>\par\end<<5445>>tex2html_deferred<<5445>>
The algorithm also makes extensive use of knowledge gained by the various particles as they search the problem space. Depending on the values used for \begin<<5036>>tex2html_wrap_inline<<5036>>$w, c_1$\end<<5037>>tex2html_wrap_inline<<5037>>\space and \begin<<5038>>tex2html_wrap_inline<<5038>>$c_2$\end<<5039>>tex2html_wrap_inline<<5039>>, a particle does not only keep personal history (with pbest), but the swarm as a whole keeps a history of the best particle (neighbourhood best). Thus with regard to \gls<<4622>>FAP<<4622>>, it is possible that even though a particle might be in an overall bad position, it might have some small bit of good knowledge being overshadowed by bad knowledge. Through the extensive use of historical knowledge good information is more likely to be shared or kept slightly longer in the algorithms collective knowledge.
\begin<<5446>>tex2html_deferred<<5446>>\par\end<<5447>>tex2html_deferred<<5447>>
For this research the \gls<<4623>>PSO<<4623>> was applied to the \gls<<4624>>FS-FAP<<4624>> on the \gls<<4625>>COST<<4625>> 259 benchmark problems. The approach by the authors in the above literature could not be used. \gls<<4626>>FS-FAP<<4626>> is concerned with interference generated and there are some constraints which cannot be broken which are mentioned in section~\ref<<4627>>sec:COST259<<4627>> page~\pageref<<4628>>sec:COST259<<4628>>. In contrast with \gls<<4629>>MS-FAP<<4629>>, the performance measure is explicitly the number of constraints violated not interference.
\begin<<5448>>tex2html_deferred<<5448>>\par\end<<5449>>tex2html_deferred<<5449>>
\section<<4630>>Summary<<4630>>
\label<<4631>>sec:SISummary<<4631>>
In this chapter three swarm intelligence algorithms were discussed. The general flow of the ant colony optimisation algorithm was described with the help of a pesudo code as well as how the algorithm came about. The defining characteristics of the algorithm were identified and a literature review was given of the \gls<<4632>>ACO<<4632>> being applied to the \gls<<4633>>FAP<<4633>>.
\begin<<5450>>tex2html_deferred<<5450>>\par\end<<5451>>tex2html_deferred<<5451>>
The second swarm intelligence algorithm was the artificial bee colony optimization algorithm. How the algorithm was developed and how it performs its search in a problem space were explained. A diagram also outlined the general flow of the \gls<<4634>>ABC<<4634>> algorithm.
\begin<<5452>>tex2html_deferred<<5452>>\par\end<<5453>>tex2html_deferred<<5453>>
A series of defining characteristics was explained. Each characteristic is a defining attribute of the algorithm that makes it unique with regard to other algorithms. No literature is available on the algorithm being applied to the \gls<<4635>>FAP<<4635>> since to date no research has been conducted on such an \gls<<4636>>ABC<<4636>> algorithm.
\begin<<5454>>tex2html_deferred<<5454>>\par\end<<5455>>tex2html_deferred<<5455>>
This chapter concluded with the most important algorithm, which is used in this dissertation on the \gls<<4637>>FAP<<4637>>, namely the particle swarm optimization algorithm. The flow of the \gls<<4638>>PSO<<4638>> algorithm was described in algorithm~\ref<<4639>>alg:PSO<<4639>>. Furthermore, characteristics that make the algorithm unique were explained, and a literature review was given of the \gls<<4640>>PSO<<4640>> algorithm being applied to the \gls<<4641>>FAP<<4641>>.
<tex2html_endfile>#./chpt5.tex#
\part<<4642>>Discussion and results of implementing a PSO algorithm on the FAP<<4642>>
